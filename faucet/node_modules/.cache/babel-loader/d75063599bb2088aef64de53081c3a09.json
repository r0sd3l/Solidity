{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { resolveSize, relativeSizeToSize } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\n\nfunction toSubdomainLabelMapper(_ref) {\n  let [f, d] = _ref;\n  return d === null ? f : `${f}${d[0]}${d[1]}`;\n}\n\nfunction toSubdomainLabelUnmapper(value) {\n  if (typeof value !== 'string' || value.length === 0) {\n    throw new Error('Unsupported');\n  }\n\n  if (value.length === 1) {\n    return [value[0], null];\n  }\n\n  return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\n\nfunction subdomainLabel(size) {\n  const alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n  const alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n  return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, {\n    size,\n    maxLength: 61\n  }), alphaNumericArb)))).map(toSubdomainLabelMapper, toSubdomainLabelUnmapper).filter(filterInvalidSubdomainLabel));\n}\n\nfunction labelsMapper(elements) {\n  return `${elements[0].join('.')}.${elements[1]}`;\n}\n\nfunction labelsUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const lastDotIndex = value.lastIndexOf('.');\n  return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\n\nfunction labelsAdapter(labels) {\n  const [subDomains, suffix] = labels;\n  let lengthNotIncludingIndex = suffix.length;\n\n  for (let index = 0; index !== subDomains.length; ++index) {\n    lengthNotIncludingIndex += 1 + subDomains[index].length;\n\n    if (lengthNotIncludingIndex > 255) {\n      return {\n        adapted: true,\n        value: [subDomains.slice(0, index), suffix]\n      };\n    }\n  }\n\n  return {\n    adapted: false,\n    value: labels\n  };\n}\n\nexport function domain() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const resolvedSize = resolveSize(constraints.size);\n  const resolvedSizeMinusOne = relativeSizeToSize('-1', resolvedSize);\n  const alphaNumericArb = buildLowerAlphaArbitrary([]);\n  const publicSuffixArb = stringOf(alphaNumericArb, {\n    minLength: 2,\n    maxLength: 63,\n    size: resolvedSizeMinusOne\n  });\n  return convertFromNext(adapter(convertToNext(tuple(array(subdomainLabel(resolvedSize), {\n    size: resolvedSizeMinusOne,\n    minLength: 1,\n    maxLength: 127\n  }), publicSuffixArb)), labelsAdapter).map(labelsMapper, labelsUnmapper));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/domain.js"],"names":["array","buildLowerAlphaArbitrary","buildLowerAlphaNumericArbitrary","option","stringOf","tuple","filterInvalidSubdomainLabel","convertFromNext","convertToNext","resolveSize","relativeSizeToSize","adapter","toSubdomainLabelMapper","f","d","toSubdomainLabelUnmapper","value","length","Error","substring","subdomainLabel","size","alphaNumericArb","alphaNumericHyphenArb","maxLength","map","filter","labelsMapper","elements","join","labelsUnmapper","lastDotIndex","lastIndexOf","split","labelsAdapter","labels","subDomains","suffix","lengthNotIncludingIndex","index","adapted","slice","domain","constraints","resolvedSize","resolvedSizeMinusOne","publicSuffixArb","minLength"],"mappings":"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","sourcesContent":["import { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary, } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { resolveSize, relativeSizeToSize } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\nfunction toSubdomainLabelMapper([f, d]) {\n    return d === null ? f : `${f}${d[0]}${d[1]}`;\n}\nfunction toSubdomainLabelUnmapper(value) {\n    if (typeof value !== 'string' || value.length === 0) {\n        throw new Error('Unsupported');\n    }\n    if (value.length === 1) {\n        return [value[0], null];\n    }\n    return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\nfunction subdomainLabel(size) {\n    const alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n    const alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n    return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, { size, maxLength: 61 }), alphaNumericArb))))\n        .map(toSubdomainLabelMapper, toSubdomainLabelUnmapper)\n        .filter(filterInvalidSubdomainLabel));\n}\nfunction labelsMapper(elements) {\n    return `${elements[0].join('.')}.${elements[1]}`;\n}\nfunction labelsUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported type');\n    }\n    const lastDotIndex = value.lastIndexOf('.');\n    return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\nfunction labelsAdapter(labels) {\n    const [subDomains, suffix] = labels;\n    let lengthNotIncludingIndex = suffix.length;\n    for (let index = 0; index !== subDomains.length; ++index) {\n        lengthNotIncludingIndex += 1 + subDomains[index].length;\n        if (lengthNotIncludingIndex > 255) {\n            return { adapted: true, value: [subDomains.slice(0, index), suffix] };\n        }\n    }\n    return { adapted: false, value: labels };\n}\nexport function domain(constraints = {}) {\n    const resolvedSize = resolveSize(constraints.size);\n    const resolvedSizeMinusOne = relativeSizeToSize('-1', resolvedSize);\n    const alphaNumericArb = buildLowerAlphaArbitrary([]);\n    const publicSuffixArb = stringOf(alphaNumericArb, { minLength: 2, maxLength: 63, size: resolvedSizeMinusOne });\n    return convertFromNext(adapter(convertToNext(tuple(array(subdomainLabel(resolvedSize), { size: resolvedSizeMinusOne, minLength: 1, maxLength: 127 }), publicSuffixArb)), labelsAdapter).map(labelsMapper, labelsUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}