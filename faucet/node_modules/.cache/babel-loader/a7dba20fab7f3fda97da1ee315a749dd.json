{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { ascii } from './ascii.js';\nimport { extractStringConstraints } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\n\nfunction asciiString() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = extractStringConstraints(args);\n  return convertFromNext(convertToNext(array(ascii(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\n\nexport { asciiString };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/asciiString.js"],"names":["convertFromNext","convertToNext","array","ascii","extractStringConstraints","codePointsToStringMapper","codePointsToStringUnmapper","asciiString","args","constraints","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,wBAAT,QAA0C,oDAA1C;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;;AACA,SAASC,WAAT,GAA8B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC1B,QAAMC,WAAW,GAAGL,wBAAwB,CAACI,IAAD,CAA5C;AACA,SAAOR,eAAe,CAACC,aAAa,CAACC,KAAK,CAACC,KAAK,EAAN,EAAUM,WAAV,CAAN,CAAb,CAA2CC,GAA3C,CAA+CL,wBAA/C,EAAyEC,0BAAzE,CAAD,CAAtB;AACH;;AACD,SAASC,WAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { ascii } from './ascii.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nfunction asciiString(...args) {\n    const constraints = extractStringConstraints(args);\n    return convertFromNext(convertToNext(array(ascii(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\nexport { asciiString };\n"]},"metadata":{},"sourceType":"module"}