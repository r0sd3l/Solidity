{"ast":null,"code":"export function isSubarrayOf(source, small) {\n  const countMap = new Map();\n  let countMinusZero = 0;\n\n  for (const sourceEntry of source) {\n    if (Object.is(sourceEntry, -0)) {\n      ++countMinusZero;\n    } else {\n      const oldCount = countMap.get(sourceEntry) || 0;\n      countMap.set(sourceEntry, oldCount + 1);\n    }\n  }\n\n  for (let index = 0; index !== small.length; ++index) {\n    if (!(index in small)) {\n      return false;\n    }\n\n    const smallEntry = small[index];\n\n    if (Object.is(smallEntry, -0)) {\n      if (countMinusZero === 0) return false;\n      --countMinusZero;\n    } else {\n      const oldCount = countMap.get(smallEntry) || 0;\n      if (oldCount === 0) return false;\n      countMap.set(smallEntry, oldCount - 1);\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/IsSubarrayOf.js"],"names":["isSubarrayOf","source","small","countMap","Map","countMinusZero","sourceEntry","Object","is","oldCount","get","set","index","length","smallEntry"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqC;AACxC,QAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,MAAIC,cAAc,GAAG,CAArB;;AACA,OAAK,MAAMC,WAAX,IAA0BL,MAA1B,EAAkC;AAC9B,QAAIM,MAAM,CAACC,EAAP,CAAUF,WAAV,EAAuB,CAAC,CAAxB,CAAJ,EAAgC;AAC5B,QAAED,cAAF;AACH,KAFD,MAGK;AACD,YAAMI,QAAQ,GAAGN,QAAQ,CAACO,GAAT,CAAaJ,WAAb,KAA6B,CAA9C;AACAH,MAAAA,QAAQ,CAACQ,GAAT,CAAaL,WAAb,EAA0BG,QAAQ,GAAG,CAArC;AACH;AACJ;;AACD,OAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,KAAKV,KAAK,CAACW,MAApC,EAA4C,EAAED,KAA9C,EAAqD;AACjD,QAAI,EAAEA,KAAK,IAAIV,KAAX,CAAJ,EAAuB;AACnB,aAAO,KAAP;AACH;;AACD,UAAMY,UAAU,GAAGZ,KAAK,CAACU,KAAD,CAAxB;;AACA,QAAIL,MAAM,CAACC,EAAP,CAAUM,UAAV,EAAsB,CAAC,CAAvB,CAAJ,EAA+B;AAC3B,UAAIT,cAAc,KAAK,CAAvB,EACI,OAAO,KAAP;AACJ,QAAEA,cAAF;AACH,KAJD,MAKK;AACD,YAAMI,QAAQ,GAAGN,QAAQ,CAACO,GAAT,CAAaI,UAAb,KAA4B,CAA7C;AACA,UAAIL,QAAQ,KAAK,CAAjB,EACI,OAAO,KAAP;AACJN,MAAAA,QAAQ,CAACQ,GAAT,CAAaG,UAAb,EAAyBL,QAAQ,GAAG,CAApC;AACH;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["export function isSubarrayOf(source, small) {\n    const countMap = new Map();\n    let countMinusZero = 0;\n    for (const sourceEntry of source) {\n        if (Object.is(sourceEntry, -0)) {\n            ++countMinusZero;\n        }\n        else {\n            const oldCount = countMap.get(sourceEntry) || 0;\n            countMap.set(sourceEntry, oldCount + 1);\n        }\n    }\n    for (let index = 0; index !== small.length; ++index) {\n        if (!(index in small)) {\n            return false;\n        }\n        const smallEntry = small[index];\n        if (Object.is(smallEntry, -0)) {\n            if (countMinusZero === 0)\n                return false;\n            --countMinusZero;\n        }\n        else {\n            const oldCount = countMap.get(smallEntry) || 0;\n            if (oldCount === 0)\n                return false;\n            countMap.set(smallEntry, oldCount - 1);\n        }\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}