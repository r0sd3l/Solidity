{"ast":null,"code":"import { stream } from '../../../stream/Stream.js';\nimport { NextValue } from '../../../check/arbitrary/definition/NextValue.js';\n\nfunction halveBigInt(n) {\n  return n / BigInt(2);\n}\n\nexport function shrinkBigInt(current, target, tryTargetAsap) {\n  const realGap = current - target;\n\n  function* shrinkDecr() {\n    let previous = tryTargetAsap ? undefined : target;\n    const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n\n    for (let toremove = gap; toremove > 0; toremove = halveBigInt(toremove)) {\n      const next = current - toremove;\n      yield new NextValue(next, previous);\n      previous = next;\n    }\n  }\n\n  function* shrinkIncr() {\n    let previous = tryTargetAsap ? undefined : target;\n    const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n\n    for (let toremove = gap; toremove < 0; toremove = halveBigInt(toremove)) {\n      const next = current - toremove;\n      yield new NextValue(next, previous);\n      previous = next;\n    }\n  }\n\n  return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkBigInt.js"],"names":["stream","NextValue","halveBigInt","n","BigInt","shrinkBigInt","current","target","tryTargetAsap","realGap","shrinkDecr","previous","undefined","gap","toremove","next","shrinkIncr"],"mappings":"AAAA,SAASA,MAAT,QAAuB,2BAAvB;AACA,SAASC,SAAT,QAA0B,kDAA1B;;AACA,SAASC,WAAT,CAAqBC,CAArB,EAAwB;AACpB,SAAOA,CAAC,GAAGC,MAAM,CAAC,CAAD,CAAjB;AACH;;AACD,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuCC,aAAvC,EAAsD;AACzD,QAAMC,OAAO,GAAGH,OAAO,GAAGC,MAA1B;;AACA,YAAUG,UAAV,GAAuB;AACnB,QAAIC,QAAQ,GAAGH,aAAa,GAAGI,SAAH,GAAeL,MAA3C;AACA,UAAMM,GAAG,GAAGL,aAAa,GAAGC,OAAH,GAAaP,WAAW,CAACO,OAAD,CAAjD;;AACA,SAAK,IAAIK,QAAQ,GAAGD,GAApB,EAAyBC,QAAQ,GAAG,CAApC,EAAuCA,QAAQ,GAAGZ,WAAW,CAACY,QAAD,CAA7D,EAAyE;AACrE,YAAMC,IAAI,GAAGT,OAAO,GAAGQ,QAAvB;AACA,YAAM,IAAIb,SAAJ,CAAcc,IAAd,EAAoBJ,QAApB,CAAN;AACAA,MAAAA,QAAQ,GAAGI,IAAX;AACH;AACJ;;AACD,YAAUC,UAAV,GAAuB;AACnB,QAAIL,QAAQ,GAAGH,aAAa,GAAGI,SAAH,GAAeL,MAA3C;AACA,UAAMM,GAAG,GAAGL,aAAa,GAAGC,OAAH,GAAaP,WAAW,CAACO,OAAD,CAAjD;;AACA,SAAK,IAAIK,QAAQ,GAAGD,GAApB,EAAyBC,QAAQ,GAAG,CAApC,EAAuCA,QAAQ,GAAGZ,WAAW,CAACY,QAAD,CAA7D,EAAyE;AACrE,YAAMC,IAAI,GAAGT,OAAO,GAAGQ,QAAvB;AACA,YAAM,IAAIb,SAAJ,CAAcc,IAAd,EAAoBJ,QAApB,CAAN;AACAA,MAAAA,QAAQ,GAAGI,IAAX;AACH;AACJ;;AACD,SAAON,OAAO,GAAG,CAAV,GAAcT,MAAM,CAACU,UAAU,EAAX,CAApB,GAAqCV,MAAM,CAACgB,UAAU,EAAX,CAAlD;AACH","sourcesContent":["import { stream } from '../../../stream/Stream.js';\nimport { NextValue } from '../../../check/arbitrary/definition/NextValue.js';\nfunction halveBigInt(n) {\n    return n / BigInt(2);\n}\nexport function shrinkBigInt(current, target, tryTargetAsap) {\n    const realGap = current - target;\n    function* shrinkDecr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n        for (let toremove = gap; toremove > 0; toremove = halveBigInt(toremove)) {\n            const next = current - toremove;\n            yield new NextValue(next, previous);\n            previous = next;\n        }\n    }\n    function* shrinkIncr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n        for (let toremove = gap; toremove < 0; toremove = halveBigInt(toremove)) {\n            const next = current - toremove;\n            yield new NextValue(next, previous);\n            previous = next;\n        }\n    }\n    return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}\n"]},"metadata":{},"sourceType":"module"}