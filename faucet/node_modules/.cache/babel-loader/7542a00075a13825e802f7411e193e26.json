{"ast":null,"code":"import { SchedulerImplem } from '../implementations/SchedulerImplem.js';\n\nfunction buildNextTaskIndex(ordering) {\n  let numTasks = 0;\n  return {\n    clone: () => buildNextTaskIndex(ordering),\n    nextTaskIndex: scheduledTasks => {\n      if (ordering.length <= numTasks) {\n        throw new Error(`Invalid schedulerFor defined: too many tasks have been scheduled`);\n      }\n\n      const taskIndex = scheduledTasks.findIndex(t => t.taskId === ordering[numTasks]);\n\n      if (taskIndex === -1) {\n        throw new Error(`Invalid schedulerFor defined: unable to find next task`);\n      }\n\n      ++numTasks;\n      return taskIndex;\n    }\n  };\n}\n\nexport function buildSchedulerFor(act, ordering) {\n  return new SchedulerImplem(act, buildNextTaskIndex(ordering));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BuildSchedulerFor.js"],"names":["SchedulerImplem","buildNextTaskIndex","ordering","numTasks","clone","nextTaskIndex","scheduledTasks","length","Error","taskIndex","findIndex","t","taskId","buildSchedulerFor","act"],"mappings":"AAAA,SAASA,eAAT,QAAgC,uCAAhC;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,MAAIC,QAAQ,GAAG,CAAf;AACA,SAAO;AACHC,IAAAA,KAAK,EAAE,MAAMH,kBAAkB,CAACC,QAAD,CAD5B;AAEHG,IAAAA,aAAa,EAAGC,cAAD,IAAoB;AAC/B,UAAIJ,QAAQ,CAACK,MAAT,IAAmBJ,QAAvB,EAAiC;AAC7B,cAAM,IAAIK,KAAJ,CAAW,kEAAX,CAAN;AACH;;AACD,YAAMC,SAAS,GAAGH,cAAc,CAACI,SAAf,CAA0BC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAaV,QAAQ,CAACC,QAAD,CAArD,CAAlB;;AACA,UAAIM,SAAS,KAAK,CAAC,CAAnB,EAAsB;AAClB,cAAM,IAAID,KAAJ,CAAW,wDAAX,CAAN;AACH;;AACD,QAAEL,QAAF;AACA,aAAOM,SAAP;AACH;AAZE,GAAP;AAcH;;AACD,OAAO,SAASI,iBAAT,CAA2BC,GAA3B,EAAgCZ,QAAhC,EAA0C;AAC7C,SAAO,IAAIF,eAAJ,CAAoBc,GAApB,EAAyBb,kBAAkB,CAACC,QAAD,CAA3C,CAAP;AACH","sourcesContent":["import { SchedulerImplem } from '../implementations/SchedulerImplem.js';\nfunction buildNextTaskIndex(ordering) {\n    let numTasks = 0;\n    return {\n        clone: () => buildNextTaskIndex(ordering),\n        nextTaskIndex: (scheduledTasks) => {\n            if (ordering.length <= numTasks) {\n                throw new Error(`Invalid schedulerFor defined: too many tasks have been scheduled`);\n            }\n            const taskIndex = scheduledTasks.findIndex((t) => t.taskId === ordering[numTasks]);\n            if (taskIndex === -1) {\n                throw new Error(`Invalid schedulerFor defined: unable to find next task`);\n            }\n            ++numTasks;\n            return taskIndex;\n        },\n    };\n}\nexport function buildSchedulerFor(act, ordering) {\n    return new SchedulerImplem(act, buildNextTaskIndex(ordering));\n}\n"]},"metadata":{},"sourceType":"module"}