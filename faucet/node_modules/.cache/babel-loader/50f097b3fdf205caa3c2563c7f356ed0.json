{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary } from './_internals/helpers/MaxLengthFromMinLength.js';\n\nfunction createArrayArbitrary(nextArb, size, minLength, maxLengthOrUnset) {\n  const maxLength = maxLengthOrUnset !== undefined ? maxLengthOrUnset : MaxLengthUpperBound;\n  const specifiedMaxLength = maxLengthOrUnset !== undefined;\n  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength);\n  return convertFromNext(new ArrayArbitrary(nextArb, minLength, maxGeneratedLength, maxLength));\n}\n\nfunction array(arb) {\n  const nextArb = convertToNext(arb);\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (args[0] === undefined) {\n    return createArrayArbitrary(nextArb, undefined, 0, undefined);\n  }\n\n  if (typeof args[0] === 'object') {\n    return createArrayArbitrary(nextArb, args[0].size, args[0].minLength || 0, args[0].maxLength);\n  }\n\n  if (args[1] !== undefined) {\n    return createArrayArbitrary(nextArb, undefined, args[0], args[1]);\n  }\n\n  return createArrayArbitrary(nextArb, undefined, 0, args[0]);\n}\n\nexport { array };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/array.js"],"names":["convertFromNext","convertToNext","ArrayArbitrary","MaxLengthUpperBound","maxGeneratedLengthFromSizeForArbitrary","createArrayArbitrary","nextArb","size","minLength","maxLengthOrUnset","maxLength","undefined","specifiedMaxLength","maxGeneratedLength","array","arb","args"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,mBAAT,EAA8BC,sCAA9B,QAA6E,gDAA7E;;AACA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,SAA7C,EAAwDC,gBAAxD,EAA0E;AACtE,QAAMC,SAAS,GAAGD,gBAAgB,KAAKE,SAArB,GAAiCF,gBAAjC,GAAoDN,mBAAtE;AACA,QAAMS,kBAAkB,GAAGH,gBAAgB,KAAKE,SAAhD;AACA,QAAME,kBAAkB,GAAGT,sCAAsC,CAACG,IAAD,EAAOC,SAAP,EAAkBE,SAAlB,EAA6BE,kBAA7B,CAAjE;AACA,SAAOZ,eAAe,CAAC,IAAIE,cAAJ,CAAmBI,OAAnB,EAA4BE,SAA5B,EAAuCK,kBAAvC,EAA2DH,SAA3D,CAAD,CAAtB;AACH;;AACD,SAASI,KAAT,CAAeC,GAAf,EAA6B;AACzB,QAAMT,OAAO,GAAGL,aAAa,CAACc,GAAD,CAA7B;;AADyB,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAEzB,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYL,SAAhB,EAA2B;AACvB,WAAON,oBAAoB,CAACC,OAAD,EAAUK,SAAV,EAAqB,CAArB,EAAwBA,SAAxB,CAA3B;AACH;;AACD,MAAI,OAAOK,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,WAAOX,oBAAoB,CAACC,OAAD,EAAUU,IAAI,CAAC,CAAD,CAAJ,CAAQT,IAAlB,EAAwBS,IAAI,CAAC,CAAD,CAAJ,CAAQR,SAAR,IAAqB,CAA7C,EAAgDQ,IAAI,CAAC,CAAD,CAAJ,CAAQN,SAAxD,CAA3B;AACH;;AACD,MAAIM,IAAI,CAAC,CAAD,CAAJ,KAAYL,SAAhB,EAA2B;AACvB,WAAON,oBAAoB,CAACC,OAAD,EAAUK,SAAV,EAAqBK,IAAI,CAAC,CAAD,CAAzB,EAA8BA,IAAI,CAAC,CAAD,CAAlC,CAA3B;AACH;;AACD,SAAOX,oBAAoB,CAACC,OAAD,EAAUK,SAAV,EAAqB,CAArB,EAAwBK,IAAI,CAAC,CAAD,CAA5B,CAA3B;AACH;;AACD,SAASF,KAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary, } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction createArrayArbitrary(nextArb, size, minLength, maxLengthOrUnset) {\n    const maxLength = maxLengthOrUnset !== undefined ? maxLengthOrUnset : MaxLengthUpperBound;\n    const specifiedMaxLength = maxLengthOrUnset !== undefined;\n    const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength);\n    return convertFromNext(new ArrayArbitrary(nextArb, minLength, maxGeneratedLength, maxLength));\n}\nfunction array(arb, ...args) {\n    const nextArb = convertToNext(arb);\n    if (args[0] === undefined) {\n        return createArrayArbitrary(nextArb, undefined, 0, undefined);\n    }\n    if (typeof args[0] === 'object') {\n        return createArrayArbitrary(nextArb, args[0].size, args[0].minLength || 0, args[0].maxLength);\n    }\n    if (args[1] !== undefined) {\n        return createArrayArbitrary(nextArb, undefined, args[0], args[1]);\n    }\n    return createArrayArbitrary(nextArb, undefined, 0, args[0]);\n}\nexport { array };\n"]},"metadata":{},"sourceType":"module"}