{"ast":null,"code":"import { constantFrom } from './constantFrom.js';\nimport { constant } from './constant.js';\nimport { option } from './option.js';\nimport { tuple } from './tuple.js';\nimport { webQueryParameters } from './webQueryParameters.js';\nimport { webFragments } from './webFragments.js';\nimport { webAuthority } from './webAuthority.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { partsToUrlMapper, partsToUrlUnmapper } from './_internals/mappers/PartsToUrl.js';\nimport { relativeSizeToSize, resolveSize } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { buildUriPathArbitrary } from './_internals/builders/UriPathArbitraryBuilder.js';\nexport function webUrl(constraints) {\n  const c = constraints || {};\n  const resolvedSize = resolveSize(c.size);\n  const resolvedAuthoritySettingsSize = c.authoritySettings !== undefined && c.authoritySettings.size !== undefined ? relativeSizeToSize(c.authoritySettings.size, resolvedSize) : resolvedSize;\n  const resolvedAuthoritySettings = Object.assign(Object.assign({}, c.authoritySettings), {\n    size: resolvedAuthoritySettingsSize\n  });\n  const validSchemes = c.validSchemes || ['http', 'https'];\n  const schemeArb = constantFrom(...validSchemes);\n  const authorityArb = webAuthority(resolvedAuthoritySettings);\n  const pathArb = buildUriPathArbitrary(resolvedSize);\n  return convertFromNext(convertToNext(tuple(schemeArb, authorityArb, pathArb, c.withQueryParameters === true ? option(webQueryParameters({\n    size: resolvedSize\n  })) : constant(null), c.withFragments === true ? option(webFragments({\n    size: resolvedSize\n  })) : constant(null))).map(partsToUrlMapper, partsToUrlUnmapper));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/webUrl.js"],"names":["constantFrom","constant","option","tuple","webQueryParameters","webFragments","webAuthority","convertFromNext","convertToNext","partsToUrlMapper","partsToUrlUnmapper","relativeSizeToSize","resolveSize","buildUriPathArbitrary","webUrl","constraints","c","resolvedSize","size","resolvedAuthoritySettingsSize","authoritySettings","undefined","resolvedAuthoritySettings","Object","assign","validSchemes","schemeArb","authorityArb","pathArb","withQueryParameters","withFragments","map"],"mappings":"AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,oCAArD;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,gDAAhD;AACA,SAASC,qBAAT,QAAsC,kDAAtC;AACA,OAAO,SAASC,MAAT,CAAgBC,WAAhB,EAA6B;AAChC,QAAMC,CAAC,GAAGD,WAAW,IAAI,EAAzB;AACA,QAAME,YAAY,GAAGL,WAAW,CAACI,CAAC,CAACE,IAAH,CAAhC;AACA,QAAMC,6BAA6B,GAAGH,CAAC,CAACI,iBAAF,KAAwBC,SAAxB,IAAqCL,CAAC,CAACI,iBAAF,CAAoBF,IAApB,KAA6BG,SAAlE,GAChCV,kBAAkB,CAACK,CAAC,CAACI,iBAAF,CAAoBF,IAArB,EAA2BD,YAA3B,CADc,GAEhCA,YAFN;AAGA,QAAMK,yBAAyB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,CAAC,CAACI,iBAApB,CAAd,EAAsD;AAAEF,IAAAA,IAAI,EAAEC;AAAR,GAAtD,CAAlC;AACA,QAAMM,YAAY,GAAGT,CAAC,CAACS,YAAF,IAAkB,CAAC,MAAD,EAAS,OAAT,CAAvC;AACA,QAAMC,SAAS,GAAG1B,YAAY,CAAC,GAAGyB,YAAJ,CAA9B;AACA,QAAME,YAAY,GAAGrB,YAAY,CAACgB,yBAAD,CAAjC;AACA,QAAMM,OAAO,GAAGf,qBAAqB,CAACI,YAAD,CAArC;AACA,SAAOV,eAAe,CAACC,aAAa,CAACL,KAAK,CAACuB,SAAD,EAAYC,YAAZ,EAA0BC,OAA1B,EAAmCZ,CAAC,CAACa,mBAAF,KAA0B,IAA1B,GAAiC3B,MAAM,CAACE,kBAAkB,CAAC;AAAEc,IAAAA,IAAI,EAAED;AAAR,GAAD,CAAnB,CAAvC,GAAsFhB,QAAQ,CAAC,IAAD,CAAjI,EAAyIe,CAAC,CAACc,aAAF,KAAoB,IAApB,GAA2B5B,MAAM,CAACG,YAAY,CAAC;AAAEa,IAAAA,IAAI,EAAED;AAAR,GAAD,CAAb,CAAjC,GAA0EhB,QAAQ,CAAC,IAAD,CAA3N,CAAN,CAAb,CAAuP8B,GAAvP,CAA2PtB,gBAA3P,EAA6QC,kBAA7Q,CAAD,CAAtB;AACH","sourcesContent":["import { constantFrom } from './constantFrom.js';\nimport { constant } from './constant.js';\nimport { option } from './option.js';\nimport { tuple } from './tuple.js';\nimport { webQueryParameters } from './webQueryParameters.js';\nimport { webFragments } from './webFragments.js';\nimport { webAuthority } from './webAuthority.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { partsToUrlMapper, partsToUrlUnmapper } from './_internals/mappers/PartsToUrl.js';\nimport { relativeSizeToSize, resolveSize } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { buildUriPathArbitrary } from './_internals/builders/UriPathArbitraryBuilder.js';\nexport function webUrl(constraints) {\n    const c = constraints || {};\n    const resolvedSize = resolveSize(c.size);\n    const resolvedAuthoritySettingsSize = c.authoritySettings !== undefined && c.authoritySettings.size !== undefined\n        ? relativeSizeToSize(c.authoritySettings.size, resolvedSize)\n        : resolvedSize;\n    const resolvedAuthoritySettings = Object.assign(Object.assign({}, c.authoritySettings), { size: resolvedAuthoritySettingsSize });\n    const validSchemes = c.validSchemes || ['http', 'https'];\n    const schemeArb = constantFrom(...validSchemes);\n    const authorityArb = webAuthority(resolvedAuthoritySettings);\n    const pathArb = buildUriPathArbitrary(resolvedSize);\n    return convertFromNext(convertToNext(tuple(schemeArb, authorityArb, pathArb, c.withQueryParameters === true ? option(webQueryParameters({ size: resolvedSize })) : constant(null), c.withFragments === true ? option(webFragments({ size: resolvedSize })) : constant(null))).map(partsToUrlMapper, partsToUrlUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}