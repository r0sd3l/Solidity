{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { char16bits } from './char16bits.js';\nimport { extractStringConstraints } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { charsToStringMapper, charsToStringUnmapper } from './_internals/mappers/CharsToString.js';\n\nfunction string16bits() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = extractStringConstraints(args);\n  return convertFromNext(convertToNext(array(char16bits(), constraints)).map(charsToStringMapper, charsToStringUnmapper));\n}\n\nexport { string16bits };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/string16bits.js"],"names":["convertFromNext","convertToNext","array","char16bits","extractStringConstraints","charsToStringMapper","charsToStringUnmapper","string16bits","args","constraints","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,wBAAT,QAA0C,oDAA1C;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,uCAA3D;;AACA,SAASC,YAAT,GAA+B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC3B,QAAMC,WAAW,GAAGL,wBAAwB,CAACI,IAAD,CAA5C;AACA,SAAOR,eAAe,CAACC,aAAa,CAACC,KAAK,CAACC,UAAU,EAAX,EAAeM,WAAf,CAAN,CAAb,CAAgDC,GAAhD,CAAoDL,mBAApD,EAAyEC,qBAAzE,CAAD,CAAtB;AACH;;AACD,SAASC,YAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { char16bits } from './char16bits.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { charsToStringMapper, charsToStringUnmapper } from './_internals/mappers/CharsToString.js';\nfunction string16bits(...args) {\n    const constraints = extractStringConstraints(args);\n    return convertFromNext(convertToNext(array(char16bits(), constraints)).map(charsToStringMapper, charsToStringUnmapper));\n}\nexport { string16bits };\n"]},"metadata":{},"sourceType":"module"}