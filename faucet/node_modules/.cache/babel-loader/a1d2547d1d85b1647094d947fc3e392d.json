{"ast":null,"code":"import { buildPartialRecordArbitrary } from './_internals/builders/PartialRecordArbitraryBuilder.js';\n\nfunction record(recordModel, constraints) {\n  if (constraints == null) {\n    return buildPartialRecordArbitrary(recordModel, undefined);\n  }\n\n  if ('withDeletedKeys' in constraints && 'requiredKeys' in constraints) {\n    throw new Error(`requiredKeys and withDeletedKeys cannot be used together in fc.record`);\n  }\n\n  const requireDeletedKeys = 'requiredKeys' in constraints && constraints.requiredKeys !== undefined || 'withDeletedKeys' in constraints && !!constraints.withDeletedKeys;\n\n  if (!requireDeletedKeys) {\n    return buildPartialRecordArbitrary(recordModel, undefined);\n  }\n\n  const requiredKeys = ('requiredKeys' in constraints ? constraints.requiredKeys : undefined) || [];\n\n  for (let idx = 0; idx !== requiredKeys.length; ++idx) {\n    const descriptor = Object.getOwnPropertyDescriptor(recordModel, requiredKeys[idx]);\n\n    if (descriptor === undefined) {\n      throw new Error(`requiredKeys cannot reference keys that have not been defined in recordModel`);\n    }\n\n    if (!descriptor.enumerable) {\n      throw new Error(`requiredKeys cannot reference keys that have are enumerable in recordModel`);\n    }\n  }\n\n  return buildPartialRecordArbitrary(recordModel, requiredKeys);\n}\n\nexport { record };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/record.js"],"names":["buildPartialRecordArbitrary","record","recordModel","constraints","undefined","Error","requireDeletedKeys","requiredKeys","withDeletedKeys","idx","length","descriptor","Object","getOwnPropertyDescriptor","enumerable"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,wDAA5C;;AACA,SAASC,MAAT,CAAgBC,WAAhB,EAA6BC,WAA7B,EAA0C;AACtC,MAAIA,WAAW,IAAI,IAAnB,EAAyB;AACrB,WAAOH,2BAA2B,CAACE,WAAD,EAAcE,SAAd,CAAlC;AACH;;AACD,MAAI,qBAAqBD,WAArB,IAAoC,kBAAkBA,WAA1D,EAAuE;AACnE,UAAM,IAAIE,KAAJ,CAAW,uEAAX,CAAN;AACH;;AACD,QAAMC,kBAAkB,GAAI,kBAAkBH,WAAlB,IAAiCA,WAAW,CAACI,YAAZ,KAA6BH,SAA/D,IACtB,qBAAqBD,WAArB,IAAoC,CAAC,CAACA,WAAW,CAACK,eADvD;;AAEA,MAAI,CAACF,kBAAL,EAAyB;AACrB,WAAON,2BAA2B,CAACE,WAAD,EAAcE,SAAd,CAAlC;AACH;;AACD,QAAMG,YAAY,GAAG,CAAC,kBAAkBJ,WAAlB,GAAgCA,WAAW,CAACI,YAA5C,GAA2DH,SAA5D,KAA0E,EAA/F;;AACA,OAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKF,YAAY,CAACG,MAAvC,EAA+C,EAAED,GAAjD,EAAsD;AAClD,UAAME,UAAU,GAAGC,MAAM,CAACC,wBAAP,CAAgCX,WAAhC,EAA6CK,YAAY,CAACE,GAAD,CAAzD,CAAnB;;AACA,QAAIE,UAAU,KAAKP,SAAnB,EAA8B;AAC1B,YAAM,IAAIC,KAAJ,CAAW,8EAAX,CAAN;AACH;;AACD,QAAI,CAACM,UAAU,CAACG,UAAhB,EAA4B;AACxB,YAAM,IAAIT,KAAJ,CAAW,4EAAX,CAAN;AACH;AACJ;;AACD,SAAOL,2BAA2B,CAACE,WAAD,EAAcK,YAAd,CAAlC;AACH;;AACD,SAASN,MAAT","sourcesContent":["import { buildPartialRecordArbitrary } from './_internals/builders/PartialRecordArbitraryBuilder.js';\nfunction record(recordModel, constraints) {\n    if (constraints == null) {\n        return buildPartialRecordArbitrary(recordModel, undefined);\n    }\n    if ('withDeletedKeys' in constraints && 'requiredKeys' in constraints) {\n        throw new Error(`requiredKeys and withDeletedKeys cannot be used together in fc.record`);\n    }\n    const requireDeletedKeys = ('requiredKeys' in constraints && constraints.requiredKeys !== undefined) ||\n        ('withDeletedKeys' in constraints && !!constraints.withDeletedKeys);\n    if (!requireDeletedKeys) {\n        return buildPartialRecordArbitrary(recordModel, undefined);\n    }\n    const requiredKeys = ('requiredKeys' in constraints ? constraints.requiredKeys : undefined) || [];\n    for (let idx = 0; idx !== requiredKeys.length; ++idx) {\n        const descriptor = Object.getOwnPropertyDescriptor(recordModel, requiredKeys[idx]);\n        if (descriptor === undefined) {\n            throw new Error(`requiredKeys cannot reference keys that have not been defined in recordModel`);\n        }\n        if (!descriptor.enumerable) {\n            throw new Error(`requiredKeys cannot reference keys that have are enumerable in recordModel`);\n        }\n    }\n    return buildPartialRecordArbitrary(recordModel, requiredKeys);\n}\nexport { record };\n"]},"metadata":{},"sourceType":"module"}