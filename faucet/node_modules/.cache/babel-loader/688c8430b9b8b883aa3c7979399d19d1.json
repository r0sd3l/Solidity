{"ast":null,"code":"import { skipN } from 'pure-rand';\nimport { Random } from '../../random/generator/Random.js';\nimport { convertToRandomGenerator } from '../../random/generator/PureRandom.js';\nimport { NextValue } from '../arbitrary/definition/NextValue.js';\n\nfunction lazyGenerate(generator, rng, idx) {\n  return () => generator.generate(new Random(rng), idx);\n}\n\nexport function* toss(generator, seed, random, examples) {\n  yield* examples.map(e => () => new NextValue(e, undefined));\n  let idx = 0;\n  let rng = convertToRandomGenerator(random(seed));\n\n  for (;;) {\n    rng = rng.jump ? rng.jump() : skipN(rng, 42);\n    yield lazyGenerate(generator, rng, idx++);\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/runner/Tosser.js"],"names":["skipN","Random","convertToRandomGenerator","NextValue","lazyGenerate","generator","rng","idx","generate","toss","seed","random","examples","map","e","undefined","jump"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,SAASC,SAAT,QAA0B,sCAA1B;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,GAAjC,EAAsCC,GAAtC,EAA2C;AACvC,SAAO,MAAMF,SAAS,CAACG,QAAV,CAAmB,IAAIP,MAAJ,CAAWK,GAAX,CAAnB,EAAoCC,GAApC,CAAb;AACH;;AACD,OAAO,UAAUE,IAAV,CAAeJ,SAAf,EAA0BK,IAA1B,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAkD;AACrD,SAAOA,QAAQ,CAACC,GAAT,CAAcC,CAAD,IAAO,MAAM,IAAIX,SAAJ,CAAcW,CAAd,EAAiBC,SAAjB,CAA1B,CAAP;AACA,MAAIR,GAAG,GAAG,CAAV;AACA,MAAID,GAAG,GAAGJ,wBAAwB,CAACS,MAAM,CAACD,IAAD,CAAP,CAAlC;;AACA,WAAS;AACLJ,IAAAA,GAAG,GAAGA,GAAG,CAACU,IAAJ,GAAWV,GAAG,CAACU,IAAJ,EAAX,GAAwBhB,KAAK,CAACM,GAAD,EAAM,EAAN,CAAnC;AACA,UAAMF,YAAY,CAACC,SAAD,EAAYC,GAAZ,EAAiBC,GAAG,EAApB,CAAlB;AACH;AACJ","sourcesContent":["import { skipN } from 'pure-rand';\nimport { Random } from '../../random/generator/Random.js';\nimport { convertToRandomGenerator } from '../../random/generator/PureRandom.js';\nimport { NextValue } from '../arbitrary/definition/NextValue.js';\nfunction lazyGenerate(generator, rng, idx) {\n    return () => generator.generate(new Random(rng), idx);\n}\nexport function* toss(generator, seed, random, examples) {\n    yield* examples.map((e) => () => new NextValue(e, undefined));\n    let idx = 0;\n    let rng = convertToRandomGenerator(random(seed));\n    for (;;) {\n        rng = rng.jump ? rng.jump() : skipN(rng, 42);\n        yield lazyGenerate(generator, rng, idx++);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}