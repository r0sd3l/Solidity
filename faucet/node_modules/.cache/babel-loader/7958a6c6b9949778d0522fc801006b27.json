{"ast":null,"code":"import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\n\nfunction buildCompleteBigIntConstraints(constraints) {\n  const DefaultPow = 256;\n  const DefaultMin = BigInt(-1) << BigInt(DefaultPow - 1);\n  const DefaultMax = (BigInt(1) << BigInt(DefaultPow - 1)) - BigInt(1);\n  const min = constraints.min;\n  const max = constraints.max;\n  return {\n    min: min !== undefined ? min : DefaultMin - (max !== undefined && max < BigInt(0) ? max * max : BigInt(0)),\n    max: max !== undefined ? max : DefaultMax + (min !== undefined && min > BigInt(0) ? min * min : BigInt(0))\n  };\n}\n\nfunction extractBigIntConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const constraints = args[0];\n    return constraints;\n  }\n\n  return {\n    min: args[0],\n    max: args[1]\n  };\n}\n\nfunction bigInt() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = buildCompleteBigIntConstraints(extractBigIntConstraints(args));\n\n  if (constraints.min > constraints.max) {\n    throw new Error('fc.bigInt expects max to be greater than or equal to min');\n  }\n\n  const arb = new BigIntArbitrary(constraints.min, constraints.max);\n  return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n\nexport { bigInt };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/bigInt.js"],"names":["convertFromNextWithShrunkOnce","BigIntArbitrary","buildCompleteBigIntConstraints","constraints","DefaultPow","DefaultMin","BigInt","DefaultMax","min","max","undefined","extractBigIntConstraints","args","bigInt","Error","arb","defaultTarget"],"mappings":"AAAA,SAASA,6BAAT,QAA8C,6CAA9C;AACA,SAASC,eAAT,QAAgC,iCAAhC;;AACA,SAASC,8BAAT,CAAwCC,WAAxC,EAAqD;AACjD,QAAMC,UAAU,GAAG,GAAnB;AACA,QAAMC,UAAU,GAAGC,MAAM,CAAC,CAAC,CAAF,CAAN,IAAcA,MAAM,CAACF,UAAU,GAAG,CAAd,CAAvC;AACA,QAAMG,UAAU,GAAG,CAACD,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAACF,UAAU,GAAG,CAAd,CAApB,IAAwCE,MAAM,CAAC,CAAD,CAAjE;AACA,QAAME,GAAG,GAAGL,WAAW,CAACK,GAAxB;AACA,QAAMC,GAAG,GAAGN,WAAW,CAACM,GAAxB;AACA,SAAO;AACHD,IAAAA,GAAG,EAAEA,GAAG,KAAKE,SAAR,GAAoBF,GAApB,GAA0BH,UAAU,IAAII,GAAG,KAAKC,SAAR,IAAqBD,GAAG,GAAGH,MAAM,CAAC,CAAD,CAAjC,GAAuCG,GAAG,GAAGA,GAA7C,GAAmDH,MAAM,CAAC,CAAD,CAA7D,CADtC;AAEHG,IAAAA,GAAG,EAAEA,GAAG,KAAKC,SAAR,GAAoBD,GAApB,GAA0BF,UAAU,IAAIC,GAAG,KAAKE,SAAR,IAAqBF,GAAG,GAAGF,MAAM,CAAC,CAAD,CAAjC,GAAuCE,GAAG,GAAGA,GAA7C,GAAmDF,MAAM,CAAC,CAAD,CAA7D;AAFtC,GAAP;AAIH;;AACD,SAASK,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYF,SAAhB,EAA2B;AACvB,WAAO,EAAP;AACH;;AACD,MAAIE,IAAI,CAAC,CAAD,CAAJ,KAAYF,SAAhB,EAA2B;AACvB,UAAMP,WAAW,GAAGS,IAAI,CAAC,CAAD,CAAxB;AACA,WAAOT,WAAP;AACH;;AACD,SAAO;AAAEK,IAAAA,GAAG,EAAEI,IAAI,CAAC,CAAD,CAAX;AAAgBH,IAAAA,GAAG,EAAEG,IAAI,CAAC,CAAD;AAAzB,GAAP;AACH;;AACD,SAASC,MAAT,GAAyB;AAAA,oCAAND,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACrB,QAAMT,WAAW,GAAGD,8BAA8B,CAACS,wBAAwB,CAACC,IAAD,CAAzB,CAAlD;;AACA,MAAIT,WAAW,CAACK,GAAZ,GAAkBL,WAAW,CAACM,GAAlC,EAAuC;AACnC,UAAM,IAAIK,KAAJ,CAAU,0DAAV,CAAN;AACH;;AACD,QAAMC,GAAG,GAAG,IAAId,eAAJ,CAAoBE,WAAW,CAACK,GAAhC,EAAqCL,WAAW,CAACM,GAAjD,CAAZ;AACA,SAAOT,6BAA6B,CAACe,GAAD,EAAMA,GAAG,CAACC,aAAJ,EAAN,CAApC;AACH;;AACD,SAASH,MAAT","sourcesContent":["import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\nfunction buildCompleteBigIntConstraints(constraints) {\n    const DefaultPow = 256;\n    const DefaultMin = BigInt(-1) << BigInt(DefaultPow - 1);\n    const DefaultMax = (BigInt(1) << BigInt(DefaultPow - 1)) - BigInt(1);\n    const min = constraints.min;\n    const max = constraints.max;\n    return {\n        min: min !== undefined ? min : DefaultMin - (max !== undefined && max < BigInt(0) ? max * max : BigInt(0)),\n        max: max !== undefined ? max : DefaultMax + (min !== undefined && min > BigInt(0) ? min * min : BigInt(0)),\n    };\n}\nfunction extractBigIntConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const constraints = args[0];\n        return constraints;\n    }\n    return { min: args[0], max: args[1] };\n}\nfunction bigInt(...args) {\n    const constraints = buildCompleteBigIntConstraints(extractBigIntConstraints(args));\n    if (constraints.min > constraints.max) {\n        throw new Error('fc.bigInt expects max to be greater than or equal to min');\n    }\n    const arb = new BigIntArbitrary(constraints.min, constraints.max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\nexport { bigInt };\n"]},"metadata":{},"sourceType":"module"}