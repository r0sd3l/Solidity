{"ast":null,"code":"import { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n  return tuple(integer().noShrink(), integer(1, 0xffffffff).noShrink()).map(_ref => {\n    let [seed, hashEnvSize] = _ref;\n\n    const producer = () => {\n      const recorded = {};\n\n      const f = (a, b) => {\n        const reprA = stringify(a);\n        const reprB = stringify(b);\n        const hA = hash(`${seed}${reprA}`) % hashEnvSize;\n        const hB = hash(`${seed}${reprB}`) % hashEnvSize;\n        const val = cmp(hA, hB);\n        recorded[`[${reprA},${reprB}]`] = val;\n        return val;\n      };\n\n      return Object.assign(f, {\n        toString: () => {\n          const seenValues = Object.keys(recorded).sort().map(k => `${k} => ${stringify(recorded[k])}`).map(line => `/* ${escapeForMultilineComments(line)} */`);\n          return `function(a, b) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const cmp = ${cmp};\n  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};\n  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};\n  return cmp(hA, hB);\n}`;\n        },\n        [cloneMethod]: producer\n      });\n    };\n\n    return producer();\n  });\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CompareFunctionArbitraryBuilder.js"],"names":["escapeForMultilineComments","cloneMethod","hash","stringify","integer","tuple","buildCompareFunctionArbitrary","cmp","noShrink","map","seed","hashEnvSize","producer","recorded","f","a","b","reprA","reprB","hA","hB","val","Object","assign","toString","seenValues","keys","sort","k","line","length","join"],"mappings":"AAAA,SAASA,0BAAT,QAA2C,2BAA3C;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,SAASC,6BAAT,CAAuCC,GAAvC,EAA4C;AAC/C,SAAOF,KAAK,CAACD,OAAO,GAAGI,QAAV,EAAD,EAAuBJ,OAAO,CAAC,CAAD,EAAI,UAAJ,CAAP,CAAuBI,QAAvB,EAAvB,CAAL,CAA+DC,GAA/D,CAAmE,QAAyB;AAAA,QAAxB,CAACC,IAAD,EAAOC,WAAP,CAAwB;;AAC/F,UAAMC,QAAQ,GAAG,MAAM;AACnB,YAAMC,QAAQ,GAAG,EAAjB;;AACA,YAAMC,CAAC,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,cAAMC,KAAK,GAAGd,SAAS,CAACY,CAAD,CAAvB;AACA,cAAMG,KAAK,GAAGf,SAAS,CAACa,CAAD,CAAvB;AACA,cAAMG,EAAE,GAAGjB,IAAI,CAAE,GAAEQ,IAAK,GAAEO,KAAM,EAAjB,CAAJ,GAA0BN,WAArC;AACA,cAAMS,EAAE,GAAGlB,IAAI,CAAE,GAAEQ,IAAK,GAAEQ,KAAM,EAAjB,CAAJ,GAA0BP,WAArC;AACA,cAAMU,GAAG,GAAGd,GAAG,CAACY,EAAD,EAAKC,EAAL,CAAf;AACAP,QAAAA,QAAQ,CAAE,IAAGI,KAAM,IAAGC,KAAM,GAApB,CAAR,GAAkCG,GAAlC;AACA,eAAOA,GAAP;AACH,OARD;;AASA,aAAOC,MAAM,CAACC,MAAP,CAAcT,CAAd,EAAiB;AACpBU,QAAAA,QAAQ,EAAE,MAAM;AACZ,gBAAMC,UAAU,GAAGH,MAAM,CAACI,IAAP,CAAYb,QAAZ,EACdc,IADc,GAEdlB,GAFc,CAETmB,CAAD,IAAQ,GAAEA,CAAE,OAAMzB,SAAS,CAACU,QAAQ,CAACe,CAAD,CAAT,CAAc,EAF/B,EAGdnB,GAHc,CAGToB,IAAD,IAAW,MAAK7B,0BAA0B,CAAC6B,IAAD,CAAO,KAHvC,CAAnB;AAIA,iBAAQ;AAC5B,qDAAqDJ,UAAU,CAACK,MAAX,KAAsB,CAAtB,GAA2B,OAAML,UAAU,CAACM,IAAX,CAAgB,MAAhB,CAAwB,EAAzD,GAA6D,EAAG;AACrH,gBAAgBxB,GAAI;AACpB,qBAAqBG,IAAK,uBAAsBC,WAAY;AAC5D,qBAAqBD,IAAK,uBAAsBC,WAAY;AAC5D;AACA,EANoB;AAOH,SAbmB;AAcpB,SAACV,WAAD,GAAeW;AAdK,OAAjB,CAAP;AAgBH,KA3BD;;AA4BA,WAAOA,QAAQ,EAAf;AACH,GA9BM,CAAP;AA+BH","sourcesContent":["import { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n    return tuple(integer().noShrink(), integer(1, 0xffffffff).noShrink()).map(([seed, hashEnvSize]) => {\n        const producer = () => {\n            const recorded = {};\n            const f = (a, b) => {\n                const reprA = stringify(a);\n                const reprB = stringify(b);\n                const hA = hash(`${seed}${reprA}`) % hashEnvSize;\n                const hB = hash(`${seed}${reprB}`) % hashEnvSize;\n                const val = cmp(hA, hB);\n                recorded[`[${reprA},${reprB}]`] = val;\n                return val;\n            };\n            return Object.assign(f, {\n                toString: () => {\n                    const seenValues = Object.keys(recorded)\n                        .sort()\n                        .map((k) => `${k} => ${stringify(recorded[k])}`)\n                        .map((line) => `/* ${escapeForMultilineComments(line)} */`);\n                    return `function(a, b) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const cmp = ${cmp};\n  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};\n  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};\n  return cmp(hA, hB);\n}`;\n                },\n                [cloneMethod]: producer,\n            });\n        };\n        return producer();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}