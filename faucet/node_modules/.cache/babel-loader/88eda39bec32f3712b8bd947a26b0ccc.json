{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\n\nconst url = require('url');\n\nconst bignumber = require('bignumber.js').BigNumber;\n\nconst NoFilter = require('nofilter');\n\nconst Tagged = require('./tagged');\n\nconst Simple = require('./simple');\n\nconst utils = require('./utils');\n\nconst constants = require('./constants');\n\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SHIFT32 = constants.SHIFT32;\nconst SYMS = constants.SYMS;\nconst TAG = constants.TAG;\nconst HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;\nconst FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;\nconst DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;\nconst TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;\nconst FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;\nconst UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;\nconst NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;\nconst BREAK = Buffer.from([0xff]);\nconst BI = utils.bigIntize(constants.BI);\nconst BN = constants.BN;\nconst BUF_NAN = Buffer.from('f97e00', 'hex');\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex');\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex');\nconst BUF_NEG_ZERO = Buffer.from('f98000', 'hex');\nconst LOOP_DETECT = Symbol('CBOR_LOOP_DETECT');\n/**\n * Transform JavaScript values into CBOR bytes.  The `Writable` side of\n * the stream is in object mode.\n *\n * @extends {stream.Transform}\n */\n\nclass Encoder extends stream.Transform {\n  /**\n   * Creates an instance of Encoder.\n   *\n   * @param {Object} [options={}] - options for the encoder\n   * @param {any[]} [options.genTypes=[]] - array of pairs of `type`,\n   *   `function(Encoder)` for semantic types to be encoded.  Not needed\n   *   for Array, Date, Buffer, Map, RegExp, Set, Url, or bignumber.\n   * @param {boolean} [options.canonical=false] - should the output be\n   *   canonicalized\n   * @param {boolean|Symbol} [options.detectLoops=false] - should object loops\n   *   be detected?  This will currently modify the encoded object graph\n   *   by adding a Symbol property to each object.  If this bothers you,\n   *   call `removeLoopDetectors` on the encoded object when done.  Do not\n   *   encode the same object twice on the same encoder, without calling\n   *   `removeLoopDetectors` in between.\n   * @param {(\"number\"|\"float\"|\"int\"|\"string\")} [options.dateType=\"number\"] -\n   *   how should dates be encoded?  \"number\" means float or int, if no\n   *   fractional seconds.\n   * @param {any} [options.encodeUndefined=undefined] - How should an \n   *   \"undefined\" in the input be encoded.  By default, just encode a CBOR\n   *   undefined.  If this is a buffer, use those bytes without re-encoding\n   *   them.  If this is a function, the function will be called (which is\n   *   a good time to throw an exception, if that's what you want), and the\n   *   return value will be used according to these rules.  Anything\n   *   else will be encoded as CBOR.\n   * @param {boolean} [options.disallowUndefinedKeys=false] - Should \"undefined\"\n   *   be disallowed as a key in a Map that is serialized?  If this is true,\n   *   encode(new Map([[undefined, 1]])) will throw an exception.  Note that\n   *   it is impossible to get a key of undefined in a normal JS object.\n   * @param {boolean} [options.collapseBigIntegers=false] - Should integers\n   *   that come in as BigNumber integers and ECMAscript bigint's be encoded\n   *   as normal CBOR integers if they fit, discarding type information?\n   */\n  constructor(options) {\n    const opts = Object.assign({}, options, {\n      readableObjectMode: false,\n      writableObjectMode: true\n    });\n    super(opts);\n    this.canonical = opts.canonical;\n    this.encodeUndefined = opts.encodeUndefined;\n    this.disallowUndefinedKeys = !!opts.disallowUndefinedKeys;\n    this.dateType = opts.dateType != null ? opts.dateType.toLowerCase() : 'number';\n    this.collapseBigIntegers = !!opts.collapseBigIntegers; // new Symbol for each instance.  Note: means we can't re-use the same\n    // encoder and encoded object\n\n    if (typeof opts.detectLoops === 'symbol') {\n      this.detectLoops = opts.detectLoops;\n    } else {\n      this.detectLoops = !!opts.detectLoops ? Symbol('CBOR_DETECT') : null;\n    }\n\n    this.semanticTypes = {\n      Array: this._pushArray,\n      Date: this._pushDate,\n      Buffer: this._pushBuffer,\n      Map: this._pushMap,\n      NoFilter: this._pushNoFilter,\n      RegExp: this._pushRegexp,\n      Set: this._pushSet,\n      BigNumber: this._pushBigNumber,\n      ArrayBuffer: this._pushUint8Array,\n      Uint8ClampedArray: this._pushUint8Array,\n      Uint8Array: this._pushUint8Array,\n      Uint16Array: this._pushArray,\n      Uint32Array: this._pushArray,\n      Int8Array: this._pushArray,\n      Int16Array: this._pushArray,\n      Int32Array: this._pushArray,\n      Float32Array: this._pushFloat32Array,\n      Float64Array: this._pushFloat64Array\n    }; // tsc doesn't know about old Url\n\n    if (url['Url']) {\n      this.addSemanticType('Url', this._pushUrl);\n    }\n\n    if (url['URL']) {\n      this.addSemanticType('URL', this._pushURL);\n    }\n\n    const addTypes = opts.genTypes || [];\n\n    for (let i = 0, len = addTypes.length; i < len; i += 2) {\n      this.addSemanticType(addTypes[i], addTypes[i + 1]);\n    }\n  }\n\n  _transform(fresh, encoding, cb) {\n    const ret = this.pushAny(fresh); // Old transformers might not return bool.  undefined !== false\n\n    return cb(ret === false ? new Error('Push Error') : undefined);\n  }\n\n  _flush(cb) {\n    return cb();\n  }\n  /**\n   * @callback encodeFunction\n   * @param {Encoder} encoder - the encoder to serialize into.  Call \"write\"\n   *   on the encoder as needed.\n   * @return {bool} - true on success, else false\n   */\n\n  /**\n   * Add an encoding function to the list of supported semantic types.  This is\n   * useful for objects for which you can't add an encodeCBOR method\n   *\n   * @param {any} type\n   * @param {any} fun\n   * @returns {encodeFunction}\n   */\n\n\n  addSemanticType(type, fun) {\n    if (typeof fun !== 'function') {\n      throw new TypeError('fun must be of type function');\n    }\n\n    const typeName = typeof type === 'string' ? type : type.name;\n    const old = this.semanticTypes[typeName];\n    this.semanticTypes[typeName] = fun;\n    return old;\n  }\n\n  _pushUInt8(val) {\n    const b = Buffer.allocUnsafe(1);\n    b.writeUInt8(val, 0);\n    return this.push(b);\n  }\n\n  _pushUInt16BE(val) {\n    const b = Buffer.allocUnsafe(2);\n    b.writeUInt16BE(val, 0);\n    return this.push(b);\n  }\n\n  _pushUInt32BE(val) {\n    const b = Buffer.allocUnsafe(4);\n    b.writeUInt32BE(val, 0);\n    return this.push(b);\n  }\n\n  _pushFloatBE(val) {\n    const b = Buffer.allocUnsafe(4);\n    b.writeFloatBE(val, 0);\n    return this.push(b);\n  }\n\n  _pushDoubleBE(val) {\n    const b = Buffer.allocUnsafe(8);\n    b.writeDoubleBE(val, 0);\n    return this.push(b);\n  }\n\n  _pushNaN() {\n    return this.push(BUF_NAN);\n  }\n\n  _pushInfinity(obj) {\n    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;\n    return this.push(half);\n  }\n\n  _pushFloat(obj) {\n    if (this.canonical) {\n      // TODO: is this enough slower to hide behind canonical?\n      // It's certainly enough of a hack (see utils.parseHalf)\n      // From section 3.9:\n      // If a protocol allows for IEEE floats, then additional canonicalization\n      // rules might need to be added.  One example rule might be to have all\n      // floats start as a 64-bit float, then do a test conversion to a 32-bit\n      // float; if the result is the same numeric value, use the shorter value\n      // and repeat the process with a test conversion to a 16-bit float.  (This\n      // rule selects 16-bit float for positive and negative Infinity as well.)\n      // which seems pretty much backwards to me.\n      const b2 = Buffer.allocUnsafe(2);\n\n      if (utils.writeHalf(b2, obj)) {\n        // I have convinced myself that there are no cases where writeHalf\n        // will return true but `utils.parseHalf(b2) !== obj)`\n        return this._pushUInt8(HALF) && this.push(b2);\n      }\n    }\n\n    if (Math.fround(obj) === obj) {\n      return this._pushUInt8(FLOAT) && this._pushFloatBE(obj);\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);\n  }\n\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5;\n\n    switch (false) {\n      case !(obj < 24):\n        return this._pushUInt8(m | obj);\n\n      case !(obj <= 0xff):\n        return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);\n\n      case !(obj <= 0xffff):\n        return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);\n\n      case !(obj <= 0xffffffff):\n        return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);\n\n      case !(obj <= Number.MAX_SAFE_INTEGER):\n        return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);\n\n      default:\n        if (mt === MT.NEG_INT) {\n          return this._pushFloat(orig);\n        } else {\n          return this._pushFloat(obj);\n        }\n\n    }\n  }\n\n  _pushIntNum(obj) {\n    if (Object.is(obj, -0)) {\n      return this.push(BUF_NEG_ZERO);\n    }\n\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj);\n    } else {\n      return this._pushInt(obj, MT.POS_INT);\n    }\n  }\n\n  _pushNumber(obj) {\n    switch (false) {\n      case !isNaN(obj):\n        return this._pushNaN();\n\n      case isFinite(obj):\n        return this._pushInfinity(obj);\n\n      case Math.round(obj) !== obj:\n        return this._pushIntNum(obj);\n\n      default:\n        return this._pushFloat(obj);\n    }\n  }\n\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8');\n    return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8');\n  }\n\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE);\n  }\n\n  _pushUndefined(obj) {\n    switch (typeof this.encodeUndefined) {\n      case 'undefined':\n        return this._pushUInt8(UNDEFINED);\n\n      case 'function':\n        return this.pushAny(this.encodeUndefined.call(this, obj));\n\n      case 'object':\n        if (Buffer.isBuffer(this.encodeUndefined)) {\n          return this.push(this.encodeUndefined);\n        }\n\n    }\n\n    return this.pushAny(this.encodeUndefined);\n  }\n\n  _pushNull(obj) {\n    return this._pushUInt8(NULL);\n  }\n\n  _pushArray(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts);\n    const len = obj.length;\n\n    if (opts.indefinite) {\n      if (!gen._pushUInt8(MT.ARRAY << 5 | NUMBYTES.INDEFINITE)) {\n        return false;\n      }\n    } else if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false;\n      }\n    }\n\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG);\n  }\n\n  _pushDate(gen, obj) {\n    switch (gen.dateType) {\n      case 'string':\n        return gen._pushTag(TAG.DATE_STRING) && gen._pushString(obj.toISOString());\n\n      case 'int':\n      case 'integer':\n        return gen._pushTag(TAG.DATE_EPOCH) && gen._pushIntNum(Math.round(obj / 1000));\n\n      case 'float':\n        // force float\n        return gen._pushTag(TAG.DATE_EPOCH) && gen._pushFloat(obj / 1000);\n\n      case 'number':\n      default:\n        // if we happen to have an integral number of seconds,\n        // use integer.  Otherwise, use float.\n        return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(obj / 1000);\n    }\n  }\n\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);\n  }\n\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice());\n  }\n\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);\n  }\n\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false;\n    }\n\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());\n  }\n\n  _pushURL(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.toString());\n  }\n  /**\n   * @param {bignumber} obj\n   * @private\n   */\n\n\n  _pushBigint(obj) {\n    let m = MT.POS_INT;\n    let tag = TAG.POS_BIGINT;\n\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1);\n      m = MT.NEG_INT;\n      tag = TAG.NEG_BIGINT;\n    }\n\n    if (this.collapseBigIntegers && obj.lte(BN.MAXINT64)) {\n      //  special handiling for 64bits\n      if (obj.lte(BN.MAXINT32)) {\n        return this._pushInt(obj.toNumber(), m);\n      }\n\n      return this._pushUInt8(m << 5 | NUMBYTES.EIGHT) && this._pushUInt32BE(obj.dividedToIntegerBy(BN.SHIFT32).toNumber()) && this._pushUInt32BE(obj.mod(BN.SHIFT32).toNumber());\n    }\n\n    let str = obj.toString(16);\n\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n  /**\n   * @param {bigint} obj\n   * @private\n   */\n\n\n  _pushJSBigint(obj) {\n    let m = MT.POS_INT;\n    let tag = TAG.POS_BIGINT; // BigInt doesn't have -0\n\n    if (obj < 0) {\n      obj = -obj + BI.MINUS_ONE;\n      m = MT.NEG_INT;\n      tag = TAG.NEG_BIGINT;\n    }\n\n    if (this.collapseBigIntegers && obj <= BI.MAXINT64) {\n      //  special handiling for 64bits\n      if (obj <= 0xffffffff) {\n        return this._pushInt(Number(obj), m);\n      }\n\n      return this._pushUInt8(m << 5 | NUMBYTES.EIGHT) && this._pushUInt32BE(Number(obj / BI.SHIFT32)) && this._pushUInt32BE(Number(obj % BI.SHIFT32));\n    }\n\n    let str = obj.toString(16);\n\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN();\n    }\n\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);\n    }\n\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj);\n    }\n\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {\n      return false;\n    }\n\n    const dec = obj.decimalPlaces();\n    const slide = obj.shiftedBy(dec);\n\n    if (!gen._pushIntNum(-dec)) {\n      return false;\n    }\n\n    if (slide.abs().isLessThan(BN.MAXINT)) {\n      return gen._pushIntNum(slide.toNumber());\n    } else {\n      return gen._pushBigint(slide);\n    }\n  }\n\n  _pushMap(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts);\n\n    if (opts.indefinite) {\n      if (!gen._pushUInt8(MT.MAP << 5 | NUMBYTES.INDEFINITE)) {\n        return false;\n      }\n    } else if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false;\n    } // memoizing the cbor only helps in certain cases, and hurts in most\n    // others.  Just avoid it.\n\n\n    if (gen.canonical) {\n      // keep the key/value pairs together, so we don't have to do odd\n      // gets with object keys later\n      const entries = [...obj.entries()];\n      const enc = new Encoder(this); // TODO: fix genTypes\n\n      const bs = new NoFilter({\n        highWaterMark: this.readableHighWaterMark\n      });\n      enc.pipe(bs);\n      entries.sort((_ref, _ref2) => {\n        let [a] = _ref;\n        let [b] = _ref2;\n        // a, b are the keys\n        enc.pushAny(a);\n        const a_cbor = bs.read();\n        enc.pushAny(b);\n        const b_cbor = bs.read();\n        return a_cbor.compare(b_cbor);\n      });\n\n      for (const [k, v] of entries) {\n        if (gen.disallowUndefinedKeys && typeof k === 'undefined') {\n          throw new Error('Invalid Map key: undefined');\n        }\n\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false;\n        }\n      }\n    } else {\n      for (const [k, v] of obj) {\n        if (gen.disallowUndefinedKeys && typeof k === 'undefined') {\n          throw new Error('Invalid Map key: undefined');\n        }\n\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false;\n        }\n      }\n    }\n\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _pushUint8Array(gen, obj) {\n    return gen._pushBuffer(gen, Buffer.from(obj));\n  }\n\n  _pushFloat32Array(gen, obj) {\n    const len = obj.length;\n\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(FLOAT) || !gen._pushFloatBE(obj[j])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _pushFloat64Array(gen, obj) {\n    const len = obj.length;\n\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(DOUBLE) || !gen._pushDoubleBE(obj[j])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Remove all of the loop detector additions to the given object.\n   *\n   * @param {Object} obj - object to clean\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n\n\n  removeLoopDetectors(obj) {\n    if (!this.detectLoops) {\n      return false;\n    }\n\n    return Encoder.removeLoopDetectors(obj, this.detectLoops);\n  }\n  /**\n   * Remove all of the loop detector additions to the given object.\n   * The static version is easier to call when you don't have a full\n   * encoder instance available; it uses a good heuristic to figure\n   * out the loop detector symbol.\n   *\n   * @param {Object} obj - object to clean\n   * @param {Symbol} [detector=null] - the symbol to clean, or null\n   *   to use the first detected symbol\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n\n\n  static removeLoopDetectors(obj) {\n    let detector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (typeof obj !== 'object' || !obj) {\n      return false;\n    }\n\n    const dl = obj[LOOP_DETECT];\n\n    if (!dl) {\n      // ironically, use loop marking to detect loops on removal as well\n      return false;\n    }\n\n    if (detector == null) {\n      detector = dl;\n    } else {\n      if (detector !== dl) {\n        return false;\n      }\n    }\n\n    delete obj[LOOP_DETECT];\n\n    if (Array.isArray(obj)) {\n      for (const i of obj) {\n        this.removeLoopDetectors(i, detector);\n      }\n    } else {\n      for (const k in obj) {\n        this.removeLoopDetectors(obj[k], detector);\n      }\n    }\n\n    return true;\n  }\n\n  _pushObject(obj, opts) {\n    if (!obj) {\n      return this._pushNull(obj);\n    }\n\n    opts = Object.assign({\n      indefinite: false,\n      skipTypes: false\n    }, opts);\n\n    if (!opts.indefinite) {\n      // this will only happen the first time through for indefinite encoding\n      if (this.detectLoops) {\n        if (obj[LOOP_DETECT] === this.detectLoops) {\n          throw new Error('Loop detected while CBOR encoding');\n        } else {\n          obj[LOOP_DETECT] = this.detectLoops;\n        }\n      }\n    }\n\n    if (!opts.skipTypes) {\n      const f = obj.encodeCBOR;\n\n      if (typeof f === 'function') {\n        return f.call(obj, this);\n      }\n\n      const converter = this.semanticTypes[obj.constructor.name];\n\n      if (converter) {\n        return converter.call(obj, this, obj);\n      }\n    }\n\n    const keys = Object.keys(obj).filter(k => typeof obj[k] !== 'function');\n    const cbor_keys = {};\n\n    if (this.canonical) {\n      // note: this can't be a normal sort, because 'b' needs to sort before\n      // 'aa'\n      keys.sort((a, b) => {\n        // Always strings, so don't bother to pass options.\n        // hold on to the cbor versions, since there's no need\n        // to encode more than once\n        const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a));\n        const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b));\n        return a_cbor.compare(b_cbor);\n      });\n    }\n\n    if (opts.indefinite) {\n      if (!this._pushUInt8(MT.MAP << 5 | NUMBYTES.INDEFINITE)) {\n        return false;\n      }\n    } else if (!this._pushInt(keys.length, MT.MAP)) {\n      return false;\n    }\n\n    let ck;\n\n    for (let j = 0, len2 = keys.length; j < len2; j++) {\n      const k = keys[j];\n\n      if (this.canonical && (ck = cbor_keys[k])) {\n        if (!this.push(ck)) {\n          // already a Buffer\n          return false;\n        }\n      } else {\n        if (!this._pushString(k)) {\n          return false;\n        }\n      }\n\n      if (!this.pushAny(obj[k])) {\n        return false;\n      }\n    }\n\n    if (opts.indefinite) {\n      if (!this.push(BREAK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n\n\n  pushAny(obj) {\n    switch (typeof obj) {\n      case 'number':\n        return this._pushNumber(obj);\n\n      case 'bigint':\n        return this._pushJSBigint(obj);\n\n      case 'string':\n        return this._pushString(obj);\n\n      case 'boolean':\n        return this._pushBoolean(obj);\n\n      case 'undefined':\n        return this._pushUndefined(obj);\n\n      case 'object':\n        return this._pushObject(obj);\n\n      case 'symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushNull(null);\n\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(void 0);\n          // TODO: Add pluggable support for other symbols\n\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString());\n        }\n\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (!!obj.toString ? obj.toString() : ''));\n    }\n  }\n  /* backwards-compat wrapper */\n\n\n  _pushAny(obj) {\n    // TODO: write deprecation warning\n    return this.pushAny(obj);\n  }\n\n  _encodeAll(objs) {\n    const bs = new NoFilter({\n      highWaterMark: this.readableHighWaterMark\n    });\n    this.pipe(bs);\n\n    for (const o of objs) {\n      this.pushAny(o);\n    }\n\n    this.end();\n    return bs.read();\n  }\n  /**\n   * Encode the given object with indefinite length.  There are apparently\n   * some (IMO) broken implementations of poorly-specified protocols that\n   * REQUIRE indefinite-encoding.  Add this to an object or class as the\n   * `encodeCBOR` function to get indefinite encoding:\n   * @example\n   * const o = {\n   *   a: true,\n   *   encodeCBOR: cbor.Encoder.encodeIndefinite\n   * }\n   * const m = []\n   * m.encodeCBOR = cbor.Encoder.encodeIndefinite\n   * cbor.encodeOne([o, m])\n   *\n   * @param {Encoder} - the encoder to use\n   * @param {String|Buffer|Array|Map|Object} [obj] - the object to encode.  If\n   *   null, use \"this\" instead.\n   * @param {Object} [opts=null] - Options for encoding\n   * @param {boolean} [opts.chunkSize=4096] - Number of characters or bytes\n   *  for each chunk, if obj is a string or Buffer\n   * @returns {boolean} - true on success\n   */\n\n\n  static encodeIndefinite(gen, obj, opts) {\n    if (obj == null) {\n      if (this == null) {\n        throw new Error('No object to encode');\n      }\n\n      obj = this;\n    }\n\n    opts = Object.assign({\n      chunkSize: 4096\n    }, opts);\n    let ret = true;\n    const objType = typeof obj;\n\n    if (objType === 'string') {\n      // TODO: make sure not to split surrogate pairs at the edges of chunks,\n      // since such half-surrogates cannot be legally encoded as UTF-8.\n      ret = ret && gen._pushUInt8(MT.UTF8_STRING << 5 | NUMBYTES.INDEFINITE);\n      let offset = 0;\n\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize;\n        ret = ret && gen._pushString(obj.slice(offset, endIndex));\n        offset = endIndex;\n      }\n\n      ret = ret && gen.push(BREAK);\n    } else if (Buffer.isBuffer(obj)) {\n      ret = ret && gen._pushUInt8(MT.BYTE_STRING << 5 | NUMBYTES.INDEFINITE);\n      let offset = 0;\n\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize;\n        ret = ret && gen._pushBuffer(gen, obj.slice(offset, endIndex));\n        offset = endIndex;\n      }\n\n      ret = ret && gen.push(BREAK);\n    } else if (Array.isArray(obj)) {\n      ret = ret && gen._pushArray(gen, obj, {\n        indefinite: true\n      });\n    } else if (obj instanceof Map) {\n      ret = ret && gen._pushMap(gen, obj, {\n        indefinite: true\n      });\n    } else {\n      if (objType !== 'object') {\n        throw new Error('Invalid indefinite encoding');\n      }\n\n      ret = ret && gen._pushObject(obj, {\n        indefinite: true,\n        skipTypes: true\n      });\n    }\n\n    return ret;\n  }\n  /**\n   * Encode one or more JavaScript objects, and return a Buffer containing the\n   * CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n\n\n  static encode() {\n    for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n      objs[_key] = arguments[_key];\n    }\n\n    return new Encoder()._encodeAll(objs);\n  }\n  /**\n   * Encode one or more JavaScript objects canonically (slower!), and return\n   * a Buffer containing the CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n\n\n  static encodeCanonical() {\n    for (var _len2 = arguments.length, objs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      objs[_key2] = arguments[_key2];\n    }\n\n    return new Encoder({\n      canonical: true\n    })._encodeAll(objs);\n  }\n  /**\n   * Encode one JavaScript object using the given options.\n   *\n   * @static\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   * @returns {Buffer} - the encoded objects\n   */\n\n\n  static encodeOne(obj, options) {\n    return new Encoder(options)._encodeAll([obj]);\n  }\n  /**\n   * Encode one JavaScript object using the given options in a way that\n   * is more resilient to objects being larger than the highWaterMark\n   * number of bytes.  As with the other static encode functions, this \n   * will still use a large amount of memory.  Use a stream-based approach\n   * directly if you need to process large and complicated inputs.\n   *\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   */\n\n\n  static encodeAsync(obj, options) {\n    return new Promise((resolve, reject) => {\n      const bufs = [];\n      const enc = new Encoder(options);\n      enc.on('data', buf => bufs.push(buf));\n      enc.on('error', reject);\n      enc.on('finish', () => resolve(Buffer.concat(bufs)));\n      enc.pushAny(obj);\n      enc.end();\n    });\n  }\n\n}\n\nmodule.exports = Encoder;","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/cbor/lib/encoder.js"],"names":["stream","require","url","bignumber","BigNumber","NoFilter","Tagged","Simple","utils","constants","MT","NUMBYTES","SHIFT32","SYMS","TAG","HALF","SIMPLE_FLOAT","TWO","FLOAT","FOUR","DOUBLE","EIGHT","TRUE","SIMPLE","FALSE","UNDEFINED","NULL","BREAK","Buffer","from","BI","bigIntize","BN","BUF_NAN","BUF_INF_NEG","BUF_INF_POS","BUF_NEG_ZERO","LOOP_DETECT","Symbol","Encoder","Transform","constructor","options","opts","Object","assign","readableObjectMode","writableObjectMode","canonical","encodeUndefined","disallowUndefinedKeys","dateType","toLowerCase","collapseBigIntegers","detectLoops","semanticTypes","Array","_pushArray","Date","_pushDate","_pushBuffer","Map","_pushMap","_pushNoFilter","RegExp","_pushRegexp","Set","_pushSet","_pushBigNumber","ArrayBuffer","_pushUint8Array","Uint8ClampedArray","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","_pushFloat32Array","Float64Array","_pushFloat64Array","addSemanticType","_pushUrl","_pushURL","addTypes","genTypes","i","len","length","_transform","fresh","encoding","cb","ret","pushAny","Error","undefined","_flush","type","fun","TypeError","typeName","name","old","_pushUInt8","val","b","allocUnsafe","writeUInt8","push","_pushUInt16BE","writeUInt16BE","_pushUInt32BE","writeUInt32BE","_pushFloatBE","writeFloatBE","_pushDoubleBE","writeDoubleBE","_pushNaN","_pushInfinity","obj","half","_pushFloat","b2","writeHalf","Math","fround","_pushInt","mt","orig","m","ONE","Number","MAX_SAFE_INTEGER","floor","NEG_INT","_pushIntNum","is","POS_INT","_pushNumber","isNaN","isFinite","round","_pushString","byteLength","UTF8_STRING","_pushBoolean","_pushUndefined","call","isBuffer","_pushNull","gen","indefinite","ARRAY","INDEFINITE","j","_pushTag","tag","DATE_STRING","toISOString","DATE_EPOCH","BYTE_STRING","slice","REGEXP","source","size","x","URI","format","toString","_pushBigint","POS_BIGINT","isNegative","negated","minus","NEG_BIGINT","lte","MAXINT64","MAXINT32","toNumber","dividedToIntegerBy","mod","str","buf","_pushJSBigint","MINUS_ONE","Infinity","isInteger","DECIMAL_FRAC","dec","decimalPlaces","slide","shiftedBy","abs","isLessThan","MAXINT","MAP","entries","enc","bs","highWaterMark","readableHighWaterMark","pipe","sort","a","a_cbor","read","b_cbor","compare","k","v","removeLoopDetectors","detector","dl","isArray","_pushObject","skipTypes","f","encodeCBOR","converter","keys","filter","cbor_keys","encode","ck","len2","_pushAny","_encodeAll","objs","o","end","encodeIndefinite","chunkSize","objType","offset","endIndex","encodeCanonical","encodeOne","encodeAsync","Promise","resolve","reject","bufs","on","concat","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst url = require('url')\nconst bignumber = require('bignumber.js').BigNumber\nconst NoFilter = require('nofilter')\nconst Tagged = require('./tagged')\nconst Simple = require('./simple')\nconst utils = require('./utils')\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\nconst BREAK = Buffer.from([0xff])\n\nconst BI = utils.bigIntize(constants.BI)\nconst BN = constants.BN\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\nconst BUF_NEG_ZERO = Buffer.from('f98000', 'hex')\nconst LOOP_DETECT = Symbol('CBOR_LOOP_DETECT')\n\n/**\n * Transform JavaScript values into CBOR bytes.  The `Writable` side of\n * the stream is in object mode.\n *\n * @extends {stream.Transform}\n */\nclass Encoder extends stream.Transform {\n\n  /**\n   * Creates an instance of Encoder.\n   *\n   * @param {Object} [options={}] - options for the encoder\n   * @param {any[]} [options.genTypes=[]] - array of pairs of `type`,\n   *   `function(Encoder)` for semantic types to be encoded.  Not needed\n   *   for Array, Date, Buffer, Map, RegExp, Set, Url, or bignumber.\n   * @param {boolean} [options.canonical=false] - should the output be\n   *   canonicalized\n   * @param {boolean|Symbol} [options.detectLoops=false] - should object loops\n   *   be detected?  This will currently modify the encoded object graph\n   *   by adding a Symbol property to each object.  If this bothers you,\n   *   call `removeLoopDetectors` on the encoded object when done.  Do not\n   *   encode the same object twice on the same encoder, without calling\n   *   `removeLoopDetectors` in between.\n   * @param {(\"number\"|\"float\"|\"int\"|\"string\")} [options.dateType=\"number\"] -\n   *   how should dates be encoded?  \"number\" means float or int, if no\n   *   fractional seconds.\n   * @param {any} [options.encodeUndefined=undefined] - How should an \n   *   \"undefined\" in the input be encoded.  By default, just encode a CBOR\n   *   undefined.  If this is a buffer, use those bytes without re-encoding\n   *   them.  If this is a function, the function will be called (which is\n   *   a good time to throw an exception, if that's what you want), and the\n   *   return value will be used according to these rules.  Anything\n   *   else will be encoded as CBOR.\n   * @param {boolean} [options.disallowUndefinedKeys=false] - Should \"undefined\"\n   *   be disallowed as a key in a Map that is serialized?  If this is true,\n   *   encode(new Map([[undefined, 1]])) will throw an exception.  Note that\n   *   it is impossible to get a key of undefined in a normal JS object.\n   * @param {boolean} [options.collapseBigIntegers=false] - Should integers\n   *   that come in as BigNumber integers and ECMAscript bigint's be encoded\n   *   as normal CBOR integers if they fit, discarding type information?\n   */\n  constructor(options) {\n    const opts = Object.assign({}, options, {\n      readableObjectMode: false,\n      writableObjectMode: true\n    })\n    super(opts)\n\n    this.canonical = opts.canonical\n    this.encodeUndefined = opts.encodeUndefined\n    this.disallowUndefinedKeys = !!opts.disallowUndefinedKeys\n    this.dateType = (opts.dateType != null) ?\n      opts.dateType.toLowerCase() : 'number'\n    this.collapseBigIntegers = !!opts.collapseBigIntegers\n\n    // new Symbol for each instance.  Note: means we can't re-use the same\n    // encoder and encoded object\n    if (typeof(opts.detectLoops) === 'symbol') {\n      this.detectLoops = opts.detectLoops\n    } else {\n      this.detectLoops = !!opts.detectLoops ? Symbol('CBOR_DETECT') : null\n    }\n\n    this.semanticTypes = {\n      Array: this._pushArray,\n      Date: this._pushDate,\n      Buffer: this._pushBuffer,\n      Map: this._pushMap,\n      NoFilter: this._pushNoFilter,\n      RegExp: this._pushRegexp,\n      Set: this._pushSet,\n      BigNumber: this._pushBigNumber,\n      ArrayBuffer: this._pushUint8Array,\n      Uint8ClampedArray: this._pushUint8Array,\n      Uint8Array: this._pushUint8Array,\n      Uint16Array: this._pushArray,\n      Uint32Array: this._pushArray,\n      Int8Array: this._pushArray,\n      Int16Array: this._pushArray,\n      Int32Array: this._pushArray,\n      Float32Array: this._pushFloat32Array,\n      Float64Array: this._pushFloat64Array\n    }\n\n    // tsc doesn't know about old Url\n    if (url['Url']) {\n      this.addSemanticType('Url', this._pushUrl)\n    }\n    if (url['URL']) {\n      this.addSemanticType('URL', this._pushURL)\n    }\n\n    const addTypes = opts.genTypes || []\n    for (let i = 0, len = addTypes.length; i < len; i += 2) {\n      this.addSemanticType(addTypes[i], addTypes[i + 1])\n    }\n  }\n\n  _transform(fresh, encoding, cb) {\n    const ret = this.pushAny(fresh)\n    // Old transformers might not return bool.  undefined !== false\n    return cb((ret === false) ? new Error('Push Error') : undefined)\n  }\n\n  _flush(cb) {\n    return cb()\n  }\n\n  /**\n   * @callback encodeFunction\n   * @param {Encoder} encoder - the encoder to serialize into.  Call \"write\"\n   *   on the encoder as needed.\n   * @return {bool} - true on success, else false\n   */\n\n  /**\n   * Add an encoding function to the list of supported semantic types.  This is\n   * useful for objects for which you can't add an encodeCBOR method\n   *\n   * @param {any} type\n   * @param {any} fun\n   * @returns {encodeFunction}\n   */\n  addSemanticType(type, fun) {\n    if (typeof fun !== 'function') {\n      throw new TypeError('fun must be of type function')\n    }\n    const typeName = (typeof type === 'string') ? type : type.name\n    const old = this.semanticTypes[typeName]\n    this.semanticTypes[typeName] = fun\n    return old\n  }\n\n  _pushUInt8(val) {\n    const b = Buffer.allocUnsafe(1)\n    b.writeUInt8(val, 0)\n    return this.push(b)\n  }\n\n  _pushUInt16BE(val) {\n    const b = Buffer.allocUnsafe(2)\n    b.writeUInt16BE(val, 0)\n    return this.push(b)\n  }\n\n  _pushUInt32BE(val) {\n    const b = Buffer.allocUnsafe(4)\n    b.writeUInt32BE(val, 0)\n    return this.push(b)\n  }\n\n  _pushFloatBE(val) {\n    const b = Buffer.allocUnsafe(4)\n    b.writeFloatBE(val, 0)\n    return this.push(b)\n  }\n\n  _pushDoubleBE(val) {\n    const b = Buffer.allocUnsafe(8)\n    b.writeDoubleBE(val, 0)\n    return this.push(b)\n  }\n\n  _pushNaN() {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity(obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat(obj) {\n    if (this.canonical) {\n      // TODO: is this enough slower to hide behind canonical?\n      // It's certainly enough of a hack (see utils.parseHalf)\n\n      // From section 3.9:\n      // If a protocol allows for IEEE floats, then additional canonicalization\n      // rules might need to be added.  One example rule might be to have all\n      // floats start as a 64-bit float, then do a test conversion to a 32-bit\n      // float; if the result is the same numeric value, use the shorter value\n      // and repeat the process with a test conversion to a 16-bit float.  (This\n      // rule selects 16-bit float for positive and negative Infinity as well.)\n\n      // which seems pretty much backwards to me.\n      const b2 = Buffer.allocUnsafe(2)\n      if (utils.writeHalf(b2, obj)) {\n        // I have convinced myself that there are no cases where writeHalf\n        // will return true but `utils.parseHalf(b2) !== obj)`\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n    if (Math.fround(obj) === obj) {\n      return this._pushUInt8(FLOAT) && this._pushFloatBE(obj)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5\n    switch (false) {\n      case !(obj < 24):\n        return this._pushUInt8(m | obj)\n      case !(obj <= 0xff):\n        return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n      case !(obj <= 0xffff):\n        return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n      case !(obj <= 0xffffffff):\n        return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n      case !(obj <= Number.MAX_SAFE_INTEGER):\n        return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n          this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n          this._pushUInt32BE(obj % SHIFT32)\n      default:\n        if (mt === MT.NEG_INT) {\n          return this._pushFloat(orig)\n        } else {\n          return this._pushFloat(obj)\n        }\n    }\n  }\n\n  _pushIntNum(obj) {\n    if (Object.is(obj, -0)) {\n      return this.push(BUF_NEG_ZERO)\n    }\n\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber(obj) {\n    switch (false) {\n      case !isNaN(obj):\n        return this._pushNaN()\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case Math.round(obj) !== obj:\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8')\n  }\n\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined(obj) {\n    switch (typeof this.encodeUndefined) {\n      case 'undefined':\n        return this._pushUInt8(UNDEFINED)\n      case 'function':\n        return this.pushAny(this.encodeUndefined.call(this, obj))\n      case 'object':\n        if (Buffer.isBuffer(this.encodeUndefined)) {\n          return this.push(this.encodeUndefined)\n        }\n    }\n    return this.pushAny(this.encodeUndefined)\n  }\n\n  _pushNull(obj) {\n    return this._pushUInt8(NULL)\n  }\n\n  _pushArray(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts)\n    const len = obj.length\n    if (opts.indefinite) {\n      if (!gen._pushUInt8((MT.ARRAY << 5) | NUMBYTES.INDEFINITE)) {\n        return false\n      }\n    } else if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate(gen, obj) {\n    switch (gen.dateType) {\n      case 'string':\n        return gen._pushTag(TAG.DATE_STRING) &&\n          gen._pushString(obj.toISOString())\n      case 'int':\n      case 'integer':\n        return gen._pushTag(TAG.DATE_EPOCH) &&\n          gen._pushIntNum(Math.round(obj / 1000))\n      case 'float':\n        // force float\n        return gen._pushTag(TAG.DATE_EPOCH) &&\n          gen._pushFloat(obj / 1000)\n      case 'number':\n      default:\n        // if we happen to have an integral number of seconds,\n        // use integer.  Otherwise, use float.\n        return gen._pushTag(TAG.DATE_EPOCH) &&\n          gen.pushAny(obj / 1000)\n    }\n  }\n\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushURL(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.toString())\n  }\n\n  /**\n   * @param {bignumber} obj\n   * @private\n   */\n  _pushBigint(obj) {\n    let m = MT.POS_INT\n    let tag = TAG.POS_BIGINT\n\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      m = MT.NEG_INT\n      tag = TAG.NEG_BIGINT\n    }\n\n    if (this.collapseBigIntegers &&\n        obj.lte(BN.MAXINT64)) {\n      //  special handiling for 64bits\n      if (obj.lte(BN.MAXINT32)) {\n        return this._pushInt(obj.toNumber(), m)\n      }\n      return this._pushUInt8((m << 5) | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(obj.dividedToIntegerBy(BN.SHIFT32).toNumber()) &&\n        this._pushUInt32BE(obj.mod(BN.SHIFT32).toNumber())\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  /**\n   * @param {bigint} obj\n   * @private\n   */\n  _pushJSBigint(obj) {\n    let m = MT.POS_INT\n    let tag = TAG.POS_BIGINT\n    // BigInt doesn't have -0\n    if (obj < 0) {\n      obj = -obj + BI.MINUS_ONE\n      m = MT.NEG_INT\n      tag = TAG.NEG_BIGINT\n    }\n\n    if (this.collapseBigIntegers &&\n        (obj <= BI.MAXINT64)) {\n      //  special handiling for 64bits\n      if (obj <= 0xffffffff) {\n        return this._pushInt(Number(obj), m)\n      }\n      return this._pushUInt8((m << 5) | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Number(obj / BI.SHIFT32)) &&\n        this._pushUInt32BE(Number(obj % BI.SHIFT32))\n    }\n\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.shiftedBy(dec)\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(BN.MAXINT)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts)\n    if (opts.indefinite) {\n      if (!gen._pushUInt8((MT.MAP << 5) | NUMBYTES.INDEFINITE)) {\n        return false\n      }\n    } else if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n    // memoizing the cbor only helps in certain cases, and hurts in most\n    // others.  Just avoid it.\n    if (gen.canonical) {\n      // keep the key/value pairs together, so we don't have to do odd\n      // gets with object keys later\n      const entries = [...obj.entries()]\n      const enc = new Encoder(this) // TODO: fix genTypes\n      const bs = new NoFilter({highWaterMark:this.readableHighWaterMark})\n      enc.pipe(bs)\n      entries.sort(([a], [b]) => {\n        // a, b are the keys\n        enc.pushAny(a)\n        const a_cbor = bs.read()\n        enc.pushAny(b)\n        const b_cbor = bs.read()\n        return a_cbor.compare(b_cbor)\n      })\n      for (const [k, v] of entries) {\n        if (gen.disallowUndefinedKeys && (typeof k === 'undefined')) {\n          throw new Error('Invalid Map key: undefined')\n        }\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false\n        }\n      }\n    } else {\n      for (const [k, v] of obj) {\n        if (gen.disallowUndefinedKeys && (typeof k === 'undefined')) {\n          throw new Error('Invalid Map key: undefined')\n        }\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false\n        }\n      }\n    }\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUint8Array(gen, obj) {\n    return gen._pushBuffer(gen, Buffer.from(obj))\n  }\n\n  _pushFloat32Array(gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(FLOAT) || !gen._pushFloatBE(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushFloat64Array(gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(DOUBLE) || !gen._pushDoubleBE(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Remove all of the loop detector additions to the given object.\n   *\n   * @param {Object} obj - object to clean\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n  removeLoopDetectors(obj) {\n    if (!this.detectLoops) {\n      return false\n    }\n    return Encoder.removeLoopDetectors(obj, this.detectLoops)\n  }\n\n  /**\n   * Remove all of the loop detector additions to the given object.\n   * The static version is easier to call when you don't have a full\n   * encoder instance available; it uses a good heuristic to figure\n   * out the loop detector symbol.\n   *\n   * @param {Object} obj - object to clean\n   * @param {Symbol} [detector=null] - the symbol to clean, or null\n   *   to use the first detected symbol\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n  static removeLoopDetectors(obj, detector=null) {\n    if ((typeof(obj) !== 'object') || !obj) {\n      return false\n    }\n    const dl = obj[LOOP_DETECT]\n    if (!dl) {\n      // ironically, use loop marking to detect loops on removal as well\n      return false\n    }\n    if (detector == null) {\n      detector = dl\n    } else {\n      if (detector !== dl) {\n        return false\n      }\n    }\n    delete obj[LOOP_DETECT]\n    if (Array.isArray(obj)) {\n      for (const i of obj) {\n        this.removeLoopDetectors(i, detector)\n      }\n    } else {\n      for (const k in obj) {\n        this.removeLoopDetectors(obj[k], detector)\n      }\n    }\n    return true\n  }\n\n  _pushObject(obj, opts) {\n    if (!obj) {\n      return this._pushNull(obj)\n    }\n    opts = Object.assign({\n      indefinite: false,\n      skipTypes: false\n    }, opts)\n    if (!opts.indefinite) {\n      // this will only happen the first time through for indefinite encoding\n      if (this.detectLoops) {\n        if (obj[LOOP_DETECT] === this.detectLoops) {\n          throw new Error('Loop detected while CBOR encoding')\n        } else {\n          obj[LOOP_DETECT] = this.detectLoops\n        }\n      }\n    }\n    if (!opts.skipTypes) {\n      const f = obj.encodeCBOR\n      if (typeof f === 'function') {\n        return f.call(obj, this)\n      }\n      const converter = this.semanticTypes[obj.constructor.name]\n      if (converter) {\n        return converter.call(obj, this, obj)\n      }\n    }\n    const keys = Object.keys(obj).filter(k => typeof obj[k] !== 'function')\n    const cbor_keys = {}\n    if (this.canonical) {\n      // note: this can't be a normal sort, because 'b' needs to sort before\n      // 'aa'\n      keys.sort((a, b) => {\n        // Always strings, so don't bother to pass options.\n        // hold on to the cbor versions, since there's no need\n        // to encode more than once\n        const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a))\n        const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b))\n\n        return a_cbor.compare(b_cbor)\n      })\n    }\n    if (opts.indefinite) {\n      if (!this._pushUInt8((MT.MAP << 5) | NUMBYTES.INDEFINITE)) {\n        return false\n      }\n    } else if (!this._pushInt(keys.length, MT.MAP)) {\n      return false\n    }\n    let ck\n    for (let j = 0, len2 = keys.length; j < len2; j++) {\n      const k = keys[j]\n      if (this.canonical && ((ck = cbor_keys[k]))) {\n        if (!this.push(ck)) { // already a Buffer\n          return false\n        }\n      } else {\n        if (!this._pushString(k)) {\n          return false\n        }\n      }\n      if (!this.pushAny(obj[k])) {\n        return false\n      }\n    }\n    if (opts.indefinite) {\n      if (!this.push(BREAK)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny(obj) {\n    switch (typeof obj) {\n      case 'number':\n        return this._pushNumber(obj)\n      case 'bigint':\n        return this._pushJSBigint(obj)\n      case 'string':\n        return this._pushString(obj)\n      case 'boolean':\n        return this._pushBoolean(obj)\n      case 'undefined':\n        return this._pushUndefined(obj)\n      case 'object':\n        return this._pushObject(obj)\n      case 'symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushNull(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(void 0)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error(\n          'Unknown type: ' + typeof obj + ', ' +\n          (!!obj.toString ? obj.toString() : ''))\n    }\n  }\n\n  /* backwards-compat wrapper */\n  _pushAny(obj) {\n    // TODO: write deprecation warning\n    return this.pushAny(obj)\n  }\n\n  _encodeAll(objs) {\n    const bs = new NoFilter({ highWaterMark:this.readableHighWaterMark })\n    this.pipe(bs)\n    for (const o of objs) {\n      this.pushAny(o)\n    }\n    this.end()\n    return bs.read()\n  }\n\n  /**\n   * Encode the given object with indefinite length.  There are apparently\n   * some (IMO) broken implementations of poorly-specified protocols that\n   * REQUIRE indefinite-encoding.  Add this to an object or class as the\n   * `encodeCBOR` function to get indefinite encoding:\n   * @example\n   * const o = {\n   *   a: true,\n   *   encodeCBOR: cbor.Encoder.encodeIndefinite\n   * }\n   * const m = []\n   * m.encodeCBOR = cbor.Encoder.encodeIndefinite\n   * cbor.encodeOne([o, m])\n   *\n   * @param {Encoder} - the encoder to use\n   * @param {String|Buffer|Array|Map|Object} [obj] - the object to encode.  If\n   *   null, use \"this\" instead.\n   * @param {Object} [opts=null] - Options for encoding\n   * @param {boolean} [opts.chunkSize=4096] - Number of characters or bytes\n   *  for each chunk, if obj is a string or Buffer\n   * @returns {boolean} - true on success\n   */\n  static encodeIndefinite(gen, obj, opts) {\n    if (obj == null) {\n      if (this == null) {\n        throw new Error('No object to encode')\n      }\n      obj = this\n    }\n    opts = Object.assign({\n      chunkSize: 4096\n    }, opts)\n\n    let ret = true\n    const objType = typeof obj\n    if (objType === 'string') {\n      // TODO: make sure not to split surrogate pairs at the edges of chunks,\n      // since such half-surrogates cannot be legally encoded as UTF-8.\n      ret = ret && gen._pushUInt8((MT.UTF8_STRING << 5) | NUMBYTES.INDEFINITE)\n      let offset = 0\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize\n        ret = ret && gen._pushString(obj.slice(offset, endIndex))\n        offset = endIndex\n      }\n      ret = ret && gen.push(BREAK)\n    } else if (Buffer.isBuffer(obj)) {\n      ret = ret && gen._pushUInt8((MT.BYTE_STRING << 5) | NUMBYTES.INDEFINITE)\n      let offset = 0\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize\n        ret = ret && gen._pushBuffer(gen, obj.slice(offset, endIndex))\n        offset = endIndex\n      }\n      ret = ret && gen.push(BREAK)\n    } else if (Array.isArray(obj)) {\n      ret = ret && gen._pushArray(gen, obj, {\n        indefinite: true\n      })\n    } else if (obj instanceof Map) {\n      ret = ret && gen._pushMap(gen, obj, {\n        indefinite: true\n      })\n    } else {\n      if (objType !== 'object') {\n        throw new Error('Invalid indefinite encoding')\n      }\n      ret = ret && gen._pushObject(obj, {\n        indefinite: true,\n        skipTypes: true\n      })\n    }\n    return ret\n  }\n\n  /**\n   * Encode one or more JavaScript objects, and return a Buffer containing the\n   * CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encode(...objs) {\n    return new Encoder()._encodeAll(objs)\n  }\n\n  /**\n   * Encode one or more JavaScript objects canonically (slower!), and return\n   * a Buffer containing the CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encodeCanonical(...objs) {\n    return new Encoder({canonical: true})._encodeAll(objs)\n  }\n\n  /**\n   * Encode one JavaScript object using the given options.\n   *\n   * @static\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   * @returns {Buffer} - the encoded objects\n   */\n  static encodeOne(obj, options) {\n    return new Encoder(options)._encodeAll([obj])\n  }\n\n  /**\n   * Encode one JavaScript object using the given options in a way that\n   * is more resilient to objects being larger than the highWaterMark\n   * number of bytes.  As with the other static encode functions, this \n   * will still use a large amount of memory.  Use a stream-based approach\n   * directly if you need to process large and complicated inputs.\n   *\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   */\n  static encodeAsync(obj, options) {\n    return new Promise((resolve, reject) => {\n      const bufs = []\n      const enc = new Encoder(options)\n      enc.on('data', buf => bufs.push(buf))\n      enc.on('error', reject)\n      enc.on('finish', () => resolve(Buffer.concat(bufs)))\n      enc.pushAny(obj)\n      enc.end()\n    })\n  }\n}\n\nmodule.exports = Encoder\n"]},"metadata":{},"sourceType":"script"}