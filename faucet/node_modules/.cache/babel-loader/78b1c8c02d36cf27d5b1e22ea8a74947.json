{"ast":null,"code":"export function unsafeUniformBigIntDistribution(from, to, rng) {\n  var diff = to - from + BigInt(1);\n  var MinRng = BigInt(rng.min());\n  var NumValues = BigInt(rng.max() - rng.min() + 1);\n  var FinalNumValues = NumValues;\n  var NumIterations = BigInt(1);\n\n  while (FinalNumValues < diff) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n\n  var MaxAcceptedRandom = FinalNumValues - FinalNumValues % diff;\n\n  while (true) {\n    var value = BigInt(0);\n\n    for (var num = BigInt(0); num !== NumIterations; ++num) {\n      var out = rng.unsafeNext();\n      value = NumValues * value + (BigInt(out) - MinRng);\n    }\n\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value % diff;\n      return inDiff + from;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js"],"names":["unsafeUniformBigIntDistribution","from","to","rng","diff","BigInt","MinRng","min","NumValues","max","FinalNumValues","NumIterations","MaxAcceptedRandom","value","num","out","unsafeNext","inDiff"],"mappings":"AAAA,OAAO,SAASA,+BAAT,CAAyCC,IAAzC,EAA+CC,EAA/C,EAAmDC,GAAnD,EAAwD;AAC3D,MAAIC,IAAI,GAAGF,EAAE,GAAGD,IAAL,GAAYI,MAAM,CAAC,CAAD,CAA7B;AACA,MAAIC,MAAM,GAAGD,MAAM,CAACF,GAAG,CAACI,GAAJ,EAAD,CAAnB;AACA,MAAIC,SAAS,GAAGH,MAAM,CAACF,GAAG,CAACM,GAAJ,KAAYN,GAAG,CAACI,GAAJ,EAAZ,GAAwB,CAAzB,CAAtB;AACA,MAAIG,cAAc,GAAGF,SAArB;AACA,MAAIG,aAAa,GAAGN,MAAM,CAAC,CAAD,CAA1B;;AACA,SAAOK,cAAc,GAAGN,IAAxB,EAA8B;AAC1BM,IAAAA,cAAc,IAAIF,SAAlB;AACA,MAAEG,aAAF;AACH;;AACD,MAAIC,iBAAiB,GAAGF,cAAc,GAAIA,cAAc,GAAGN,IAA3D;;AACA,SAAO,IAAP,EAAa;AACT,QAAIS,KAAK,GAAGR,MAAM,CAAC,CAAD,CAAlB;;AACA,SAAK,IAAIS,GAAG,GAAGT,MAAM,CAAC,CAAD,CAArB,EAA0BS,GAAG,KAAKH,aAAlC,EAAiD,EAAEG,GAAnD,EAAwD;AACpD,UAAIC,GAAG,GAAGZ,GAAG,CAACa,UAAJ,EAAV;AACAH,MAAAA,KAAK,GAAGL,SAAS,GAAGK,KAAZ,IAAqBR,MAAM,CAACU,GAAD,CAAN,GAAcT,MAAnC,CAAR;AACH;;AACD,QAAIO,KAAK,GAAGD,iBAAZ,EAA+B;AAC3B,UAAIK,MAAM,GAAGJ,KAAK,GAAGT,IAArB;AACA,aAAOa,MAAM,GAAGhB,IAAhB;AACH;AACJ;AACJ","sourcesContent":["export function unsafeUniformBigIntDistribution(from, to, rng) {\n    var diff = to - from + BigInt(1);\n    var MinRng = BigInt(rng.min());\n    var NumValues = BigInt(rng.max() - rng.min() + 1);\n    var FinalNumValues = NumValues;\n    var NumIterations = BigInt(1);\n    while (FinalNumValues < diff) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = FinalNumValues - (FinalNumValues % diff);\n    while (true) {\n        var value = BigInt(0);\n        for (var num = BigInt(0); num !== NumIterations; ++num) {\n            var out = rng.unsafeNext();\n            value = NumValues * value + (BigInt(out) - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value % diff;\n            return inDiff + from;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}