{"ast":null,"code":"import { array } from './array.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { oneof } from './oneof.js';\nimport { hexaString } from './hexaString.js';\nimport { tuple } from './tuple.js';\nimport { ipV4 } from './ipV4.js';\nimport { fullySpecifiedMapper, fullySpecifiedUnmapper, onlyTrailingMapper, onlyTrailingUnmapper, multiTrailingMapper, multiTrailingUnmapper, multiTrailingMapperOne, multiTrailingUnmapperOne, singleTrailingMapper, singleTrailingUnmapper, noTrailingMapper, noTrailingUnmapper } from './_internals/mappers/EntitiesToIPv6.js';\n\nfunction h16sTol32Mapper(_ref) {\n  let [a, b] = _ref;\n  return `${a}:${b}`;\n}\n\nfunction h16sTol32Unmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.includes(':')) throw new Error('Invalid value');\n  return value.split(':', 2);\n}\n\nexport function ipV6() {\n  const h16Arb = hexaString({\n    minLength: 1,\n    maxLength: 4,\n    size: 'max'\n  });\n  const ls32Arb = oneof(convertFromNext(convertToNext(tuple(h16Arb, h16Arb)).map(h16sTol32Mapper, h16sTol32Unmapper)), ipV4());\n  return oneof(convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 6,\n    maxLength: 6,\n    size: 'max'\n  }), ls32Arb)).map(fullySpecifiedMapper, fullySpecifiedUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 5,\n    maxLength: 5,\n    size: 'max'\n  }), ls32Arb)).map(onlyTrailingMapper, onlyTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 1,\n    size: 'max'\n  }), array(h16Arb, {\n    minLength: 4,\n    maxLength: 4,\n    size: 'max'\n  }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 2,\n    size: 'max'\n  }), array(h16Arb, {\n    minLength: 3,\n    maxLength: 3,\n    size: 'max'\n  }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 3,\n    size: 'max'\n  }), array(h16Arb, {\n    minLength: 2,\n    maxLength: 2,\n    size: 'max'\n  }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 4,\n    size: 'max'\n  }), h16Arb, ls32Arb)).map(multiTrailingMapperOne, multiTrailingUnmapperOne)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 5,\n    size: 'max'\n  }), ls32Arb)).map(singleTrailingMapper, singleTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 6,\n    size: 'max'\n  }), h16Arb)).map(singleTrailingMapper, singleTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 7,\n    size: 'max'\n  }))).map(noTrailingMapper, noTrailingUnmapper)));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/ipV6.js"],"names":["array","convertFromNext","convertToNext","oneof","hexaString","tuple","ipV4","fullySpecifiedMapper","fullySpecifiedUnmapper","onlyTrailingMapper","onlyTrailingUnmapper","multiTrailingMapper","multiTrailingUnmapper","multiTrailingMapperOne","multiTrailingUnmapperOne","singleTrailingMapper","singleTrailingUnmapper","noTrailingMapper","noTrailingUnmapper","h16sTol32Mapper","a","b","h16sTol32Unmapper","value","Error","includes","split","ipV6","h16Arb","minLength","maxLength","size","ls32Arb","map"],"mappings":"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","sourcesContent":["import { array } from './array.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { oneof } from './oneof.js';\nimport { hexaString } from './hexaString.js';\nimport { tuple } from './tuple.js';\nimport { ipV4 } from './ipV4.js';\nimport { fullySpecifiedMapper, fullySpecifiedUnmapper, onlyTrailingMapper, onlyTrailingUnmapper, multiTrailingMapper, multiTrailingUnmapper, multiTrailingMapperOne, multiTrailingUnmapperOne, singleTrailingMapper, singleTrailingUnmapper, noTrailingMapper, noTrailingUnmapper, } from './_internals/mappers/EntitiesToIPv6.js';\nfunction h16sTol32Mapper([a, b]) {\n    return `${a}:${b}`;\n}\nfunction h16sTol32Unmapper(value) {\n    if (typeof value !== 'string')\n        throw new Error('Invalid type');\n    if (!value.includes(':'))\n        throw new Error('Invalid value');\n    return value.split(':', 2);\n}\nexport function ipV6() {\n    const h16Arb = hexaString({ minLength: 1, maxLength: 4, size: 'max' });\n    const ls32Arb = oneof(convertFromNext(convertToNext(tuple(h16Arb, h16Arb)).map(h16sTol32Mapper, h16sTol32Unmapper)), ipV4());\n    return oneof(convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 6, maxLength: 6, size: 'max' }), ls32Arb)).map(fullySpecifiedMapper, fullySpecifiedUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 5, maxLength: 5, size: 'max' }), ls32Arb)).map(onlyTrailingMapper, onlyTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 1, size: 'max' }), array(h16Arb, { minLength: 4, maxLength: 4, size: 'max' }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 2, size: 'max' }), array(h16Arb, { minLength: 3, maxLength: 3, size: 'max' }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 3, size: 'max' }), array(h16Arb, { minLength: 2, maxLength: 2, size: 'max' }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 4, size: 'max' }), h16Arb, ls32Arb)).map(multiTrailingMapperOne, multiTrailingUnmapperOne)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 5, size: 'max' }), ls32Arb)).map(singleTrailingMapper, singleTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 6, size: 'max' }), h16Arb)).map(singleTrailingMapper, singleTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, { minLength: 0, maxLength: 7, size: 'max' }))).map(noTrailingMapper, noTrailingUnmapper)));\n}\n"]},"metadata":{},"sourceType":"module"}