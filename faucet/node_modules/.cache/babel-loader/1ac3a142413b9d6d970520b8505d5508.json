{"ast":null,"code":"import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n  switch (size) {\n    case 'xsmall':\n      return Math.floor(1.1 * minLength) + 1;\n\n    case 'small':\n      return 2 * minLength + 10;\n\n    case 'medium':\n      return 11 * minLength + 100;\n\n    case 'large':\n      return 101 * minLength + 1000;\n\n    case 'xlarge':\n      return 1001 * minLength + 10000;\n\n    default:\n      throw new Error(`Unable to compute lengths based on received size: ${size}`);\n  }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n  const sizeInRelative = orderedRelativeSize.indexOf(size);\n\n  if (sizeInRelative === -1) {\n    return size;\n  }\n\n  const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n\n  if (defaultSizeInSize === -1) {\n    throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);\n  }\n\n  const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n  return resultingSizeInSize < 0 ? orderedSize[0] : resultingSizeInSize >= orderedSize.length ? orderedSize[orderedSize.length - 1] : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n  const {\n    baseSize: defaultSize = DefaultSize,\n    defaultSizeToMaxWhenMaxSpecified = true\n  } = readConfigureGlobal() || {};\n  const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n\n  if (definedSize === 'max') {\n    return maxLength;\n  }\n\n  const finalSize = relativeSizeToSize(definedSize, defaultSize);\n  return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function resolveSize(size) {\n  const {\n    baseSize: defaultSize = DefaultSize\n  } = readConfigureGlobal() || {};\n\n  if (size === undefined) {\n    return defaultSize;\n  }\n\n  return relativeSizeToSize(size, defaultSize);\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/MaxLengthFromMinLength.js"],"names":["readConfigureGlobal","MaxLengthUpperBound","orderedSize","orderedRelativeSize","DefaultSize","maxLengthFromMinLength","minLength","size","Math","floor","Error","relativeSizeToSize","defaultSize","sizeInRelative","indexOf","defaultSizeInSize","resultingSizeInSize","length","maxGeneratedLengthFromSizeForArbitrary","maxLength","specifiedMaxLength","baseSize","defaultSizeToMaxWhenMaxSpecified","definedSize","undefined","finalSize","min","resolveSize"],"mappings":"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","sourcesContent":["import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n    switch (size) {\n        case 'xsmall':\n            return Math.floor(1.1 * minLength) + 1;\n        case 'small':\n            return 2 * minLength + 10;\n        case 'medium':\n            return 11 * minLength + 100;\n        case 'large':\n            return 101 * minLength + 1000;\n        case 'xlarge':\n            return 1001 * minLength + 10000;\n        default:\n            throw new Error(`Unable to compute lengths based on received size: ${size}`);\n    }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n    const sizeInRelative = orderedRelativeSize.indexOf(size);\n    if (sizeInRelative === -1) {\n        return size;\n    }\n    const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n    if (defaultSizeInSize === -1) {\n        throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);\n    }\n    const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n    return resultingSizeInSize < 0\n        ? orderedSize[0]\n        : resultingSizeInSize >= orderedSize.length\n            ? orderedSize[orderedSize.length - 1]\n            : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n    const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified = true } = readConfigureGlobal() || {};\n    const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n    if (definedSize === 'max') {\n        return maxLength;\n    }\n    const finalSize = relativeSizeToSize(definedSize, defaultSize);\n    return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function resolveSize(size) {\n    const { baseSize: defaultSize = DefaultSize } = readConfigureGlobal() || {};\n    if (size === undefined) {\n        return defaultSize;\n    }\n    return relativeSizeToSize(size, defaultSize);\n}\n"]},"metadata":{},"sourceType":"module"}