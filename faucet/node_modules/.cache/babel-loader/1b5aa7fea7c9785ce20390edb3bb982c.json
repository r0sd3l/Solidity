{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { set } from './set.js';\nimport { tuple } from './tuple.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from './_internals/mappers/KeyValuePairsToObject.js';\n\nfunction dictionaryKeyExtractor(entry) {\n  return entry[0];\n}\n\nexport function dictionary(keyArb, valueArb) {\n  let constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return convertFromNext(convertToNext(set(tuple(keyArb, valueArb), {\n    minLength: constraints.minKeys,\n    maxLength: constraints.maxKeys,\n    size: constraints.size,\n    compare: {\n      selector: dictionaryKeyExtractor\n    }\n  })).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/dictionary.js"],"names":["convertFromNext","convertToNext","set","tuple","keyValuePairsToObjectMapper","keyValuePairsToObjectUnmapper","dictionaryKeyExtractor","entry","dictionary","keyArb","valueArb","constraints","minLength","minKeys","maxLength","maxKeys","size","compare","selector","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,2BAAT,EAAsCC,6BAAtC,QAA2E,+CAA3E;;AACA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,SAAOA,KAAK,CAAC,CAAD,CAAZ;AACH;;AACD,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,QAA5B,EAAwD;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AAC3D,SAAOX,eAAe,CAACC,aAAa,CAACC,GAAG,CAACC,KAAK,CAACM,MAAD,EAASC,QAAT,CAAN,EAA0B;AAC9DE,IAAAA,SAAS,EAAED,WAAW,CAACE,OADuC;AAE9DC,IAAAA,SAAS,EAAEH,WAAW,CAACI,OAFuC;AAG9DC,IAAAA,IAAI,EAAEL,WAAW,CAACK,IAH4C;AAI9DC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,QAAQ,EAAEZ;AAAZ;AAJqD,GAA1B,CAAJ,CAAb,CAKnBa,GALmB,CAKff,2BALe,EAKcC,6BALd,CAAD,CAAtB;AAMH","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { set } from './set.js';\nimport { tuple } from './tuple.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from './_internals/mappers/KeyValuePairsToObject.js';\nfunction dictionaryKeyExtractor(entry) {\n    return entry[0];\n}\nexport function dictionary(keyArb, valueArb, constraints = {}) {\n    return convertFromNext(convertToNext(set(tuple(keyArb, valueArb), {\n        minLength: constraints.minKeys,\n        maxLength: constraints.maxKeys,\n        size: constraints.size,\n        compare: { selector: dictionaryKeyExtractor },\n    })).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}