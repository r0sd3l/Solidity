{"ast":null,"code":"import { convertFromNext } from '../check/arbitrary/definition/Converters.js';\nimport { SubarrayArbitrary } from './_internals/SubarrayArbitrary.js';\n\nfunction subarray(originalArray) {\n  if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'number' && typeof (arguments.length <= 2 ? undefined : arguments[2]) === 'number') {\n    return convertFromNext(new SubarrayArbitrary(originalArray, true, arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]));\n  }\n\n  const ct = arguments.length <= 1 ? undefined : arguments[1];\n  const minLength = ct !== undefined && ct.minLength !== undefined ? ct.minLength : 0;\n  const maxLength = ct !== undefined && ct.maxLength !== undefined ? ct.maxLength : originalArray.length;\n  return convertFromNext(new SubarrayArbitrary(originalArray, true, minLength, maxLength));\n}\n\nexport { subarray };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/subarray.js"],"names":["convertFromNext","SubarrayArbitrary","subarray","originalArray","ct","minLength","undefined","maxLength","length"],"mappings":"AAAA,SAASA,eAAT,QAAgC,6CAAhC;AACA,SAASC,iBAAT,QAAkC,mCAAlC;;AACA,SAASC,QAAT,CAAkBC,aAAlB,EAA0C;AACtC,MAAI,8DAAmB,QAAnB,IAA+B,8DAAmB,QAAtD,EAAgE;AAC5D,WAAOH,eAAe,CAAC,IAAIC,iBAAJ,CAAsBE,aAAtB,EAAqC,IAArC,qGAAD,CAAtB;AACH;;AACD,QAAMC,EAAE,mDAAR;AACA,QAAMC,SAAS,GAAGD,EAAE,KAAKE,SAAP,IAAoBF,EAAE,CAACC,SAAH,KAAiBC,SAArC,GAAiDF,EAAE,CAACC,SAApD,GAAgE,CAAlF;AACA,QAAME,SAAS,GAAGH,EAAE,KAAKE,SAAP,IAAoBF,EAAE,CAACG,SAAH,KAAiBD,SAArC,GAAiDF,EAAE,CAACG,SAApD,GAAgEJ,aAAa,CAACK,MAAhG;AACA,SAAOR,eAAe,CAAC,IAAIC,iBAAJ,CAAsBE,aAAtB,EAAqC,IAArC,EAA2CE,SAA3C,EAAsDE,SAAtD,CAAD,CAAtB;AACH;;AACD,SAASL,QAAT","sourcesContent":["import { convertFromNext } from '../check/arbitrary/definition/Converters.js';\nimport { SubarrayArbitrary } from './_internals/SubarrayArbitrary.js';\nfunction subarray(originalArray, ...args) {\n    if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n        return convertFromNext(new SubarrayArbitrary(originalArray, true, args[0], args[1]));\n    }\n    const ct = args[0];\n    const minLength = ct !== undefined && ct.minLength !== undefined ? ct.minLength : 0;\n    const maxLength = ct !== undefined && ct.maxLength !== undefined ? ct.maxLength : originalArray.length;\n    return convertFromNext(new SubarrayArbitrary(originalArray, true, minLength, maxLength));\n}\nexport { subarray };\n"]},"metadata":{},"sourceType":"module"}