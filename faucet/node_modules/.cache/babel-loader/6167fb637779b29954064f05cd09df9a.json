{"ast":null,"code":"import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nimport { NextValue } from './NextValue.js';\nexport class NextArbitrary {\n  filter(refinement) {\n    return new FilterArbitrary(this, refinement);\n  }\n\n  map(mapper, unmapper) {\n    return new MapArbitrary(this, mapper, unmapper);\n  }\n\n  chain(chainer) {\n    return new ChainArbitrary(this, chainer);\n  }\n\n  noShrink() {\n    return new NoShrinkArbitrary(this);\n  }\n\n  noBias() {\n    return new NoBiasArbitrary(this);\n  }\n\n}\n\nclass ChainArbitrary extends NextArbitrary {\n  constructor(arb, chainer) {\n    super();\n    this.arb = arb;\n    this.chainer = chainer;\n  }\n\n  generate(mrng, biasFactor) {\n    const clonedMrng = mrng.clone();\n    const src = this.arb.generate(mrng, biasFactor);\n    return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  shrink(value, context) {\n    if (this.isSafeContext(context)) {\n      return (!context.stoppedForOriginal ? this.arb.shrink(context.originalValue, context.originalContext).map(v => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias)) : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map(dst => {\n        const newContext = Object.assign(Object.assign({}, context), {\n          chainedContext: dst.context,\n          stoppedForOriginal: true\n        });\n        return new NextValue(dst.value_, newContext);\n      }));\n    }\n\n    return Stream.nil();\n  }\n\n  valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n    const chainedArbitrary = this.chainer(v.value_);\n    const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n    const context = {\n      originalBias: biasFactor,\n      originalValue: v.value_,\n      originalContext: v.context,\n      stoppedForOriginal: false,\n      chainedArbitrary,\n      chainedContext: dst.context,\n      clonedMrng\n    };\n    return new NextValue(dst.value_, context);\n  }\n\n  isSafeContext(context) {\n    return context != null && typeof context === 'object' && 'originalBias' in context && 'originalValue' in context && 'originalContext' in context && 'stoppedForOriginal' in context && 'chainedArbitrary' in context && 'chainedContext' in context && 'clonedMrng' in context;\n  }\n\n}\n\nclass MapArbitrary extends NextArbitrary {\n  constructor(arb, mapper, unmapper) {\n    super();\n    this.arb = arb;\n    this.mapper = mapper;\n    this.unmapper = unmapper;\n    this.bindValueMapper = this.valueMapper.bind(this);\n  }\n\n  generate(mrng, biasFactor) {\n    const g = this.arb.generate(mrng, biasFactor);\n    return this.valueMapper(g);\n  }\n\n  canShrinkWithoutContext(value) {\n    if (this.unmapper !== undefined) {\n      try {\n        const unmapped = this.unmapper(value);\n        return this.arb.canShrinkWithoutContext(unmapped);\n      } catch (_err) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  shrink(value, context) {\n    if (this.isSafeContext(context)) {\n      return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n    }\n\n    if (this.unmapper !== undefined) {\n      const unmapped = this.unmapper(value);\n      return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n    }\n\n    return Stream.nil();\n  }\n\n  mapperWithCloneIfNeeded(v) {\n    const sourceValue = v.value;\n    const mappedValue = this.mapper(sourceValue);\n\n    if (v.hasToBeCloned && (typeof mappedValue === 'object' && mappedValue !== null || typeof mappedValue === 'function') && Object.isExtensible(mappedValue) && !hasCloneMethod(mappedValue)) {\n      Object.defineProperty(mappedValue, cloneMethod, {\n        get: () => () => this.mapperWithCloneIfNeeded(v)[0]\n      });\n    }\n\n    return [mappedValue, sourceValue];\n  }\n\n  valueMapper(v) {\n    const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n    const context = {\n      originalValue: sourceValue,\n      originalContext: v.context\n    };\n    return new NextValue(mappedValue, context);\n  }\n\n  isSafeContext(context) {\n    return context != null && typeof context === 'object' && 'originalValue' in context && 'originalContext' in context;\n  }\n\n}\n\nclass FilterArbitrary extends NextArbitrary {\n  constructor(arb, refinement) {\n    super();\n    this.arb = arb;\n    this.refinement = refinement;\n    this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n  }\n\n  generate(mrng, biasFactor) {\n    while (true) {\n      const g = this.arb.generate(mrng, biasFactor);\n\n      if (this.refinementOnValue(g)) {\n        return g;\n      }\n    }\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n  }\n\n  shrink(value, context) {\n    return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n  }\n\n  refinementOnValue(v) {\n    return this.refinement(v.value);\n  }\n\n}\n\nclass NoShrinkArbitrary extends NextArbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, biasFactor) {\n    return this.arb.generate(mrng, biasFactor);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value);\n  }\n\n  shrink(_value, _context) {\n    return Stream.nil();\n  }\n\n  noShrink() {\n    return this;\n  }\n\n}\n\nclass NoBiasArbitrary extends NextArbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, _biasFactor) {\n    return this.arb.generate(mrng, undefined);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    return this.arb.shrink(value, context);\n  }\n\n  noBias() {\n    return this;\n  }\n\n}\n\nexport function assertIsNextArbitrary(instance) {\n  if (typeof instance !== 'object' || instance === null || !('generate' in instance) || !('shrink' in instance) || 'shrinkableFor' in instance) {\n    throw new Error('Unexpected value received: not an instance of NextArbitrary');\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/arbitrary/definition/NextArbitrary.js"],"names":["Stream","cloneMethod","hasCloneMethod","NextValue","NextArbitrary","filter","refinement","FilterArbitrary","map","mapper","unmapper","MapArbitrary","chain","chainer","ChainArbitrary","noShrink","NoShrinkArbitrary","noBias","NoBiasArbitrary","constructor","arb","generate","mrng","biasFactor","clonedMrng","clone","src","valueChainer","canShrinkWithoutContext","value","shrink","context","isSafeContext","stoppedForOriginal","originalValue","originalContext","v","originalBias","nil","join","chainedArbitrary","chainedContext","dst","newContext","Object","assign","value_","generateMrng","bindValueMapper","valueMapper","bind","g","undefined","unmapped","_err","mapperWithCloneIfNeeded","sourceValue","mappedValue","hasToBeCloned","isExtensible","defineProperty","get","bindRefinementOnValue","refinementOnValue","_value","_context","_biasFactor","assertIsNextArbitrary","instance","Error"],"mappings":"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","sourcesContent":["import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nimport { NextValue } from './NextValue.js';\nexport class NextArbitrary {\n    filter(refinement) {\n        return new FilterArbitrary(this, refinement);\n    }\n    map(mapper, unmapper) {\n        return new MapArbitrary(this, mapper, unmapper);\n    }\n    chain(chainer) {\n        return new ChainArbitrary(this, chainer);\n    }\n    noShrink() {\n        return new NoShrinkArbitrary(this);\n    }\n    noBias() {\n        return new NoBiasArbitrary(this);\n    }\n}\nclass ChainArbitrary extends NextArbitrary {\n    constructor(arb, chainer) {\n        super();\n        this.arb = arb;\n        this.chainer = chainer;\n    }\n    generate(mrng, biasFactor) {\n        const clonedMrng = mrng.clone();\n        const src = this.arb.generate(mrng, biasFactor);\n        return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return (!context.stoppedForOriginal\n                ? this.arb\n                    .shrink(context.originalValue, context.originalContext)\n                    .map((v) => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias))\n                : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map((dst) => {\n                const newContext = Object.assign(Object.assign({}, context), { chainedContext: dst.context, stoppedForOriginal: true });\n                return new NextValue(dst.value_, newContext);\n            }));\n        }\n        return Stream.nil();\n    }\n    valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n        const chainedArbitrary = this.chainer(v.value_);\n        const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n        const context = {\n            originalBias: biasFactor,\n            originalValue: v.value_,\n            originalContext: v.context,\n            stoppedForOriginal: false,\n            chainedArbitrary,\n            chainedContext: dst.context,\n            clonedMrng,\n        };\n        return new NextValue(dst.value_, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalBias' in context &&\n            'originalValue' in context &&\n            'originalContext' in context &&\n            'stoppedForOriginal' in context &&\n            'chainedArbitrary' in context &&\n            'chainedContext' in context &&\n            'clonedMrng' in context);\n    }\n}\nclass MapArbitrary extends NextArbitrary {\n    constructor(arb, mapper, unmapper) {\n        super();\n        this.arb = arb;\n        this.mapper = mapper;\n        this.unmapper = unmapper;\n        this.bindValueMapper = this.valueMapper.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        const g = this.arb.generate(mrng, biasFactor);\n        return this.valueMapper(g);\n    }\n    canShrinkWithoutContext(value) {\n        if (this.unmapper !== undefined) {\n            try {\n                const unmapped = this.unmapper(value);\n                return this.arb.canShrinkWithoutContext(unmapped);\n            }\n            catch (_err) {\n                return false;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n        }\n        if (this.unmapper !== undefined) {\n            const unmapped = this.unmapper(value);\n            return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n        }\n        return Stream.nil();\n    }\n    mapperWithCloneIfNeeded(v) {\n        const sourceValue = v.value;\n        const mappedValue = this.mapper(sourceValue);\n        if (v.hasToBeCloned &&\n            ((typeof mappedValue === 'object' && mappedValue !== null) || typeof mappedValue === 'function') &&\n            Object.isExtensible(mappedValue) &&\n            !hasCloneMethod(mappedValue)) {\n            Object.defineProperty(mappedValue, cloneMethod, { get: () => () => this.mapperWithCloneIfNeeded(v)[0] });\n        }\n        return [mappedValue, sourceValue];\n    }\n    valueMapper(v) {\n        const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n        const context = { originalValue: sourceValue, originalContext: v.context };\n        return new NextValue(mappedValue, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalValue' in context &&\n            'originalContext' in context);\n    }\n}\nclass FilterArbitrary extends NextArbitrary {\n    constructor(arb, refinement) {\n        super();\n        this.arb = arb;\n        this.refinement = refinement;\n        this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        while (true) {\n            const g = this.arb.generate(mrng, biasFactor);\n            if (this.refinementOnValue(g)) {\n                return g;\n            }\n        }\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n    }\n    refinementOnValue(v) {\n        return this.refinement(v.value);\n    }\n}\nclass NoShrinkArbitrary extends NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        return this.arb.generate(mrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(_value, _context) {\n        return Stream.nil();\n    }\n    noShrink() {\n        return this;\n    }\n}\nclass NoBiasArbitrary extends NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, _biasFactor) {\n        return this.arb.generate(mrng, undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context);\n    }\n    noBias() {\n        return this;\n    }\n}\nexport function assertIsNextArbitrary(instance) {\n    if (typeof instance !== 'object' ||\n        instance === null ||\n        !('generate' in instance) ||\n        !('shrink' in instance) ||\n        'shrinkableFor' in instance) {\n        throw new Error('Unexpected value received: not an instance of NextArbitrary');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}