{"ast":null,"code":"function readBh(value) {\n  if (value.length === 0) return [];else return value.split(':');\n}\n\nfunction extractEhAndL(value) {\n  const valueSplits = value.split(':');\n\n  if (valueSplits.length >= 2 && valueSplits[valueSplits.length - 1].length <= 4) {\n    return [valueSplits.slice(0, valueSplits.length - 2), `${valueSplits[valueSplits.length - 2]}:${valueSplits[valueSplits.length - 1]}`];\n  }\n\n  return [valueSplits.slice(0, valueSplits.length - 1), valueSplits[valueSplits.length - 1]];\n}\n\nexport function fullySpecifiedMapper(data) {\n  return `${data[0].join(':')}:${data[1]}`;\n}\nexport function fullySpecifiedUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  return extractEhAndL(value);\n}\nexport function onlyTrailingMapper(data) {\n  return `::${data[0].join(':')}:${data[1]}`;\n}\nexport function onlyTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.startsWith('::')) throw new Error('Invalid value');\n  return extractEhAndL(value.substring(2));\n}\nexport function multiTrailingMapper(data) {\n  return `${data[0].join(':')}::${data[1].join(':')}:${data[2]}`;\n}\nexport function multiTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  const [bhString, trailingString] = value.split('::', 2);\n  const [eh, l] = extractEhAndL(trailingString);\n  return [readBh(bhString), eh, l];\n}\nexport function multiTrailingMapperOne(data) {\n  return multiTrailingMapper([data[0], [data[1]], data[2]]);\n}\nexport function multiTrailingUnmapperOne(value) {\n  const out = multiTrailingUnmapper(value);\n  return [out[0], out[1].join(':'), out[2]];\n}\nexport function singleTrailingMapper(data) {\n  return `${data[0].join(':')}::${data[1]}`;\n}\nexport function singleTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  const [bhString, trailing] = value.split('::', 2);\n  return [readBh(bhString), trailing];\n}\nexport function noTrailingMapper(data) {\n  return `${data[0].join(':')}::`;\n}\nexport function noTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.endsWith('::')) throw new Error('Invalid value');\n  return [readBh(value.substring(0, value.length - 2))];\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/EntitiesToIPv6.js"],"names":["readBh","value","length","split","extractEhAndL","valueSplits","slice","fullySpecifiedMapper","data","join","fullySpecifiedUnmapper","Error","onlyTrailingMapper","onlyTrailingUnmapper","startsWith","substring","multiTrailingMapper","multiTrailingUnmapper","bhString","trailingString","eh","l","multiTrailingMapperOne","multiTrailingUnmapperOne","out","singleTrailingMapper","singleTrailingUnmapper","trailing","noTrailingMapper","noTrailingUnmapper","endsWith"],"mappings":"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","sourcesContent":["function readBh(value) {\n    if (value.length === 0)\n        return [];\n    else\n        return value.split(':');\n}\nfunction extractEhAndL(value) {\n    const valueSplits = value.split(':');\n    if (valueSplits.length >= 2 && valueSplits[valueSplits.length - 1].length <= 4) {\n        return [\n            valueSplits.slice(0, valueSplits.length - 2),\n            `${valueSplits[valueSplits.length - 2]}:${valueSplits[valueSplits.length - 1]}`,\n        ];\n    }\n    return [valueSplits.slice(0, valueSplits.length - 1), valueSplits[valueSplits.length - 1]];\n}\nexport function fullySpecifiedMapper(data) {\n    return `${data[0].join(':')}:${data[1]}`;\n}\nexport function fullySpecifiedUnmapper(value) {\n    if (typeof value !== 'string')\n        throw new Error('Invalid type');\n    return extractEhAndL(value);\n}\nexport function onlyTrailingMapper(data) {\n    return `::${data[0].join(':')}:${data[1]}`;\n}\nexport function onlyTrailingUnmapper(value) {\n    if (typeof value !== 'string')\n        throw new Error('Invalid type');\n    if (!value.startsWith('::'))\n        throw new Error('Invalid value');\n    return extractEhAndL(value.substring(2));\n}\nexport function multiTrailingMapper(data) {\n    return `${data[0].join(':')}::${data[1].join(':')}:${data[2]}`;\n}\nexport function multiTrailingUnmapper(value) {\n    if (typeof value !== 'string')\n        throw new Error('Invalid type');\n    const [bhString, trailingString] = value.split('::', 2);\n    const [eh, l] = extractEhAndL(trailingString);\n    return [readBh(bhString), eh, l];\n}\nexport function multiTrailingMapperOne(data) {\n    return multiTrailingMapper([data[0], [data[1]], data[2]]);\n}\nexport function multiTrailingUnmapperOne(value) {\n    const out = multiTrailingUnmapper(value);\n    return [out[0], out[1].join(':'), out[2]];\n}\nexport function singleTrailingMapper(data) {\n    return `${data[0].join(':')}::${data[1]}`;\n}\nexport function singleTrailingUnmapper(value) {\n    if (typeof value !== 'string')\n        throw new Error('Invalid type');\n    const [bhString, trailing] = value.split('::', 2);\n    return [readBh(bhString), trailing];\n}\nexport function noTrailingMapper(data) {\n    return `${data[0].join(':')}::`;\n}\nexport function noTrailingUnmapper(value) {\n    if (typeof value !== 'string')\n        throw new Error('Invalid type');\n    if (!value.endsWith('::'))\n        throw new Error('Invalid value');\n    return [readBh(value.substring(0, value.length - 2))];\n}\n"]},"metadata":{},"sourceType":"module"}