{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoProjectInfoError = exports.handleDecodingError = exports.StopDecodingError = exports.DecodingError = void 0;\n\nconst Format = __importStar(require(\"./format\")); //For when we need to throw an error, here's a wrapper class that extends Error.\n//Apologies about the confusing name, but I wanted something that would make\n//sense should it not be caught and thus accidentally exposed to the outside.\n\n/**\n * @hidden\n */\n\n\nclass DecodingError extends Error {\n  constructor(error) {\n    super(Format.Utils.Exception.message(error));\n    this.error = error;\n    this.name = \"DecodingError\";\n  }\n\n}\n\nexports.DecodingError = DecodingError; //used to stop decoding; like DecodingError, but used in contexts\n//where I don't expect it to be caught\n//NOTE: currently we don't actually check the type of a thrown error,\n//we just rely on context.  still, I think it makes sense to be a separate\n//type.\n\n/**\n * @hidden\n */\n\nclass StopDecodingError extends Error {\n  //when decoding in full mode, we allow an ABI-mode retry.  (if we were already in\n  //ABI mode, we give up.)\n  constructor(error, allowRetry) {\n    const message = `Stopping decoding: ${error.kind}`; //sorry about the bare-bones message,\n    //but again, users shouldn't actually see this, so I think this should suffice for now\n\n    super(message);\n    this.error = error;\n    this.allowRetry = Boolean(allowRetry);\n  }\n\n}\n\nexports.StopDecodingError = StopDecodingError;\n/**\n * @hidden\n */\n\nfunction handleDecodingError(dataType, error) {\n  let strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (error instanceof DecodingError) {\n    //expected error\n    if (strict) {\n      //strict mode -- stop decoding on errors\n      throw new StopDecodingError(error.error);\n    } else {\n      //nonstrict mode -- return an error result\n      return {\n        //I don't know why TS's inference is failing here and needs the coercion\n        type: dataType,\n        kind: \"error\",\n        error: error.error\n      };\n    }\n  } else {\n    //if it's *not* an expected error, we better not swallow it -- rethrow!\n    throw error;\n  }\n}\n\nexports.handleDecodingError = handleDecodingError;\n/**\n * This error indicates that the user attempted to instantiate a decoder\n * with no project information (by explicitly overriding the default).\n * @category Exception\n */\n\nclass NoProjectInfoError extends Error {\n  constructor() {\n    super(\"No project information specified.\");\n    this.name = \"NoProjectInfoError\";\n  }\n\n}\n\nexports.NoProjectInfoError = NoProjectInfoError;","map":{"version":3,"sources":["../../lib/errors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,C,CAEA;AACA;AACA;;AACA;;AAEG;;;AACH,MAAa,aAAb,SAAmC,KAAnC,CAAwC;AAEtC,EAAA,WAAA,CAAY,KAAZ,EAAiD;AAC/C,UAAM,MAAM,CAAC,KAAP,CAAa,SAAb,CAAuB,OAAvB,CAA+B,KAA/B,CAAN;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,IAAL,GAAY,eAAZ;AACD;;AANqC;;AAAxC,OAAA,CAAA,aAAA,GAAA,aAAA,C,CASA;AACA;AACA;AACA;AACA;;AACA;;AAEG;;AACH,MAAa,iBAAb,SAAuC,KAAvC,CAA4C;AAG1C;AACA;AACA,EAAA,WAAA,CAAY,KAAZ,EAA+C,UAA/C,EAAmE;AACjE,UAAM,OAAO,GAAG,sBAAsB,KAAK,CAAC,IAAI,EAAhD,CADiE,CACb;AACpD;;AACA,UAAM,OAAN;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAAD,CAAzB;AACD;;AAXyC;;AAA5C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAcA;;AAEG;;AACH,SAAgB,mBAAhB,CACE,QADF,EAEE,KAFF,EAGyB;AAAA,MAAvB,MAAuB,uEAAL,KAAK;;AAEvB,MAAI,KAAK,YAAY,aAArB,EAAoC;AAClC;AACA,QAAI,MAAJ,EAAY;AACV;AACA,YAAM,IAAI,iBAAJ,CAAsB,KAAK,CAAC,KAA5B,CAAN;AACD,KAHD,MAGO;AACL;AACA,aAAkC;AAChC;AACA,QAAA,IAAI,EAAE,QAF0B;AAGhC,QAAA,IAAI,EAAE,OAH0B;AAIhC,QAAA,KAAK,EAAE,KAAK,CAAC;AAJmB,OAAlC;AAMD;AACF,GAdD,MAcO;AACL;AACA,UAAM,KAAN;AACD;AACF;;AAvBD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAyBA;;;;AAIG;;AACH,MAAa,kBAAb,SAAwC,KAAxC,CAA6C;AAC3C,EAAA,WAAA,GAAA;AACE,UAAM,mCAAN;AACA,SAAK,IAAL,GAAY,oBAAZ;AACD;;AAJ0C;;AAA7C,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoProjectInfoError = exports.handleDecodingError = exports.StopDecodingError = exports.DecodingError = void 0;\nconst Format = __importStar(require(\"./format\"));\n//For when we need to throw an error, here's a wrapper class that extends Error.\n//Apologies about the confusing name, but I wanted something that would make\n//sense should it not be caught and thus accidentally exposed to the outside.\n/**\n * @hidden\n */\nclass DecodingError extends Error {\n    constructor(error) {\n        super(Format.Utils.Exception.message(error));\n        this.error = error;\n        this.name = \"DecodingError\";\n    }\n}\nexports.DecodingError = DecodingError;\n//used to stop decoding; like DecodingError, but used in contexts\n//where I don't expect it to be caught\n//NOTE: currently we don't actually check the type of a thrown error,\n//we just rely on context.  still, I think it makes sense to be a separate\n//type.\n/**\n * @hidden\n */\nclass StopDecodingError extends Error {\n    //when decoding in full mode, we allow an ABI-mode retry.  (if we were already in\n    //ABI mode, we give up.)\n    constructor(error, allowRetry) {\n        const message = `Stopping decoding: ${error.kind}`; //sorry about the bare-bones message,\n        //but again, users shouldn't actually see this, so I think this should suffice for now\n        super(message);\n        this.error = error;\n        this.allowRetry = Boolean(allowRetry);\n    }\n}\nexports.StopDecodingError = StopDecodingError;\n/**\n * @hidden\n */\nfunction handleDecodingError(dataType, error, strict = false) {\n    if (error instanceof DecodingError) {\n        //expected error\n        if (strict) {\n            //strict mode -- stop decoding on errors\n            throw new StopDecodingError(error.error);\n        }\n        else {\n            //nonstrict mode -- return an error result\n            return {\n                //I don't know why TS's inference is failing here and needs the coercion\n                type: dataType,\n                kind: \"error\",\n                error: error.error\n            };\n        }\n    }\n    else {\n        //if it's *not* an expected error, we better not swallow it -- rethrow!\n        throw error;\n    }\n}\nexports.handleDecodingError = handleDecodingError;\n/**\n * This error indicates that the user attempted to instantiate a decoder\n * with no project information (by explicitly overriding the default).\n * @category Exception\n */\nclass NoProjectInfoError extends Error {\n    constructor() {\n        super(\"No project information specified.\");\n        this.name = \"NoProjectInfoError\";\n    }\n}\nexports.NoProjectInfoError = NoProjectInfoError;\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}