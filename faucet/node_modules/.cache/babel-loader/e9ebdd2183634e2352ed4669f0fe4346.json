{"ast":null,"code":"import { VerbosityLevel } from '../configuration/VerbosityLevel.js';\nimport { ExecutionStatus } from './ExecutionStatus.js';\nexport class RunExecution {\n  constructor(verbosity, interruptedAsFailure) {\n    this.verbosity = verbosity;\n    this.interruptedAsFailure = interruptedAsFailure;\n\n    this.isSuccess = () => this.pathToFailure == null;\n\n    this.firstFailure = () => this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1;\n\n    this.numShrinks = () => this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0;\n\n    this.rootExecutionTrees = [];\n    this.currentLevelExecutionTrees = this.rootExecutionTrees;\n    this.failure = null;\n    this.numSkips = 0;\n    this.numSuccesses = 0;\n    this.interrupted = false;\n  }\n\n  appendExecutionTree(status, value) {\n    const currentTree = {\n      status,\n      value,\n      children: []\n    };\n    this.currentLevelExecutionTrees.push(currentTree);\n    return currentTree;\n  }\n\n  fail(value, id, message) {\n    if (this.verbosity >= VerbosityLevel.Verbose) {\n      const currentTree = this.appendExecutionTree(ExecutionStatus.Failure, value);\n      this.currentLevelExecutionTrees = currentTree.children;\n    }\n\n    if (this.pathToFailure == null) this.pathToFailure = `${id}`;else this.pathToFailure += `:${id}`;\n    this.value = value;\n    this.failure = message;\n  }\n\n  skip(value) {\n    if (this.verbosity >= VerbosityLevel.VeryVerbose) {\n      this.appendExecutionTree(ExecutionStatus.Skipped, value);\n    }\n\n    if (this.pathToFailure == null) {\n      ++this.numSkips;\n    }\n  }\n\n  success(value) {\n    if (this.verbosity >= VerbosityLevel.VeryVerbose) {\n      this.appendExecutionTree(ExecutionStatus.Success, value);\n    }\n\n    if (this.pathToFailure == null) {\n      ++this.numSuccesses;\n    }\n  }\n\n  interrupt() {\n    this.interrupted = true;\n  }\n\n  extractFailures() {\n    if (this.isSuccess()) {\n      return [];\n    }\n\n    const failures = [];\n    let cursor = this.rootExecutionTrees;\n\n    while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus.Failure) {\n      const failureTree = cursor[cursor.length - 1];\n      failures.push(failureTree.value);\n      cursor = failureTree.children;\n    }\n\n    return failures;\n  }\n\n  toRunDetails(seed, basePath, maxSkips, qParams) {\n    if (!this.isSuccess()) {\n      return {\n        failed: true,\n        interrupted: this.interrupted,\n        numRuns: this.firstFailure() + 1 - this.numSkips,\n        numSkips: this.numSkips,\n        numShrinks: this.numShrinks(),\n        seed,\n        counterexample: this.value,\n        counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n        error: this.failure,\n        failures: this.extractFailures(),\n        executionSummary: this.rootExecutionTrees,\n        verbose: this.verbosity,\n        runConfiguration: qParams.toParameters()\n      };\n    }\n\n    const failed = this.numSkips > maxSkips || this.interrupted && this.interruptedAsFailure;\n    return {\n      failed,\n      interrupted: this.interrupted,\n      numRuns: this.numSuccesses,\n      numSkips: this.numSkips,\n      numShrinks: 0,\n      seed,\n      counterexample: null,\n      counterexamplePath: null,\n      error: null,\n      failures: [],\n      executionSummary: this.rootExecutionTrees,\n      verbose: this.verbosity,\n      runConfiguration: qParams.toParameters()\n    };\n  }\n\n}\n\nRunExecution.mergePaths = (offsetPath, path) => {\n  if (offsetPath.length === 0) return path;\n  const offsetItems = offsetPath.split(':');\n  const remainingItems = path.split(':');\n  const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n  return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/runner/reporter/RunExecution.js"],"names":["VerbosityLevel","ExecutionStatus","RunExecution","constructor","verbosity","interruptedAsFailure","isSuccess","pathToFailure","firstFailure","split","numShrinks","length","rootExecutionTrees","currentLevelExecutionTrees","failure","numSkips","numSuccesses","interrupted","appendExecutionTree","status","value","currentTree","children","push","fail","id","message","Verbose","Failure","skip","VeryVerbose","Skipped","success","Success","interrupt","extractFailures","failures","cursor","failureTree","toRunDetails","seed","basePath","maxSkips","qParams","failed","numRuns","counterexample","counterexamplePath","mergePaths","error","executionSummary","verbose","runConfiguration","toParameters","offsetPath","path","offsetItems","remainingItems","middle","slice","join"],"mappings":"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","sourcesContent":["import { VerbosityLevel } from '../configuration/VerbosityLevel.js';\nimport { ExecutionStatus } from './ExecutionStatus.js';\nexport class RunExecution {\n    constructor(verbosity, interruptedAsFailure) {\n        this.verbosity = verbosity;\n        this.interruptedAsFailure = interruptedAsFailure;\n        this.isSuccess = () => this.pathToFailure == null;\n        this.firstFailure = () => (this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1);\n        this.numShrinks = () => (this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0);\n        this.rootExecutionTrees = [];\n        this.currentLevelExecutionTrees = this.rootExecutionTrees;\n        this.failure = null;\n        this.numSkips = 0;\n        this.numSuccesses = 0;\n        this.interrupted = false;\n    }\n    appendExecutionTree(status, value) {\n        const currentTree = { status, value, children: [] };\n        this.currentLevelExecutionTrees.push(currentTree);\n        return currentTree;\n    }\n    fail(value, id, message) {\n        if (this.verbosity >= VerbosityLevel.Verbose) {\n            const currentTree = this.appendExecutionTree(ExecutionStatus.Failure, value);\n            this.currentLevelExecutionTrees = currentTree.children;\n        }\n        if (this.pathToFailure == null)\n            this.pathToFailure = `${id}`;\n        else\n            this.pathToFailure += `:${id}`;\n        this.value = value;\n        this.failure = message;\n    }\n    skip(value) {\n        if (this.verbosity >= VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus.Skipped, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSkips;\n        }\n    }\n    success(value) {\n        if (this.verbosity >= VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus.Success, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSuccesses;\n        }\n    }\n    interrupt() {\n        this.interrupted = true;\n    }\n    extractFailures() {\n        if (this.isSuccess()) {\n            return [];\n        }\n        const failures = [];\n        let cursor = this.rootExecutionTrees;\n        while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus.Failure) {\n            const failureTree = cursor[cursor.length - 1];\n            failures.push(failureTree.value);\n            cursor = failureTree.children;\n        }\n        return failures;\n    }\n    toRunDetails(seed, basePath, maxSkips, qParams) {\n        if (!this.isSuccess()) {\n            return {\n                failed: true,\n                interrupted: this.interrupted,\n                numRuns: this.firstFailure() + 1 - this.numSkips,\n                numSkips: this.numSkips,\n                numShrinks: this.numShrinks(),\n                seed,\n                counterexample: this.value,\n                counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n                error: this.failure,\n                failures: this.extractFailures(),\n                executionSummary: this.rootExecutionTrees,\n                verbose: this.verbosity,\n                runConfiguration: qParams.toParameters(),\n            };\n        }\n        const failed = this.numSkips > maxSkips || (this.interrupted && this.interruptedAsFailure);\n        return {\n            failed,\n            interrupted: this.interrupted,\n            numRuns: this.numSuccesses,\n            numSkips: this.numSkips,\n            numShrinks: 0,\n            seed,\n            counterexample: null,\n            counterexamplePath: null,\n            error: null,\n            failures: [],\n            executionSummary: this.rootExecutionTrees,\n            verbose: this.verbosity,\n            runConfiguration: qParams.toParameters(),\n        };\n    }\n}\nRunExecution.mergePaths = (offsetPath, path) => {\n    if (offsetPath.length === 0)\n        return path;\n    const offsetItems = offsetPath.split(':');\n    const remainingItems = path.split(':');\n    const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n    return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};\n"]},"metadata":{},"sourceType":"module"}