{"ast":null,"code":"import { unsafeUniformArrayIntDistribution, unsafeUniformBigIntDistribution, unsafeUniformIntDistribution } from 'pure-rand';\nimport { convertToRandomGenerator } from './PureRandom.js';\nexport class Random {\n  constructor(sourceRng) {\n    this.internalRng = convertToRandomGenerator(sourceRng).clone();\n  }\n\n  clone() {\n    return new Random(this.internalRng);\n  }\n\n  next(bits) {\n    return unsafeUniformIntDistribution(0, (1 << bits) - 1, this.internalRng);\n  }\n\n  nextBoolean() {\n    return unsafeUniformIntDistribution(0, 1, this.internalRng) == 1;\n  }\n\n  nextInt(min, max) {\n    return unsafeUniformIntDistribution(min == null ? Random.MIN_INT : min, max == null ? Random.MAX_INT : max, this.internalRng);\n  }\n\n  nextBigInt(min, max) {\n    return unsafeUniformBigIntDistribution(min, max, this.internalRng);\n  }\n\n  nextArrayInt(min, max) {\n    return unsafeUniformArrayIntDistribution(min, max, this.internalRng);\n  }\n\n  nextDouble() {\n    const a = this.next(26);\n    const b = this.next(27);\n    return (a * Random.DBL_FACTOR + b) * Random.DBL_DIVISOR;\n  }\n\n}\nRandom.MIN_INT = 0x80000000 | 0;\nRandom.MAX_INT = 0x7fffffff | 0;\nRandom.DBL_FACTOR = Math.pow(2, 27);\nRandom.DBL_DIVISOR = Math.pow(2, -53);","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/random/generator/Random.js"],"names":["unsafeUniformArrayIntDistribution","unsafeUniformBigIntDistribution","unsafeUniformIntDistribution","convertToRandomGenerator","Random","constructor","sourceRng","internalRng","clone","next","bits","nextBoolean","nextInt","min","max","MIN_INT","MAX_INT","nextBigInt","nextArrayInt","nextDouble","a","b","DBL_FACTOR","DBL_DIVISOR","Math","pow"],"mappings":"AAAA,SAASA,iCAAT,EAA4CC,+BAA5C,EAA6EC,4BAA7E,QAAkH,WAAlH;AACA,SAASC,wBAAT,QAAyC,iBAAzC;AACA,OAAO,MAAMC,MAAN,CAAa;AAChBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKC,WAAL,GAAmBJ,wBAAwB,CAACG,SAAD,CAAxB,CAAoCE,KAApC,EAAnB;AACH;;AACDA,EAAAA,KAAK,GAAG;AACJ,WAAO,IAAIJ,MAAJ,CAAW,KAAKG,WAAhB,CAAP;AACH;;AACDE,EAAAA,IAAI,CAACC,IAAD,EAAO;AACP,WAAOR,4BAA4B,CAAC,CAAD,EAAI,CAAC,KAAKQ,IAAN,IAAc,CAAlB,EAAqB,KAAKH,WAA1B,CAAnC;AACH;;AACDI,EAAAA,WAAW,GAAG;AACV,WAAOT,4BAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAKK,WAAZ,CAA5B,IAAwD,CAA/D;AACH;;AACDK,EAAAA,OAAO,CAACC,GAAD,EAAMC,GAAN,EAAW;AACd,WAAOZ,4BAA4B,CAACW,GAAG,IAAI,IAAP,GAAcT,MAAM,CAACW,OAArB,GAA+BF,GAAhC,EAAqCC,GAAG,IAAI,IAAP,GAAcV,MAAM,CAACY,OAArB,GAA+BF,GAApE,EAAyE,KAAKP,WAA9E,CAAnC;AACH;;AACDU,EAAAA,UAAU,CAACJ,GAAD,EAAMC,GAAN,EAAW;AACjB,WAAOb,+BAA+B,CAACY,GAAD,EAAMC,GAAN,EAAW,KAAKP,WAAhB,CAAtC;AACH;;AACDW,EAAAA,YAAY,CAACL,GAAD,EAAMC,GAAN,EAAW;AACnB,WAAOd,iCAAiC,CAACa,GAAD,EAAMC,GAAN,EAAW,KAAKP,WAAhB,CAAxC;AACH;;AACDY,EAAAA,UAAU,GAAG;AACT,UAAMC,CAAC,GAAG,KAAKX,IAAL,CAAU,EAAV,CAAV;AACA,UAAMY,CAAC,GAAG,KAAKZ,IAAL,CAAU,EAAV,CAAV;AACA,WAAO,CAACW,CAAC,GAAGhB,MAAM,CAACkB,UAAX,GAAwBD,CAAzB,IAA8BjB,MAAM,CAACmB,WAA5C;AACH;;AA1Be;AA4BpBnB,MAAM,CAACW,OAAP,GAAiB,aAAa,CAA9B;AACAX,MAAM,CAACY,OAAP,GAAiB,aAAa,CAA9B;AACAZ,MAAM,CAACkB,UAAP,GAAoBE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAApB;AACArB,MAAM,CAACmB,WAAP,GAAqBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAC,EAAb,CAArB","sourcesContent":["import { unsafeUniformArrayIntDistribution, unsafeUniformBigIntDistribution, unsafeUniformIntDistribution, } from 'pure-rand';\nimport { convertToRandomGenerator } from './PureRandom.js';\nexport class Random {\n    constructor(sourceRng) {\n        this.internalRng = convertToRandomGenerator(sourceRng).clone();\n    }\n    clone() {\n        return new Random(this.internalRng);\n    }\n    next(bits) {\n        return unsafeUniformIntDistribution(0, (1 << bits) - 1, this.internalRng);\n    }\n    nextBoolean() {\n        return unsafeUniformIntDistribution(0, 1, this.internalRng) == 1;\n    }\n    nextInt(min, max) {\n        return unsafeUniformIntDistribution(min == null ? Random.MIN_INT : min, max == null ? Random.MAX_INT : max, this.internalRng);\n    }\n    nextBigInt(min, max) {\n        return unsafeUniformBigIntDistribution(min, max, this.internalRng);\n    }\n    nextArrayInt(min, max) {\n        return unsafeUniformArrayIntDistribution(min, max, this.internalRng);\n    }\n    nextDouble() {\n        const a = this.next(26);\n        const b = this.next(27);\n        return (a * Random.DBL_FACTOR + b) * Random.DBL_DIVISOR;\n    }\n}\nRandom.MIN_INT = 0x80000000 | 0;\nRandom.MAX_INT = 0x7fffffff | 0;\nRandom.DBL_FACTOR = Math.pow(2, 27);\nRandom.DBL_DIVISOR = Math.pow(2, -53);\n"]},"metadata":{},"sourceType":"module"}