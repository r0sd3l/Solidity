{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { extractStringConstraints } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\n\nfunction base64String() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = extractStringConstraints(args);\n  const {\n    minLength: unscaledMinLength = 0,\n    maxLength: unscaledMaxLength = MaxLengthUpperBound,\n    size\n  } = constraints;\n  const minLength = unscaledMinLength + 3 - (unscaledMinLength + 3) % 4;\n  const maxLength = unscaledMaxLength - unscaledMaxLength % 4;\n  const requestedSize = constraints.maxLength === undefined && size === undefined ? '=' : size;\n  if (minLength > maxLength) throw new Error('Minimal length should be inferior or equal to maximal length');\n  if (minLength % 4 !== 0) throw new Error('Minimal length of base64 strings must be a multiple of 4');\n  if (maxLength % 4 !== 0) throw new Error('Maximal length of base64 strings must be a multiple of 4');\n  return convertFromNext(convertToNext(array(base64(), {\n    minLength,\n    maxLength,\n    size: requestedSize\n  })).map(codePointsToStringMapper, codePointsToStringUnmapper).map(stringToBase64Mapper, stringToBase64Unmapper));\n}\n\nexport { base64String };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/base64String.js"],"names":["convertFromNext","convertToNext","array","base64","MaxLengthUpperBound","extractStringConstraints","codePointsToStringMapper","codePointsToStringUnmapper","stringToBase64Mapper","stringToBase64Unmapper","base64String","args","constraints","minLength","unscaledMinLength","maxLength","unscaledMaxLength","size","requestedSize","undefined","Error","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,gDAApC;AACA,SAASC,wBAAT,QAA0C,oDAA1C;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,QAA6D,wCAA7D;;AACA,SAASC,YAAT,GAA+B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC3B,QAAMC,WAAW,GAAGP,wBAAwB,CAACM,IAAD,CAA5C;AACA,QAAM;AAAEE,IAAAA,SAAS,EAAEC,iBAAiB,GAAG,CAAjC;AAAoCC,IAAAA,SAAS,EAAEC,iBAAiB,GAAGZ,mBAAnE;AAAwFa,IAAAA;AAAxF,MAAiGL,WAAvG;AACA,QAAMC,SAAS,GAAGC,iBAAiB,GAAG,CAApB,GAAyB,CAACA,iBAAiB,GAAG,CAArB,IAA0B,CAArE;AACA,QAAMC,SAAS,GAAGC,iBAAiB,GAAIA,iBAAiB,GAAG,CAA3D;AACA,QAAME,aAAa,GAAGN,WAAW,CAACG,SAAZ,KAA0BI,SAA1B,IAAuCF,IAAI,KAAKE,SAAhD,GAA4D,GAA5D,GAAkEF,IAAxF;AACA,MAAIJ,SAAS,GAAGE,SAAhB,EACI,MAAM,IAAIK,KAAJ,CAAU,8DAAV,CAAN;AACJ,MAAIP,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EACI,MAAM,IAAIO,KAAJ,CAAU,0DAAV,CAAN;AACJ,MAAIL,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EACI,MAAM,IAAIK,KAAJ,CAAU,0DAAV,CAAN;AACJ,SAAOpB,eAAe,CAACC,aAAa,CAACC,KAAK,CAACC,MAAM,EAAP,EAAW;AAAEU,IAAAA,SAAF;AAAaE,IAAAA,SAAb;AAAwBE,IAAAA,IAAI,EAAEC;AAA9B,GAAX,CAAN,CAAb,CAClBG,GADkB,CACdf,wBADc,EACYC,0BADZ,EAElBc,GAFkB,CAEdb,oBAFc,EAEQC,sBAFR,CAAD,CAAtB;AAGH;;AACD,SAASC,YAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\nfunction base64String(...args) {\n    const constraints = extractStringConstraints(args);\n    const { minLength: unscaledMinLength = 0, maxLength: unscaledMaxLength = MaxLengthUpperBound, size } = constraints;\n    const minLength = unscaledMinLength + 3 - ((unscaledMinLength + 3) % 4);\n    const maxLength = unscaledMaxLength - (unscaledMaxLength % 4);\n    const requestedSize = constraints.maxLength === undefined && size === undefined ? '=' : size;\n    if (minLength > maxLength)\n        throw new Error('Minimal length should be inferior or equal to maximal length');\n    if (minLength % 4 !== 0)\n        throw new Error('Minimal length of base64 strings must be a multiple of 4');\n    if (maxLength % 4 !== 0)\n        throw new Error('Maximal length of base64 strings must be a multiple of 4');\n    return convertFromNext(convertToNext(array(base64(), { minLength, maxLength, size: requestedSize }))\n        .map(codePointsToStringMapper, codePointsToStringUnmapper)\n        .map(stringToBase64Mapper, stringToBase64Unmapper));\n}\nexport { base64String };\n"]},"metadata":{},"sourceType":"module"}