{"ast":null,"code":"import { buildAlphaNumericPercentArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { constant } from './constant.js';\nimport { domain } from './domain.js';\nimport { ipV4 } from './ipV4.js';\nimport { ipV4Extended } from './ipV4Extended.js';\nimport { ipV6 } from './ipV6.js';\nimport { nat } from './nat.js';\nimport { oneof } from './oneof.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction hostUserInfo(size) {\n  const others = ['-', '.', '_', '~', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ':'];\n  return stringOf(buildAlphaNumericPercentArbitrary(others), {\n    size\n  });\n}\n\nfunction userHostPortMapper(_ref) {\n  let [u, h, p] = _ref;\n  return (u === null ? '' : `${u}@`) + h + (p === null ? '' : `:${p}`);\n}\n\nfunction userHostPortUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  const atPosition = value.indexOf('@');\n  const user = atPosition !== -1 ? value.substring(0, atPosition) : null;\n  const portRegex = /:(\\d+)$/;\n  const m = portRegex.exec(value);\n  const port = m !== null ? Number(m[1]) : null;\n  const host = m !== null ? value.substring(atPosition + 1, value.length - m[1].length - 1) : value.substring(atPosition + 1);\n  return [user, host, port];\n}\n\nfunction bracketedMapper(s) {\n  return `[${s}]`;\n}\n\nfunction bracketedUnmapper(value) {\n  if (typeof value !== 'string' || value[0] !== '[' || value[value.length - 1] !== ']') {\n    throw new Error('Unsupported');\n  }\n\n  return value.substring(1, value.length - 1);\n}\n\nexport function webAuthority(constraints) {\n  const c = constraints || {};\n  const size = c.size;\n  const hostnameArbs = [domain({\n    size\n  })].concat(c.withIPv4 === true ? [ipV4()] : []).concat(c.withIPv6 === true ? [convertFromNext(convertToNext(ipV6()).map(bracketedMapper, bracketedUnmapper))] : []).concat(c.withIPv4Extended === true ? [ipV4Extended()] : []);\n  return convertFromNext(convertToNext(tuple(c.withUserInfo === true ? option(hostUserInfo(size)) : constant(null), oneof(...hostnameArbs), c.withPort === true ? option(nat(65535)) : constant(null))).map(userHostPortMapper, userHostPortUnmapper));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/webAuthority.js"],"names":["buildAlphaNumericPercentArbitrary","constant","domain","ipV4","ipV4Extended","ipV6","nat","oneof","option","stringOf","tuple","convertFromNext","convertToNext","hostUserInfo","size","others","userHostPortMapper","u","h","p","userHostPortUnmapper","value","Error","atPosition","indexOf","user","substring","portRegex","m","exec","port","Number","host","length","bracketedMapper","s","bracketedUnmapper","webAuthority","constraints","c","hostnameArbs","concat","withIPv4","withIPv6","map","withIPv4Extended","withUserInfo","withPort"],"mappings":"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","sourcesContent":["import { buildAlphaNumericPercentArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { constant } from './constant.js';\nimport { domain } from './domain.js';\nimport { ipV4 } from './ipV4.js';\nimport { ipV4Extended } from './ipV4Extended.js';\nimport { ipV6 } from './ipV6.js';\nimport { nat } from './nat.js';\nimport { oneof } from './oneof.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nfunction hostUserInfo(size) {\n    const others = ['-', '.', '_', '~', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ':'];\n    return stringOf(buildAlphaNumericPercentArbitrary(others), { size });\n}\nfunction userHostPortMapper([u, h, p]) {\n    return (u === null ? '' : `${u}@`) + h + (p === null ? '' : `:${p}`);\n}\nfunction userHostPortUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    const atPosition = value.indexOf('@');\n    const user = atPosition !== -1 ? value.substring(0, atPosition) : null;\n    const portRegex = /:(\\d+)$/;\n    const m = portRegex.exec(value);\n    const port = m !== null ? Number(m[1]) : null;\n    const host = m !== null ? value.substring(atPosition + 1, value.length - m[1].length - 1) : value.substring(atPosition + 1);\n    return [user, host, port];\n}\nfunction bracketedMapper(s) {\n    return `[${s}]`;\n}\nfunction bracketedUnmapper(value) {\n    if (typeof value !== 'string' || value[0] !== '[' || value[value.length - 1] !== ']') {\n        throw new Error('Unsupported');\n    }\n    return value.substring(1, value.length - 1);\n}\nexport function webAuthority(constraints) {\n    const c = constraints || {};\n    const size = c.size;\n    const hostnameArbs = [domain({ size })]\n        .concat(c.withIPv4 === true ? [ipV4()] : [])\n        .concat(c.withIPv6 === true ? [convertFromNext(convertToNext(ipV6()).map(bracketedMapper, bracketedUnmapper))] : [])\n        .concat(c.withIPv4Extended === true ? [ipV4Extended()] : []);\n    return convertFromNext(convertToNext(tuple(c.withUserInfo === true ? option(hostUserInfo(size)) : constant(null), oneof(...hostnameArbs), c.withPort === true ? option(nat(65535)) : constant(null))).map(userHostPortMapper, userHostPortUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}