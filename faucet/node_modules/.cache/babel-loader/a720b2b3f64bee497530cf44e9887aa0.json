{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { hexa } from './hexa.js';\nimport { extractStringConstraints } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\n\nfunction hexaString() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = extractStringConstraints(args);\n  return convertFromNext(convertToNext(array(hexa(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\n\nexport { hexaString };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/hexaString.js"],"names":["convertFromNext","convertToNext","array","hexa","extractStringConstraints","codePointsToStringMapper","codePointsToStringUnmapper","hexaString","args","constraints","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,wBAAT,QAA0C,oDAA1C;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;;AACA,SAASC,UAAT,GAA6B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACzB,QAAMC,WAAW,GAAGL,wBAAwB,CAACI,IAAD,CAA5C;AACA,SAAOR,eAAe,CAACC,aAAa,CAACC,KAAK,CAACC,IAAI,EAAL,EAASM,WAAT,CAAN,CAAb,CAA0CC,GAA1C,CAA8CL,wBAA9C,EAAwEC,0BAAxE,CAAD,CAAtB;AACH;;AACD,SAASC,UAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { hexa } from './hexa.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nfunction hexaString(...args) {\n    const constraints = extractStringConstraints(args);\n    return convertFromNext(convertToNext(array(hexa(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\nexport { hexaString };\n"]},"metadata":{},"sourceType":"module"}