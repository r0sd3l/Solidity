{"ast":null,"code":"export function partsToUrlMapper(data) {\n  const [scheme, authority, path] = data;\n  const query = data[3] === null ? '' : `?${data[3]}`;\n  const fragments = data[4] === null ? '' : `#${data[4]}`;\n  return `${scheme}://${authority}${path}${query}${fragments}`;\n}\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nexport function partsToUrlUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Incompatible value received: type');\n  }\n\n  const m = UrlSplitRegex.exec(value);\n\n  if (m === null) {\n    throw new Error('Incompatible value received');\n  }\n\n  const scheme = m[1];\n  const authority = m[2];\n  const path = m[3];\n  const query = m[4];\n  const fragments = m[5];\n  return [scheme, authority, path, query !== undefined ? query.substring(1) : null, fragments !== undefined ? fragments.substring(1) : null];\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/PartsToUrl.js"],"names":["partsToUrlMapper","data","scheme","authority","path","query","fragments","UrlSplitRegex","partsToUrlUnmapper","value","Error","m","exec","undefined","substring"],"mappings":"AAAA,OAAO,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,EAAoBC,IAApB,IAA4BH,IAAlC;AACA,QAAMI,KAAK,GAAGJ,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAZ,GAAmB,EAAnB,GAAyB,IAAGA,IAAI,CAAC,CAAD,CAAI,EAAlD;AACA,QAAMK,SAAS,GAAGL,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAZ,GAAmB,EAAnB,GAAyB,IAAGA,IAAI,CAAC,CAAD,CAAI,EAAtD;AACA,SAAQ,GAAEC,MAAO,MAAKC,SAAU,GAAEC,IAAK,GAAEC,KAAM,GAAEC,SAAU,EAA3D;AACH;AACD,MAAMC,aAAa,GAAG,+HAAtB;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACD,QAAMC,CAAC,GAAGJ,aAAa,CAACK,IAAd,CAAmBH,KAAnB,CAAV;;AACA,MAAIE,CAAC,KAAK,IAAV,EAAgB;AACZ,UAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;AACH;;AACD,QAAMR,MAAM,GAAGS,CAAC,CAAC,CAAD,CAAhB;AACA,QAAMR,SAAS,GAAGQ,CAAC,CAAC,CAAD,CAAnB;AACA,QAAMP,IAAI,GAAGO,CAAC,CAAC,CAAD,CAAd;AACA,QAAMN,KAAK,GAAGM,CAAC,CAAC,CAAD,CAAf;AACA,QAAML,SAAS,GAAGK,CAAC,CAAC,CAAD,CAAnB;AACA,SAAO,CACHT,MADG,EAEHC,SAFG,EAGHC,IAHG,EAIHC,KAAK,KAAKQ,SAAV,GAAsBR,KAAK,CAACS,SAAN,CAAgB,CAAhB,CAAtB,GAA2C,IAJxC,EAKHR,SAAS,KAAKO,SAAd,GAA0BP,SAAS,CAACQ,SAAV,CAAoB,CAApB,CAA1B,GAAmD,IALhD,CAAP;AAOH","sourcesContent":["export function partsToUrlMapper(data) {\n    const [scheme, authority, path] = data;\n    const query = data[3] === null ? '' : `?${data[3]}`;\n    const fragments = data[4] === null ? '' : `#${data[4]}`;\n    return `${scheme}://${authority}${path}${query}${fragments}`;\n}\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nexport function partsToUrlUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Incompatible value received: type');\n    }\n    const m = UrlSplitRegex.exec(value);\n    if (m === null) {\n        throw new Error('Incompatible value received');\n    }\n    const scheme = m[1];\n    const authority = m[2];\n    const path = m[3];\n    const query = m[4];\n    const fragments = m[5];\n    return [\n        scheme,\n        authority,\n        path,\n        query !== undefined ? query.substring(1) : null,\n        fragments !== undefined ? fragments.substring(1) : null,\n    ];\n}\n"]},"metadata":{},"sourceType":"module"}