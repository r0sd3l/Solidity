{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nexport class ArrayArbitrary extends NextArbitrary {\n  constructor(arb, minLength, maxGeneratedLength, maxLength, setBuilder) {\n    super();\n    this.arb = arb;\n    this.minLength = minLength;\n    this.maxGeneratedLength = maxGeneratedLength;\n    this.maxLength = maxLength;\n    this.setBuilder = setBuilder;\n    this.lengthArb = convertToNext(integer(minLength, maxGeneratedLength));\n  }\n\n  preFilter(tab) {\n    if (this.setBuilder === undefined) {\n      return tab;\n    }\n\n    const s = this.setBuilder();\n\n    for (let index = 0; index !== tab.length; ++index) {\n      s.tryAdd(tab[index]);\n    }\n\n    return s.getData();\n  }\n\n  static makeItCloneable(vs, shrinkables) {\n    vs[cloneMethod] = () => {\n      const cloned = [];\n\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n\n    return vs;\n  }\n\n  generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    let numSkippedInRow = 0;\n    const s = setBuilder();\n\n    while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n      const current = this.arb.generate(mrng, biasFactorItems);\n\n      if (s.tryAdd(current)) {\n        numSkippedInRow = 0;\n      } else {\n        numSkippedInRow += 1;\n      }\n    }\n\n    return s.getData();\n  }\n\n  generateNItems(N, mrng, biasFactorItems) {\n    const items = [];\n\n    for (let index = 0; index !== N; ++index) {\n      const current = this.arb.generate(mrng, biasFactorItems);\n      items.push(current);\n    }\n\n    return items;\n  }\n\n  wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n    const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n    let cloneable = false;\n    const vs = [];\n    const itemsContexts = [];\n\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      itemsContexts.push(s.context);\n    }\n\n    if (cloneable) {\n      ArrayArbitrary.makeItCloneable(vs, items);\n    }\n\n    const context = {\n      shrunkOnce,\n      lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,\n      itemsContexts,\n      startIndex\n    };\n    return new NextValue(vs, context);\n  }\n\n  generate(mrng, biasFactor) {\n    const biasMeta = this.applyBias(mrng, biasFactor);\n    const targetSize = biasMeta.size;\n    const items = this.setBuilder !== undefined ? this.generateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems) : this.generateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n    return this.wrapper(items, false, undefined, 0);\n  }\n\n  applyBias(mrng, biasFactor) {\n    if (biasFactor === undefined) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    const maxBiasedLength = this.minLength + Math.floor(Math.log(this.maxGeneratedLength - this.minLength) / Math.log(2));\n    const targetSizeValue = convertToNext(integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n    return {\n      size: targetSizeValue.value,\n      biasFactorItems: biasFactor\n    };\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n      return false;\n    }\n\n    for (let index = 0; index !== value.length; ++index) {\n      if (!(index in value)) {\n        return false;\n      }\n\n      if (!this.arb.canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n\n    const filtered = this.preFilter(value.map(item => new NextValue(item, undefined)));\n    return filtered.length === value.length;\n  }\n\n  shrinkItemByItem(value, safeContext, endIndex) {\n    let shrinks = Stream.nil();\n\n    for (let index = safeContext.startIndex; index < endIndex; ++index) {\n      shrinks = shrinks.join(makeLazy(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map(v => {\n        const beforeCurrent = value.slice(0, index).map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i]));\n        const afterCurrent = value.slice(index + 1).map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]));\n        return [beforeCurrent.concat(v).concat(afterCurrent), undefined, index];\n      })));\n    }\n\n    return shrinks;\n  }\n\n  shrinkImpl(value, context) {\n    if (value.length === 0) {\n      return Stream.nil();\n    }\n\n    const safeContext = context !== undefined ? context : {\n      shrunkOnce: false,\n      lengthContext: undefined,\n      itemsContexts: [],\n      startIndex: 0\n    };\n    return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map(lengthValue => {\n      const sliceStart = value.length - lengthValue.value;\n      return [value.slice(sliceStart).map((v, index) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])), lengthValue.context, 0];\n    }).join(makeLazy(() => value.length > this.minLength ? this.shrinkItemByItem(value, safeContext, 1) : this.shrinkItemByItem(value, safeContext, value.length))).join(value.length > this.minLength ? makeLazy(() => {\n      const subContext = {\n        shrunkOnce: false,\n        lengthContext: undefined,\n        itemsContexts: safeContext.itemsContexts.slice(1),\n        startIndex: 0\n      };\n      return this.shrinkImpl(value.slice(1), subContext).filter(v => this.minLength <= v[0].length + 1).map(v => {\n        return [[new NextValue(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]), undefined, 0];\n      });\n    }) : Stream.nil());\n  }\n\n  shrink(value, context) {\n    return this.shrinkImpl(value, context).map(contextualValue => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayArbitrary.js"],"names":["Stream","cloneIfNeeded","cloneMethod","integer","makeLazy","NextArbitrary","convertToNext","NextValue","ArrayArbitrary","constructor","arb","minLength","maxGeneratedLength","maxLength","setBuilder","lengthArb","preFilter","tab","undefined","s","index","length","tryAdd","getData","makeItCloneable","vs","shrinkables","cloned","idx","push","value","generateNItemsNoDuplicates","N","mrng","biasFactorItems","numSkippedInRow","size","current","generate","generateNItems","items","wrapper","itemsRaw","shrunkOnce","itemsRawLengthContext","startIndex","cloneable","itemsContexts","hasToBeCloned","context","lengthContext","biasFactor","biasMeta","applyBias","targetSize","nextInt","maxBiasedLength","Math","floor","log","targetSizeValue","canShrinkWithoutContext","Array","isArray","filtered","map","item","shrinkItemByItem","safeContext","endIndex","shrinks","nil","join","shrink","v","beforeCurrent","slice","i","afterCurrent","concat","shrinkImpl","drop","lengthValue","sliceStart","subContext","filter","contextualValue"],"mappings":"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","sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nexport class ArrayArbitrary extends NextArbitrary {\n    constructor(arb, minLength, maxGeneratedLength, maxLength, setBuilder) {\n        super();\n        this.arb = arb;\n        this.minLength = minLength;\n        this.maxGeneratedLength = maxGeneratedLength;\n        this.maxLength = maxLength;\n        this.setBuilder = setBuilder;\n        this.lengthArb = convertToNext(integer(minLength, maxGeneratedLength));\n    }\n    preFilter(tab) {\n        if (this.setBuilder === undefined) {\n            return tab;\n        }\n        const s = this.setBuilder();\n        for (let index = 0; index !== tab.length; ++index) {\n            s.tryAdd(tab[index]);\n        }\n        return s.getData();\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        let numSkippedInRow = 0;\n        const s = setBuilder();\n        while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n            const current = this.arb.generate(mrng, biasFactorItems);\n            if (s.tryAdd(current)) {\n                numSkippedInRow = 0;\n            }\n            else {\n                numSkippedInRow += 1;\n            }\n        }\n        return s.getData();\n    }\n    generateNItems(N, mrng, biasFactorItems) {\n        const items = [];\n        for (let index = 0; index !== N; ++index) {\n            const current = this.arb.generate(mrng, biasFactorItems);\n            items.push(current);\n        }\n        return items;\n    }\n    wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n        const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n        let cloneable = false;\n        const vs = [];\n        const itemsContexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            itemsContexts.push(s.context);\n        }\n        if (cloneable) {\n            ArrayArbitrary.makeItCloneable(vs, items);\n        }\n        const context = {\n            shrunkOnce,\n            lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined\n                ? itemsRawLengthContext\n                : undefined,\n            itemsContexts,\n            startIndex,\n        };\n        return new NextValue(vs, context);\n    }\n    generate(mrng, biasFactor) {\n        const biasMeta = this.applyBias(mrng, biasFactor);\n        const targetSize = biasMeta.size;\n        const items = this.setBuilder !== undefined\n            ? this.generateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems)\n            : this.generateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n        return this.wrapper(items, false, undefined, 0);\n    }\n    applyBias(mrng, biasFactor) {\n        if (biasFactor === undefined) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        const maxBiasedLength = this.minLength + Math.floor(Math.log(this.maxGeneratedLength - this.minLength) / Math.log(2));\n        const targetSizeValue = convertToNext(integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n        return { size: targetSizeValue.value, biasFactorItems: biasFactor };\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n            return false;\n        }\n        for (let index = 0; index !== value.length; ++index) {\n            if (!(index in value)) {\n                return false;\n            }\n            if (!this.arb.canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        const filtered = this.preFilter(value.map((item) => new NextValue(item, undefined)));\n        return filtered.length === value.length;\n    }\n    shrinkItemByItem(value, safeContext, endIndex) {\n        let shrinks = Stream.nil();\n        for (let index = safeContext.startIndex; index < endIndex; ++index) {\n            shrinks = shrinks.join(makeLazy(() => this.arb\n                .shrink(value[index], safeContext.itemsContexts[index])\n                .map((v) => {\n                const beforeCurrent = value\n                    .slice(0, index)\n                    .map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i]));\n                const afterCurrent = value\n                    .slice(index + 1)\n                    .map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]));\n                return [\n                    beforeCurrent.concat(v).concat(afterCurrent),\n                    undefined,\n                    index,\n                ];\n            })));\n        }\n        return shrinks;\n    }\n    shrinkImpl(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        const safeContext = context !== undefined\n            ? context\n            : { shrunkOnce: false, lengthContext: undefined, itemsContexts: [], startIndex: 0 };\n        return (this.lengthArb\n            .shrink(value.length, safeContext.lengthContext)\n            .drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0)\n            .map((lengthValue) => {\n            const sliceStart = value.length - lengthValue.value;\n            return [\n                value\n                    .slice(sliceStart)\n                    .map((v, index) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])),\n                lengthValue.context,\n                0,\n            ];\n        })\n            .join(makeLazy(() => value.length > this.minLength\n            ? this.shrinkItemByItem(value, safeContext, 1)\n            : this.shrinkItemByItem(value, safeContext, value.length)))\n            .join(value.length > this.minLength\n            ? makeLazy(() => {\n                const subContext = {\n                    shrunkOnce: false,\n                    lengthContext: undefined,\n                    itemsContexts: safeContext.itemsContexts.slice(1),\n                    startIndex: 0,\n                };\n                return this.shrinkImpl(value.slice(1), subContext)\n                    .filter((v) => this.minLength <= v[0].length + 1)\n                    .map((v) => {\n                    return [\n                        [new NextValue(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]),\n                        undefined,\n                        0,\n                    ];\n                });\n            })\n            : Stream.nil()));\n    }\n    shrink(value, context) {\n        return this.shrinkImpl(value, context).map((contextualValue) => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}