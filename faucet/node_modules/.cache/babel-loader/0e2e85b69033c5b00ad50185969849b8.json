{"ast":null,"code":"export class SourceValuesIterator {\n  constructor(initialValues, maxInitialIterations, remainingSkips) {\n    this.initialValues = initialValues;\n    this.maxInitialIterations = maxInitialIterations;\n    this.remainingSkips = remainingSkips;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n\n  next() {\n    if (--this.maxInitialIterations !== -1 && this.remainingSkips >= 0) {\n      const n = this.initialValues.next();\n      if (!n.done) return {\n        value: n.value(),\n        done: false\n      };\n    }\n\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  skippedOne() {\n    --this.remainingSkips;\n    ++this.maxInitialIterations;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/runner/SourceValuesIterator.js"],"names":["SourceValuesIterator","constructor","initialValues","maxInitialIterations","remainingSkips","Symbol","iterator","next","n","done","value","undefined","skippedOne"],"mappings":"AAAA,OAAO,MAAMA,oBAAN,CAA2B;AAC9BC,EAAAA,WAAW,CAACC,aAAD,EAAgBC,oBAAhB,EAAsCC,cAAtC,EAAsD;AAC7D,SAAKF,aAAL,GAAqBA,aAArB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;;AACe,GAAfC,MAAM,CAACC,QAAQ,IAAI;AAChB,WAAO,IAAP;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,QAAI,EAAE,KAAKJ,oBAAP,KAAgC,CAAC,CAAjC,IAAsC,KAAKC,cAAL,IAAuB,CAAjE,EAAoE;AAChE,YAAMI,CAAC,GAAG,KAAKN,aAAL,CAAmBK,IAAnB,EAAV;AACA,UAAI,CAACC,CAAC,CAACC,IAAP,EACI,OAAO;AAAEC,QAAAA,KAAK,EAAEF,CAAC,CAACE,KAAF,EAAT;AAAoBD,QAAAA,IAAI,EAAE;AAA1B,OAAP;AACP;;AACD,WAAO;AAAEC,MAAAA,KAAK,EAAEC,SAAT;AAAoBF,MAAAA,IAAI,EAAE;AAA1B,KAAP;AACH;;AACDG,EAAAA,UAAU,GAAG;AACT,MAAE,KAAKR,cAAP;AACA,MAAE,KAAKD,oBAAP;AACH;;AApB6B","sourcesContent":["export class SourceValuesIterator {\n    constructor(initialValues, maxInitialIterations, remainingSkips) {\n        this.initialValues = initialValues;\n        this.maxInitialIterations = maxInitialIterations;\n        this.remainingSkips = remainingSkips;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        if (--this.maxInitialIterations !== -1 && this.remainingSkips >= 0) {\n            const n = this.initialValues.next();\n            if (!n.done)\n                return { value: n.value(), done: false };\n        }\n        return { value: undefined, done: true };\n    }\n    skippedOne() {\n        --this.remainingSkips;\n        ++this.maxInitialIterations;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}