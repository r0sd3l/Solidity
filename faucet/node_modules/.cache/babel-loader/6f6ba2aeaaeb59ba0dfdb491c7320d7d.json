{"ast":null,"code":"import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { frequency } from '../../frequency.js';\nimport { oneof } from '../../oneof.js';\nimport { set } from '../../set.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\n\nfunction entriesOf(keyArb, valueArb, maxKeys, size) {\n  return convertToNext(set(tuple(keyArb, valueArb), {\n    maxLength: maxKeys,\n    size,\n    compare: {\n      type: 'SameValueZero',\n      selector: t => t[0]\n    }\n  }));\n}\n\nfunction mapOf(ka, va, maxKeys, size) {\n  return convertFromNext(entriesOf(ka, va, maxKeys, size).map(arrayToMapMapper, arrayToMapUnmapper));\n}\n\nfunction dictOf(ka, va, maxKeys, size) {\n  return convertFromNext(entriesOf(ka, va, maxKeys, size).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\n\nfunction setOf(va, maxKeys, size) {\n  return convertFromNext(convertToNext(set(va, {\n    maxLength: maxKeys,\n    size,\n    compare: {\n      type: 'SameValueZero'\n    }\n  })).map(arrayToSetMapper, arrayToSetUnmapper));\n}\n\nfunction prototypeLessOf(objectArb) {\n  return convertFromNext(convertToNext(objectArb).map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper));\n}\n\nfunction typedArray(constraints) {\n  return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\n\nexport function anyArbitraryBuilder(constraints) {\n  const arbitrariesForBase = constraints.values;\n  const depthFactor = constraints.depthFactor;\n  const maxDepth = constraints.maxDepth;\n  const maxKeys = constraints.maxKeys;\n  const size = constraints.size;\n  const baseArb = oneof(...arbitrariesForBase);\n  return letrec(tie => ({\n    anything: oneof({\n      maxDepth,\n      depthFactor\n    }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map(o => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []), ...(constraints.withTypedArray ? [typedArray({\n      maxLength: maxKeys,\n      size\n    })] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), {\n      maxNumElements: maxKeys,\n      size\n    })] : [])),\n    keys: constraints.withObjectString ? frequency({\n      arbitrary: constraints.key,\n      weight: 10\n    }, {\n      arbitrary: tie('anything').map(o => stringify(o)),\n      weight: 1\n    }) : constraints.key,\n    arrayBase: oneof(...arbitrariesForBase.map(arb => array(arb, {\n      maxLength: maxKeys,\n      size\n    }))),\n    array: oneof(tie('arrayBase'), array(tie('anything'), {\n      maxLength: maxKeys,\n      size\n    })),\n    setBase: oneof(...arbitrariesForBase.map(arb => setOf(arb, maxKeys, size))),\n    set: oneof(tie('setBase'), setOf(tie('anything'), maxKeys, size)),\n    mapBase: oneof(...arbitrariesForBase.map(arb => mapOf(tie('keys'), arb, maxKeys, size))),\n    map: oneof(tie('mapBase'), oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size), mapOf(tie('anything'), tie('anything'), maxKeys, size))),\n    objectBase: oneof(...arbitrariesForBase.map(arb => dictOf(tie('keys'), arb, maxKeys, size))),\n    object: oneof(tie('objectBase'), dictOf(tie('keys'), tie('anything'), maxKeys, size))\n  })).anything;\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/AnyArbitraryBuilder.js"],"names":["stringify","array","frequency","oneof","set","tuple","bigInt","date","float32Array","float64Array","int16Array","int32Array","int8Array","uint16Array","uint32Array","uint8Array","uint8ClampedArray","sparseArray","keyValuePairsToObjectMapper","keyValuePairsToObjectUnmapper","convertFromNext","convertToNext","arrayToMapMapper","arrayToMapUnmapper","arrayToSetMapper","arrayToSetUnmapper","objectToPrototypeLessMapper","objectToPrototypeLessUnmapper","letrec","entriesOf","keyArb","valueArb","maxKeys","size","maxLength","compare","type","selector","t","mapOf","ka","va","map","dictOf","setOf","prototypeLessOf","objectArb","typedArray","constraints","anyArbitraryBuilder","arbitrariesForBase","values","depthFactor","maxDepth","baseArb","tie","anything","withMap","withSet","withObjectString","o","withNullPrototype","withBigInt","withDate","withTypedArray","withSparseArray","maxNumElements","keys","arbitrary","key","weight","arrayBase","arb","setBase","mapBase","objectBase","object"],"mappings":"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","sourcesContent":["import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { frequency } from '../../frequency.js';\nimport { oneof } from '../../oneof.js';\nimport { set } from '../../set.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nfunction entriesOf(keyArb, valueArb, maxKeys, size) {\n    return convertToNext(set(tuple(keyArb, valueArb), {\n        maxLength: maxKeys,\n        size,\n        compare: { type: 'SameValueZero', selector: (t) => t[0] },\n    }));\n}\nfunction mapOf(ka, va, maxKeys, size) {\n    return convertFromNext(entriesOf(ka, va, maxKeys, size).map(arrayToMapMapper, arrayToMapUnmapper));\n}\nfunction dictOf(ka, va, maxKeys, size) {\n    return convertFromNext(entriesOf(ka, va, maxKeys, size).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\nfunction setOf(va, maxKeys, size) {\n    return convertFromNext(convertToNext(set(va, { maxLength: maxKeys, size, compare: { type: 'SameValueZero' } })).map(arrayToSetMapper, arrayToSetUnmapper));\n}\nfunction prototypeLessOf(objectArb) {\n    return convertFromNext(convertToNext(objectArb).map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper));\n}\nfunction typedArray(constraints) {\n    return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\nexport function anyArbitraryBuilder(constraints) {\n    const arbitrariesForBase = constraints.values;\n    const depthFactor = constraints.depthFactor;\n    const maxDepth = constraints.maxDepth;\n    const maxKeys = constraints.maxKeys;\n    const size = constraints.size;\n    const baseArb = oneof(...arbitrariesForBase);\n    return letrec((tie) => ({\n        anything: oneof({ maxDepth, depthFactor }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map((o) => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []), ...(constraints.withTypedArray ? [typedArray({ maxLength: maxKeys, size })] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), { maxNumElements: maxKeys, size })] : [])),\n        keys: constraints.withObjectString\n            ? frequency({ arbitrary: constraints.key, weight: 10 }, { arbitrary: tie('anything').map((o) => stringify(o)), weight: 1 })\n            : constraints.key,\n        arrayBase: oneof(...arbitrariesForBase.map((arb) => array(arb, { maxLength: maxKeys, size }))),\n        array: oneof(tie('arrayBase'), array(tie('anything'), { maxLength: maxKeys, size })),\n        setBase: oneof(...arbitrariesForBase.map((arb) => setOf(arb, maxKeys, size))),\n        set: oneof(tie('setBase'), setOf(tie('anything'), maxKeys, size)),\n        mapBase: oneof(...arbitrariesForBase.map((arb) => mapOf(tie('keys'), arb, maxKeys, size))),\n        map: oneof(tie('mapBase'), oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size), mapOf(tie('anything'), tie('anything'), maxKeys, size))),\n        objectBase: oneof(...arbitrariesForBase.map((arb) => dictOf(tie('keys'), arb, maxKeys, size))),\n        object: oneof(tie('objectBase'), dictOf(tie('keys'), tie('anything'), maxKeys, size)),\n    })).anything;\n}\n"]},"metadata":{},"sourceType":"module"}