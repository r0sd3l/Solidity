{"ast":null,"code":"import { unsafeUniformIntDistributionInternal } from './internals/UnsafeUniformIntDistributionInternal.js';\nimport { fromNumberToArrayInt64, substractArrayInt64 } from './internals/ArrayInt.js';\nimport { unsafeUniformArrayIntDistributionInternal } from './internals/UnsafeUniformArrayIntDistributionInternal.js';\nvar sharedA = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedB = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedC = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedData = [0, 0];\n\nfunction uniformLargeIntInternal(from, to, rangeSize, rng) {\n  var rangeSizeArrayIntValue = rangeSize <= Number.MAX_SAFE_INTEGER ? fromNumberToArrayInt64(sharedC, rangeSize) : substractArrayInt64(sharedC, fromNumberToArrayInt64(sharedA, to), fromNumberToArrayInt64(sharedB, from));\n\n  if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {\n    rangeSizeArrayIntValue.data[0] += 1;\n    rangeSizeArrayIntValue.data[1] = 0;\n  } else {\n    rangeSizeArrayIntValue.data[1] += 1;\n  }\n\n  unsafeUniformArrayIntDistributionInternal(sharedData, rangeSizeArrayIntValue.data, rng);\n  return sharedData[0] * 0x100000000 + sharedData[1] + from;\n}\n\nexport function unsafeUniformIntDistribution(from, to, rng) {\n  var rangeSize = to - from;\n\n  if (rangeSize <= 0xffffffff) {\n    var g = unsafeUniformIntDistributionInternal(rangeSize + 1, rng);\n    return g + from;\n  }\n\n  return uniformLargeIntInternal(from, to, rangeSize, rng);\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js"],"names":["unsafeUniformIntDistributionInternal","fromNumberToArrayInt64","substractArrayInt64","unsafeUniformArrayIntDistributionInternal","sharedA","sign","data","sharedB","sharedC","sharedData","uniformLargeIntInternal","from","to","rangeSize","rng","rangeSizeArrayIntValue","Number","MAX_SAFE_INTEGER","unsafeUniformIntDistribution","g"],"mappings":"AAAA,SAASA,oCAAT,QAAqD,qDAArD;AACA,SAASC,sBAAT,EAAiCC,mBAAjC,QAA4D,yBAA5D;AACA,SAASC,yCAAT,QAA0D,0DAA1D;AACA,IAAIC,OAAO,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAjB,CAAd;AACA,IAAIC,OAAO,GAAG;AAAEF,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAjB,CAAd;AACA,IAAIE,OAAO,GAAG;AAAEH,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAjB,CAAd;AACA,IAAIG,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAjB;;AACA,SAASC,uBAAT,CAAiCC,IAAjC,EAAuCC,EAAvC,EAA2CC,SAA3C,EAAsDC,GAAtD,EAA2D;AACvD,MAAIC,sBAAsB,GAAGF,SAAS,IAAIG,MAAM,CAACC,gBAApB,GACvBhB,sBAAsB,CAACO,OAAD,EAAUK,SAAV,CADC,GAEvBX,mBAAmB,CAACM,OAAD,EAAUP,sBAAsB,CAACG,OAAD,EAAUQ,EAAV,CAAhC,EAA+CX,sBAAsB,CAACM,OAAD,EAAUI,IAAV,CAArE,CAFzB;;AAGA,MAAII,sBAAsB,CAACT,IAAvB,CAA4B,CAA5B,MAAmC,UAAvC,EAAmD;AAC/CS,IAAAA,sBAAsB,CAACT,IAAvB,CAA4B,CAA5B,KAAkC,CAAlC;AACAS,IAAAA,sBAAsB,CAACT,IAAvB,CAA4B,CAA5B,IAAiC,CAAjC;AACH,GAHD,MAIK;AACDS,IAAAA,sBAAsB,CAACT,IAAvB,CAA4B,CAA5B,KAAkC,CAAlC;AACH;;AACDH,EAAAA,yCAAyC,CAACM,UAAD,EAAaM,sBAAsB,CAACT,IAApC,EAA0CQ,GAA1C,CAAzC;AACA,SAAOL,UAAU,CAAC,CAAD,CAAV,GAAgB,WAAhB,GAA8BA,UAAU,CAAC,CAAD,CAAxC,GAA8CE,IAArD;AACH;;AACD,OAAO,SAASO,4BAAT,CAAsCP,IAAtC,EAA4CC,EAA5C,EAAgDE,GAAhD,EAAqD;AACxD,MAAID,SAAS,GAAGD,EAAE,GAAGD,IAArB;;AACA,MAAIE,SAAS,IAAI,UAAjB,EAA6B;AACzB,QAAIM,CAAC,GAAGnB,oCAAoC,CAACa,SAAS,GAAG,CAAb,EAAgBC,GAAhB,CAA5C;AACA,WAAOK,CAAC,GAAGR,IAAX;AACH;;AACD,SAAOD,uBAAuB,CAACC,IAAD,EAAOC,EAAP,EAAWC,SAAX,EAAsBC,GAAtB,CAA9B;AACH","sourcesContent":["import { unsafeUniformIntDistributionInternal } from './internals/UnsafeUniformIntDistributionInternal.js';\nimport { fromNumberToArrayInt64, substractArrayInt64 } from './internals/ArrayInt.js';\nimport { unsafeUniformArrayIntDistributionInternal } from './internals/UnsafeUniformArrayIntDistributionInternal.js';\nvar sharedA = { sign: 1, data: [0, 0] };\nvar sharedB = { sign: 1, data: [0, 0] };\nvar sharedC = { sign: 1, data: [0, 0] };\nvar sharedData = [0, 0];\nfunction uniformLargeIntInternal(from, to, rangeSize, rng) {\n    var rangeSizeArrayIntValue = rangeSize <= Number.MAX_SAFE_INTEGER\n        ? fromNumberToArrayInt64(sharedC, rangeSize)\n        : substractArrayInt64(sharedC, fromNumberToArrayInt64(sharedA, to), fromNumberToArrayInt64(sharedB, from));\n    if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {\n        rangeSizeArrayIntValue.data[0] += 1;\n        rangeSizeArrayIntValue.data[1] = 0;\n    }\n    else {\n        rangeSizeArrayIntValue.data[1] += 1;\n    }\n    unsafeUniformArrayIntDistributionInternal(sharedData, rangeSizeArrayIntValue.data, rng);\n    return sharedData[0] * 0x100000000 + sharedData[1] + from;\n}\nexport function unsafeUniformIntDistribution(from, to, rng) {\n    var rangeSize = to - from;\n    if (rangeSize <= 0xffffffff) {\n        var g = unsafeUniformIntDistributionInternal(rangeSize + 1, rng);\n        return g + from;\n    }\n    return uniformLargeIntInternal(from, to, rangeSize, rng);\n}\n"]},"metadata":{},"sourceType":"module"}