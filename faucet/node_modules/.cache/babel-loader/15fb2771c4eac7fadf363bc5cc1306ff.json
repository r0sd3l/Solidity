{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\n\nfunction buildSetBuilder(constraints) {\n  const compare = constraints.compare || {};\n\n  if (typeof compare === 'function') {\n    const isEqualForBuilder = (nextA, nextB) => compare(nextA.value_, nextB.value_);\n\n    return () => new CustomEqualSet(isEqualForBuilder);\n  }\n\n  const selector = compare.selector || (v => v);\n\n  const refinedSelector = next => selector(next.value_);\n\n  switch (compare.type) {\n    case 'SameValue':\n      return () => new SameValueSet(refinedSelector);\n\n    case 'SameValueZero':\n      return () => new SameValueZeroSet(refinedSelector);\n\n    case 'IsStrictlyEqual':\n    case undefined:\n      return () => new StrictlyEqualSet(refinedSelector);\n  }\n}\n\nfunction buildCompleteSetConstraints(constraints) {\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n  const setBuilder = buildSetBuilder(constraints);\n  return {\n    minLength,\n    maxGeneratedLength,\n    maxLength,\n    setBuilder\n  };\n}\n\nfunction extractSetConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const sargs = args;\n    if (typeof sargs[0] === 'number') return {\n      maxLength: sargs[0]\n    };\n    if (typeof sargs[0] === 'function') return {\n      compare: sargs[0]\n    };\n    return sargs[0];\n  }\n\n  if (args[2] === undefined) {\n    const sargs = args;\n    if (typeof sargs[1] === 'number') return {\n      minLength: sargs[0],\n      maxLength: sargs[1]\n    };\n    return {\n      maxLength: sargs[0],\n      compare: sargs[1]\n    };\n  }\n\n  const sargs = args;\n  return {\n    minLength: sargs[0],\n    maxLength: sargs[1],\n    compare: sargs[2]\n  };\n}\n\nfunction set(arb) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n  const minLength = constraints.minLength;\n  const maxLength = constraints.maxLength;\n  const maxGeneratedLength = constraints.maxGeneratedLength;\n  const setBuilder = constraints.setBuilder;\n  const nextArb = convertToNext(arb);\n  const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxGeneratedLength, maxLength, setBuilder));\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(tab => tab.length >= minLength);\n}\n\nexport { set };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/set.js"],"names":["ArrayArbitrary","convertFromNext","convertToNext","MaxLengthUpperBound","maxGeneratedLengthFromSizeForArbitrary","CustomEqualSet","StrictlyEqualSet","SameValueSet","SameValueZeroSet","buildSetBuilder","constraints","compare","isEqualForBuilder","nextA","nextB","value_","selector","v","refinedSelector","next","type","undefined","buildCompleteSetConstraints","minLength","maxLength","maxGeneratedLength","size","setBuilder","extractSetConstraints","args","sargs","set","arb","nextArb","arrayArb","filter","tab","length"],"mappings":"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","sourcesContent":["import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary, } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\nfunction buildSetBuilder(constraints) {\n    const compare = constraints.compare || {};\n    if (typeof compare === 'function') {\n        const isEqualForBuilder = (nextA, nextB) => compare(nextA.value_, nextB.value_);\n        return () => new CustomEqualSet(isEqualForBuilder);\n    }\n    const selector = compare.selector || ((v) => v);\n    const refinedSelector = (next) => selector(next.value_);\n    switch (compare.type) {\n        case 'SameValue':\n            return () => new SameValueSet(refinedSelector);\n        case 'SameValueZero':\n            return () => new SameValueZeroSet(refinedSelector);\n        case 'IsStrictlyEqual':\n        case undefined:\n            return () => new StrictlyEqualSet(refinedSelector);\n    }\n}\nfunction buildCompleteSetConstraints(constraints) {\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n    const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n    const setBuilder = buildSetBuilder(constraints);\n    return { minLength, maxGeneratedLength, maxLength, setBuilder };\n}\nfunction extractSetConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const sargs = args;\n        if (typeof sargs[0] === 'number')\n            return { maxLength: sargs[0] };\n        if (typeof sargs[0] === 'function')\n            return { compare: sargs[0] };\n        return sargs[0];\n    }\n    if (args[2] === undefined) {\n        const sargs = args;\n        if (typeof sargs[1] === 'number')\n            return { minLength: sargs[0], maxLength: sargs[1] };\n        return { maxLength: sargs[0], compare: sargs[1] };\n    }\n    const sargs = args;\n    return { minLength: sargs[0], maxLength: sargs[1], compare: sargs[2] };\n}\nfunction set(arb, ...args) {\n    const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n    const minLength = constraints.minLength;\n    const maxLength = constraints.maxLength;\n    const maxGeneratedLength = constraints.maxGeneratedLength;\n    const setBuilder = constraints.setBuilder;\n    const nextArb = convertToNext(arb);\n    const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxGeneratedLength, maxLength, setBuilder));\n    if (minLength === 0)\n        return arrayArb;\n    return arrayArb.filter((tab) => tab.length >= minLength);\n}\nexport { set };\n"]},"metadata":{},"sourceType":"module"}