{"ast":null,"code":"export function stringToBase64Mapper(s) {\n  switch (s.length % 4) {\n    case 0:\n      return s;\n\n    case 3:\n      return `${s}=`;\n\n    case 2:\n      return `${s}==`;\n\n    default:\n      return s.slice(1);\n  }\n}\nexport function stringToBase64Unmapper(value) {\n  if (typeof value !== 'string' || value.length % 4 !== 0) {\n    throw new Error('Invalid string received');\n  }\n\n  const lastTrailingIndex = value.indexOf('=');\n\n  if (lastTrailingIndex === -1) {\n    return value;\n  }\n\n  const numTrailings = value.length - lastTrailingIndex;\n\n  if (numTrailings > 2) {\n    throw new Error('Cannot unmap the passed value');\n  }\n\n  return value.substring(0, lastTrailingIndex);\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/StringToBase64.js"],"names":["stringToBase64Mapper","s","length","slice","stringToBase64Unmapper","value","Error","lastTrailingIndex","indexOf","numTrailings","substring"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,CAA9B,EAAiC;AACpC,UAAQA,CAAC,CAACC,MAAF,GAAW,CAAnB;AACI,SAAK,CAAL;AACI,aAAOD,CAAP;;AACJ,SAAK,CAAL;AACI,aAAQ,GAAEA,CAAE,GAAZ;;AACJ,SAAK,CAAL;AACI,aAAQ,GAAEA,CAAE,IAAZ;;AACJ;AACI,aAAOA,CAAC,CAACE,KAAF,CAAQ,CAAR,CAAP;AARR;AAUH;AACD,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACH,MAAN,GAAe,CAAf,KAAqB,CAAtD,EAAyD;AACrD,UAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,QAAMC,iBAAiB,GAAGF,KAAK,CAACG,OAAN,CAAc,GAAd,CAA1B;;AACA,MAAID,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC1B,WAAOF,KAAP;AACH;;AACD,QAAMI,YAAY,GAAGJ,KAAK,CAACH,MAAN,GAAeK,iBAApC;;AACA,MAAIE,YAAY,GAAG,CAAnB,EAAsB;AAClB,UAAM,IAAIH,KAAJ,CAAU,+BAAV,CAAN;AACH;;AACD,SAAOD,KAAK,CAACK,SAAN,CAAgB,CAAhB,EAAmBH,iBAAnB,CAAP;AACH","sourcesContent":["export function stringToBase64Mapper(s) {\n    switch (s.length % 4) {\n        case 0:\n            return s;\n        case 3:\n            return `${s}=`;\n        case 2:\n            return `${s}==`;\n        default:\n            return s.slice(1);\n    }\n}\nexport function stringToBase64Unmapper(value) {\n    if (typeof value !== 'string' || value.length % 4 !== 0) {\n        throw new Error('Invalid string received');\n    }\n    const lastTrailingIndex = value.indexOf('=');\n    if (lastTrailingIndex === -1) {\n        return value;\n    }\n    const numTrailings = value.length - lastTrailingIndex;\n    if (numTrailings > 2) {\n        throw new Error('Cannot unmap the passed value');\n    }\n    return value.substring(0, lastTrailingIndex);\n}\n"]},"metadata":{},"sourceType":"module"}