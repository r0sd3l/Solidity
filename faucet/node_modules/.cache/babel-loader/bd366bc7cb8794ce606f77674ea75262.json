{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.solidityFamily = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:compiler:utils\");\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nfunction solidityFamily(compiler) {\n  if (!compiler || compiler.name !== \"solc\") {\n    return \"unknown\";\n  }\n\n  if (semver_1.default.satisfies(compiler.version, \">=0.8.9\", {\n    includePrerelease: true\n  })) {\n    return \"0.8.9+\";\n  } else if (semver_1.default.satisfies(compiler.version, \">=0.8.7\", {\n    includePrerelease: true\n  })) {\n    return \"0.8.7+\";\n  } else if ( //see comment below about the weird-looking condition\n  semver_1.default.satisfies(compiler.version, \"~0.8 || >=0.8.0\", {\n    includePrerelease: true\n  })) {\n    return \"0.8.x\";\n  } else if (semver_1.default.satisfies(compiler.version, \"~0.5 || >=0.5.0\", {\n    includePrerelease: true\n  })) {\n    //what's with this weird-looking condition?  Well, I want to be sure to include\n    //prerelease versions of 0.5.0.  But isn't that what the includePrerelease option\n    //does?  No!  That just makes it so that prerelease versions can be included at\n    //all; without that, all prereleases of *any* version of Solidity can be excluded.\n    //A prerelease version of 0.5.0 still wouldn't satisfy >=0.5.0, so I added in ~0.5\n    //as well, which they do satisfy.\n    return \"0.5.x\";\n  } else {\n    return \"pre-0.5.0\";\n  }\n}\n\nexports.solidityFamily = solidityFamily;","map":{"version":3,"sources":["../../../lib/compiler/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,sBAAZ,CAAd;;AAEA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAGA,SAAgB,cAAhB,CAA+B,QAA/B,EAAwD;AACtD,MAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,IAAT,KAAkB,MAAnC,EAA2C;AACzC,WAAO,SAAP;AACD;;AACD,MACE,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,SAAnC,EAA8C;AAC5C,IAAA,iBAAiB,EAAE;AADyB,GAA9C,CADF,EAIE;AACA,WAAO,QAAP;AACD,GAND,MAMO,IACL,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,SAAnC,EAA8C;AAC5C,IAAA,iBAAiB,EAAE;AADyB,GAA9C,CADK,EAIL;AACA,WAAO,QAAP;AACD,GANM,MAMA,KACL;AACA,EAAA,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,iBAAnC,EAAsD;AACpD,IAAA,iBAAiB,EAAE;AADiC,GAAtD,CAFK,EAKL;AACA,WAAO,OAAP;AACD,GAPM,MAOA,IACL,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,iBAAnC,EAAsD;AACpD,IAAA,iBAAiB,EAAE;AADiC,GAAtD,CADK,EAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,OAAP;AACD,GAZM,MAYA;AACL,WAAO,WAAP;AACD;AACF;;AAtCD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.solidityFamily = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:compiler:utils\");\nconst semver_1 = __importDefault(require(\"semver\"));\nfunction solidityFamily(compiler) {\n    if (!compiler || compiler.name !== \"solc\") {\n        return \"unknown\";\n    }\n    if (semver_1.default.satisfies(compiler.version, \">=0.8.9\", {\n        includePrerelease: true\n    })) {\n        return \"0.8.9+\";\n    }\n    else if (semver_1.default.satisfies(compiler.version, \">=0.8.7\", {\n        includePrerelease: true\n    })) {\n        return \"0.8.7+\";\n    }\n    else if (\n    //see comment below about the weird-looking condition\n    semver_1.default.satisfies(compiler.version, \"~0.8 || >=0.8.0\", {\n        includePrerelease: true\n    })) {\n        return \"0.8.x\";\n    }\n    else if (semver_1.default.satisfies(compiler.version, \"~0.5 || >=0.5.0\", {\n        includePrerelease: true\n    })) {\n        //what's with this weird-looking condition?  Well, I want to be sure to include\n        //prerelease versions of 0.5.0.  But isn't that what the includePrerelease option\n        //does?  No!  That just makes it so that prerelease versions can be included at\n        //all; without that, all prereleases of *any* version of Solidity can be excluded.\n        //A prerelease version of 0.5.0 still wouldn't satisfy >=0.5.0, so I added in ~0.5\n        //as well, which they do satisfy.\n        return \"0.5.x\";\n    }\n    else {\n        return \"pre-0.5.0\";\n    }\n}\nexports.solidityFamily = solidityFamily;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}