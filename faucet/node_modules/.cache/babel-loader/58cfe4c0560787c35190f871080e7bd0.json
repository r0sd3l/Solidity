{"ast":null,"code":"var MULTIPLIER = 0x000343fd;\nvar INCREMENT = 0x00269ec3;\nvar MASK = 0xffffffff;\nvar MASK_2 = (1 << 31) - 1;\n\nvar computeNextSeed = function (seed) {\n  return seed * MULTIPLIER + INCREMENT & MASK;\n};\n\nvar computeValueFromNextSeed = function (nextseed) {\n  return (nextseed & MASK_2) >> 16;\n};\n\nvar LinearCongruential = function () {\n  function LinearCongruential(seed) {\n    this.seed = seed;\n  }\n\n  LinearCongruential.prototype.min = function () {\n    return LinearCongruential.min;\n  };\n\n  LinearCongruential.prototype.max = function () {\n    return LinearCongruential.max;\n  };\n\n  LinearCongruential.prototype.clone = function () {\n    return new LinearCongruential(this.seed);\n  };\n\n  LinearCongruential.prototype.next = function () {\n    var nextRng = new LinearCongruential(this.seed);\n    var out = nextRng.unsafeNext();\n    return [out, nextRng];\n  };\n\n  LinearCongruential.prototype.unsafeNext = function () {\n    this.seed = computeNextSeed(this.seed);\n    return computeValueFromNextSeed(this.seed);\n  };\n\n  LinearCongruential.min = 0;\n  LinearCongruential.max = Math.pow(2, 15) - 1;\n  return LinearCongruential;\n}();\n\nvar LinearCongruential32 = function () {\n  function LinearCongruential32(seed) {\n    this.seed = seed;\n  }\n\n  LinearCongruential32.prototype.min = function () {\n    return LinearCongruential32.min;\n  };\n\n  LinearCongruential32.prototype.max = function () {\n    return LinearCongruential32.max;\n  };\n\n  LinearCongruential32.prototype.clone = function () {\n    return new LinearCongruential32(this.seed);\n  };\n\n  LinearCongruential32.prototype.next = function () {\n    var nextRng = new LinearCongruential32(this.seed);\n    var out = nextRng.unsafeNext();\n    return [out, nextRng];\n  };\n\n  LinearCongruential32.prototype.unsafeNext = function () {\n    var s1 = computeNextSeed(this.seed);\n    var v1 = computeValueFromNextSeed(s1);\n    var s2 = computeNextSeed(s1);\n    var v2 = computeValueFromNextSeed(s2);\n    this.seed = computeNextSeed(s2);\n    var v3 = computeValueFromNextSeed(this.seed);\n    var vnext = v3 + (v2 + (v1 << 15) << 15);\n    return (vnext + 0x80000000 | 0) + 0x80000000;\n  };\n\n  LinearCongruential32.min = 0;\n  LinearCongruential32.max = 0xffffffff;\n  return LinearCongruential32;\n}();\n\nexport var congruential = function (seed) {\n  return new LinearCongruential(seed);\n};\nexport var congruential32 = function (seed) {\n  return new LinearCongruential32(seed);\n};","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/pure-rand/lib/esm/generator/LinearCongruential.js"],"names":["MULTIPLIER","INCREMENT","MASK","MASK_2","computeNextSeed","seed","computeValueFromNextSeed","nextseed","LinearCongruential","prototype","min","max","clone","next","nextRng","out","unsafeNext","Math","pow","LinearCongruential32","s1","v1","s2","v2","v3","vnext","congruential","congruential32"],"mappings":"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","sourcesContent":["var MULTIPLIER = 0x000343fd;\nvar INCREMENT = 0x00269ec3;\nvar MASK = 0xffffffff;\nvar MASK_2 = (1 << 31) - 1;\nvar computeNextSeed = function (seed) {\n    return (seed * MULTIPLIER + INCREMENT) & MASK;\n};\nvar computeValueFromNextSeed = function (nextseed) {\n    return (nextseed & MASK_2) >> 16;\n};\nvar LinearCongruential = (function () {\n    function LinearCongruential(seed) {\n        this.seed = seed;\n    }\n    LinearCongruential.prototype.min = function () {\n        return LinearCongruential.min;\n    };\n    LinearCongruential.prototype.max = function () {\n        return LinearCongruential.max;\n    };\n    LinearCongruential.prototype.clone = function () {\n        return new LinearCongruential(this.seed);\n    };\n    LinearCongruential.prototype.next = function () {\n        var nextRng = new LinearCongruential(this.seed);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    LinearCongruential.prototype.unsafeNext = function () {\n        this.seed = computeNextSeed(this.seed);\n        return computeValueFromNextSeed(this.seed);\n    };\n    LinearCongruential.min = 0;\n    LinearCongruential.max = Math.pow(2, 15) - 1;\n    return LinearCongruential;\n}());\nvar LinearCongruential32 = (function () {\n    function LinearCongruential32(seed) {\n        this.seed = seed;\n    }\n    LinearCongruential32.prototype.min = function () {\n        return LinearCongruential32.min;\n    };\n    LinearCongruential32.prototype.max = function () {\n        return LinearCongruential32.max;\n    };\n    LinearCongruential32.prototype.clone = function () {\n        return new LinearCongruential32(this.seed);\n    };\n    LinearCongruential32.prototype.next = function () {\n        var nextRng = new LinearCongruential32(this.seed);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    LinearCongruential32.prototype.unsafeNext = function () {\n        var s1 = computeNextSeed(this.seed);\n        var v1 = computeValueFromNextSeed(s1);\n        var s2 = computeNextSeed(s1);\n        var v2 = computeValueFromNextSeed(s2);\n        this.seed = computeNextSeed(s2);\n        var v3 = computeValueFromNextSeed(this.seed);\n        var vnext = v3 + ((v2 + (v1 << 15)) << 15);\n        return ((vnext + 0x80000000) | 0) + 0x80000000;\n    };\n    LinearCongruential32.min = 0;\n    LinearCongruential32.max = 0xffffffff;\n    return LinearCongruential32;\n}());\nexport var congruential = function (seed) {\n    return new LinearCongruential(seed);\n};\nexport var congruential32 = function (seed) {\n    return new LinearCongruential32(seed);\n};\n"]},"metadata":{},"sourceType":"module"}