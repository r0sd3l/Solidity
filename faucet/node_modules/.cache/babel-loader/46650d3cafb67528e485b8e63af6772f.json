{"ast":null,"code":"import { stringify } from '../../utils/stringify.js';\nimport { PreconditionFailure } from '../precondition/PreconditionFailure.js';\n\nfunction fromSyncCached(cachedValue) {\n  return cachedValue === null ? new PreconditionFailure() : cachedValue;\n}\n\nfunction fromCached() {\n  for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n    data[_key] = arguments[_key];\n  }\n\n  if (data[1]) return data[0].then(fromSyncCached);\n  return fromSyncCached(data[0]);\n}\n\nfunction fromCachedUnsafe(cachedValue, isAsync) {\n  return fromCached(cachedValue, isAsync);\n}\n\nexport class IgnoreEqualValuesProperty {\n  constructor(property, skipRuns) {\n    this.property = property;\n    this.skipRuns = skipRuns;\n    this.coveredCases = new Map();\n  }\n\n  isAsync() {\n    return this.property.isAsync();\n  }\n\n  generate(mrng, runId) {\n    return this.property.generate(mrng, runId);\n  }\n\n  shrink(value) {\n    return this.property.shrink(value);\n  }\n\n  run(v) {\n    const stringifiedValue = stringify(v);\n\n    if (this.coveredCases.has(stringifiedValue)) {\n      const lastOutput = this.coveredCases.get(stringifiedValue);\n\n      if (!this.skipRuns) {\n        return lastOutput;\n      }\n\n      return fromCachedUnsafe(lastOutput, this.property.isAsync());\n    }\n\n    const out = this.property.run(v);\n    this.coveredCases.set(stringifiedValue, out);\n    return out;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/property/IgnoreEqualValuesProperty.js"],"names":["stringify","PreconditionFailure","fromSyncCached","cachedValue","fromCached","data","then","fromCachedUnsafe","isAsync","IgnoreEqualValuesProperty","constructor","property","skipRuns","coveredCases","Map","generate","mrng","runId","shrink","value","run","v","stringifiedValue","has","lastOutput","get","out","set"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,mBAAT,QAAoC,wCAApC;;AACA,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACjC,SAAOA,WAAW,KAAK,IAAhB,GAAuB,IAAIF,mBAAJ,EAAvB,GAAmDE,WAA1D;AACH;;AACD,SAASC,UAAT,GAA6B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACzB,MAAIA,IAAI,CAAC,CAAD,CAAR,EACI,OAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAAR,CAAaJ,cAAb,CAAP;AACJ,SAAOA,cAAc,CAACG,IAAI,CAAC,CAAD,CAAL,CAArB;AACH;;AACD,SAASE,gBAAT,CAA0BJ,WAA1B,EAAuCK,OAAvC,EAAgD;AAC5C,SAAOJ,UAAU,CAACD,WAAD,EAAcK,OAAd,CAAjB;AACH;;AACD,OAAO,MAAMC,yBAAN,CAAgC;AACnCC,EAAAA,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC5B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACH;;AACDN,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKG,QAAL,CAAcH,OAAd,EAAP;AACH;;AACDO,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,WAAO,KAAKN,QAAL,CAAcI,QAAd,CAAuBC,IAAvB,EAA6BC,KAA7B,CAAP;AACH;;AACDC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAO,KAAKR,QAAL,CAAcO,MAAd,CAAqBC,KAArB,CAAP;AACH;;AACDC,EAAAA,GAAG,CAACC,CAAD,EAAI;AACH,UAAMC,gBAAgB,GAAGtB,SAAS,CAACqB,CAAD,CAAlC;;AACA,QAAI,KAAKR,YAAL,CAAkBU,GAAlB,CAAsBD,gBAAtB,CAAJ,EAA6C;AACzC,YAAME,UAAU,GAAG,KAAKX,YAAL,CAAkBY,GAAlB,CAAsBH,gBAAtB,CAAnB;;AACA,UAAI,CAAC,KAAKV,QAAV,EAAoB;AAChB,eAAOY,UAAP;AACH;;AACD,aAAOjB,gBAAgB,CAACiB,UAAD,EAAa,KAAKb,QAAL,CAAcH,OAAd,EAAb,CAAvB;AACH;;AACD,UAAMkB,GAAG,GAAG,KAAKf,QAAL,CAAcS,GAAd,CAAkBC,CAAlB,CAAZ;AACA,SAAKR,YAAL,CAAkBc,GAAlB,CAAsBL,gBAAtB,EAAwCI,GAAxC;AACA,WAAOA,GAAP;AACH;;AA3BkC","sourcesContent":["import { stringify } from '../../utils/stringify.js';\nimport { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nfunction fromSyncCached(cachedValue) {\n    return cachedValue === null ? new PreconditionFailure() : cachedValue;\n}\nfunction fromCached(...data) {\n    if (data[1])\n        return data[0].then(fromSyncCached);\n    return fromSyncCached(data[0]);\n}\nfunction fromCachedUnsafe(cachedValue, isAsync) {\n    return fromCached(cachedValue, isAsync);\n}\nexport class IgnoreEqualValuesProperty {\n    constructor(property, skipRuns) {\n        this.property = property;\n        this.skipRuns = skipRuns;\n        this.coveredCases = new Map();\n    }\n    isAsync() {\n        return this.property.isAsync();\n    }\n    generate(mrng, runId) {\n        return this.property.generate(mrng, runId);\n    }\n    shrink(value) {\n        return this.property.shrink(value);\n    }\n    run(v) {\n        const stringifiedValue = stringify(v);\n        if (this.coveredCases.has(stringifiedValue)) {\n            const lastOutput = this.coveredCases.get(stringifiedValue);\n            if (!this.skipRuns) {\n                return lastOutput;\n            }\n            return fromCachedUnsafe(lastOutput, this.property.isAsync());\n        }\n        const out = this.property.run(v);\n        this.coveredCases.set(stringifiedValue, out);\n        return out;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}