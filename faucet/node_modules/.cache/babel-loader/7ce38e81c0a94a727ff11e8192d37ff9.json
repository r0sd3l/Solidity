{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeContext = exports.normalizeContexts = exports.matchContext = exports.findContext = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:contexts:utils\");\n\nconst Evm = __importStar(require(\"../evm\"));\n\nconst Conversion = __importStar(require(\"../conversion\"));\n\nconst lodash_escaperegexp_1 = __importDefault(require(\"lodash.escaperegexp\"));\n\nconst cbor = __importStar(require(\"cbor\"));\n\nconst compile_common_1 = require(\"@truffle/compile-common\");\n\nconst Abi = __importStar(require(\"@truffle/abi-utils\"));\n\nconst AbiDataUtils = __importStar(require(\"../abi-data/utils\"));\n\nfunction findContext(contexts, binary) {\n  const matchingContexts = Object.values(contexts).filter(context => matchContext(context, binary)); //rather than just pick an arbitrary matching context, we're going\n  //to pick one that isn't a descendant of any of the others.\n  //(if there are multiple of *those*, then yeah it's arbitrary.)\n\n  const context = matchingContexts.find(descendant => !matchingContexts.some(ancestor => descendant.compilationId === ancestor.compilationId && descendant.linearizedBaseContracts && ancestor.contractId !== undefined && descendant.linearizedBaseContracts.slice(1).includes(ancestor.contractId) //we do slice one because everything is an an ancestor of itself; we only\n  //care about *proper* ancestors\n  ));\n  return context || null;\n}\n\nexports.findContext = findContext;\n\nfunction matchContext(context, givenBinary) {\n  const {\n    binary,\n    compiler,\n    isConstructor\n  } = context;\n  const lengthDifference = givenBinary.length - binary.length; //first: if it's not a constructor, and it's not Vyper,\n  //they'd better be equal in length.\n  //if it is a constructor, or is Vyper,\n  //the given binary must be at least as long,\n  //and the difference must be a multiple of 32 bytes (64 hex digits)\n\n  const additionalAllowed = isConstructor || compiler != undefined && compiler.name === \"vyper\";\n\n  if (!additionalAllowed && lengthDifference !== 0 || lengthDifference < 0 || lengthDifference % (2 * Evm.Utils.WORD_SIZE) !== 0) {\n    return false;\n  }\n\n  for (let i = 0; i < binary.length; i++) {\n    //note: using strings like arrays is kind of dangerous in general in JS,\n    //but everything here is ASCII so it's fine\n    //note that we need to compare case-insensitive, since Solidity will\n    //put addresses in checksum case in the compiled source\n    //(we don't actually need that second toLowerCase(), but whatever)\n    if (binary[i] !== \".\" && binary[i].toLowerCase() !== givenBinary[i].toLowerCase()) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.matchContext = matchContext;\n\nfunction normalizeContexts(contexts) {\n  //unfortunately, due to our current link references format, we can't\n  //really use the binary from the artifact directly -- neither for purposes\n  //of matching, nor for purposes of decoding internal functions.  So, we\n  //need to perform this normalization step on our contexts before using\n  //them.  Once we have truffle-db, this step should largely go away.\n  debug(\"normalizing contexts\"); //first, let's clone the input\n  //(let's do a 2-deep clone because we'll be altering binary & compiler)\n\n  let newContexts = Object.assign({}, ...Object.entries(contexts).map(_ref => {\n    let [contextHash, context] = _ref;\n    return {\n      [contextHash]: Object.assign({}, context)\n    };\n  }));\n  debug(\"contexts cloned\"); //next, we get all the library names and sort them descending by length.\n  //We're going to want to go in descending order of length so that we\n  //don't run into problems when one name is a substring of another.\n  //For simplicity, we'll exclude names of length <38, because we can\n  //handle these with our more general check for link references at the end\n\n  const fillerLength = 2 * Evm.Utils.ADDRESS_SIZE;\n  let names = Object.values(newContexts).filter(context => context.contractKind === \"library\").map(context => context.contractName).filter(name => name.length >= fillerLength - 3) //the -3 is for 2 leading underscores and 1 trailing\n  .sort((name1, name2) => name2.length - name1.length);\n  debug(\"names sorted\"); //now, we need to turn all these names into regular expressions, because,\n  //unfortunately, str.replace() will only replace all if you use a /g regexp;\n  //note that because names may contain '$', we need to escape them\n  //(also we prepend \"__\" because that's the placeholder format)\n\n  let regexps = names.map(name => new RegExp(lodash_escaperegexp_1.default(\"__\" + name), \"g\"));\n  debug(\"regexps prepared\"); //having done so, we can do the replace for these names!\n\n  const replacement = \".\".repeat(fillerLength);\n\n  for (let regexp of regexps) {\n    for (let context of Object.values(newContexts)) {\n      context.binary = context.binary.replace(regexp, replacement);\n    }\n  }\n\n  debug(\"long replacements complete\"); //now we can do a generic replace that will catch all names of length\n  //<40, while also catching the Solidity compiler's link reference format\n  //as well as Truffle's.  Hooray!\n\n  const genericRegexp = new RegExp(\"_.{\" + (fillerLength - 2) + \"}_\", \"g\"); //we're constructing the regexp /_.{38}_/g, but I didn't want to use a\n  //literal 38 :P\n\n  for (let context of Object.values(newContexts)) {\n    context.binary = context.binary.replace(genericRegexp, replacement);\n  }\n\n  debug(\"short replacements complete\"); //now we must handle the delegatecall guard -- libraries' deployedBytecode will include\n  //0s in place of their own address instead of a link reference at the\n  //beginning, so we need to account for that too\n\n  const pushAddressInstruction = (0x60 + Evm.Utils.ADDRESS_SIZE - 1).toString(16); //\"73\"\n\n  for (let context of Object.values(newContexts)) {\n    if (context.contractKind === \"library\" && !context.isConstructor) {\n      context.binary = context.binary.replace(\"0x\" + pushAddressInstruction + \"00\".repeat(Evm.Utils.ADDRESS_SIZE), \"0x\" + pushAddressInstruction + replacement);\n    }\n  }\n\n  debug(\"extra library replacements complete\"); //now let's handle immutable references\n  //(these are much nicer than link references due to not having to deal with the old format)\n\n  for (let context of Object.values(newContexts)) {\n    if (context.immutableReferences) {\n      for (let variable of Object.values(context.immutableReferences)) {\n        for (let {\n          start,\n          length\n        } of variable) {\n          //Goddammit TS\n          let lowerStringIndex = 2 + 2 * start;\n          let upperStringIndex = 2 + 2 * (start + length);\n          context.binary = context.binary.slice(0, lowerStringIndex) + \"..\".repeat(length) + context.binary.slice(upperStringIndex);\n        }\n      }\n    }\n  }\n\n  debug(\"immutables complete\"); //now: extract & decode all the cbor's.  we're going to use these for\n  //two different purposes, so let's just get them all upfront.\n\n  let cborInfos = {};\n  let decodedCbors = {}; //note: invalid cbor will be indicated in decodedCbors by the lack of an entry,\n  //*not* by undefined or null, since there exists cbor for those :P\n\n  for (const [contextHash, context] of Object.entries(newContexts)) {\n    const cborInfo = extractCborInfo(context.binary);\n    cborInfos[contextHash] = cborInfo;\n\n    if (cborInfo) {\n      try {\n        //note this *will* throw if there's data left over,\n        //which is what we want it to do\n        const decoded = cbor.decodeFirstSync(cborInfo.cbor);\n        decodedCbors[contextHash] = decoded;\n      } catch (_a) {//just don't add it\n      }\n    }\n  }\n\n  debug(\"intial cbor processing complete\"); //now: if a context lacks a compiler, but a version can be found in the\n  //cbor, add it.\n\n  for (let [contextHash, context] of Object.entries(newContexts)) {\n    if (!context.compiler && contextHash in decodedCbors) {\n      context.compiler = detectCompilerInfo(decodedCbors[contextHash]);\n    }\n  }\n\n  debug(\"versions complete\"); //one last step: where there's CBOR with a metadata hash, we'll allow the\n  //CBOR to vary, aside from the length (note: ideally here we would *only*\n  //dot-out the metadata hash part of the CBOR, but, well, it's not worth the\n  //trouble to detect that; doing that could potentially get pretty involved)\n  //note that if the code isn't Solidity, that's fine -- we just won't get\n  //valid CBOR and will not end up adding to our list of regular expressions\n\n  const externalCborInfos = Object.entries(cborInfos).filter(_ref2 => {\n    let [contextHash, _cborInfo] = _ref2;\n    return contextHash in decodedCbors && isObjectWithHash(decodedCbors[contextHash]);\n  }).map(_ref3 => {\n    let [_contextHash, cborInfo] = _ref3;\n    return cborInfo;\n  });\n  const cborRegexps = externalCborInfos.map(cborInfo => ({\n    input: new RegExp(cborInfo.cborSegment, \"g\"),\n    output: \"..\".repeat(cborInfo.cborLength) + cborInfo.cborLengthHex\n  })); //HACK: we will replace *every* occurrence of *every* external CBOR occurring\n  //in *every* context, in order to cover created contracts (including if there\n  //are multiple or recursive ones)\n\n  for (let context of Object.values(newContexts)) {\n    for (let {\n      input,\n      output\n    } of cborRegexps) {\n      context.binary = context.binary.replace(input, output);\n    }\n  }\n\n  debug(\"external wildcards complete\"); //finally, return this mess!\n\n  return newContexts;\n}\n\nexports.normalizeContexts = normalizeContexts;\n\nfunction extractCborInfo(binary) {\n  debug(\"extracting cbor segement of %s\", binary);\n  const lastTwoBytes = binary.slice(2).slice(-2 * 2); //2 bytes * 2 for hex\n  //the slice(2) there may seem unnecessary; it's to handle the possibility that the contract\n  //has less than two bytes in its bytecode (that won't happen with Solidity, but let's be\n  //certain)\n\n  if (lastTwoBytes.length < 2 * 2) {\n    return null; //don't try to handle this case!\n  }\n\n  const cborLength = parseInt(lastTwoBytes, 16);\n  const cborEnd = binary.length - 2 * 2;\n  const cborStart = cborEnd - cborLength * 2; //sanity check\n\n  if (cborStart < 2) {\n    //\"0x\"\n    return null; //don't try to handle this case!\n  }\n\n  const cbor = binary.slice(cborStart, cborEnd);\n  return {\n    cborStart,\n    cborLength,\n    cborEnd,\n    cborLengthHex: lastTwoBytes,\n    cbor,\n    cborSegment: cbor + lastTwoBytes\n  };\n}\n\nfunction isObjectWithHash(decoded) {\n  if (typeof decoded !== \"object\" || decoded === null) {\n    return false;\n  } //cbor sometimes returns maps and sometimes objects,\n  //so let's make things consistent by converting to a map\n  //(actually, is this true? borc did this, I think cbor\n  //does too, but I haven't checked recently)\n\n\n  if (!(decoded instanceof Map)) {\n    decoded = new Map(Object.entries(decoded));\n  }\n\n  const hashKeys = [\"bzzr0\", \"bzzr1\", \"ipfs\"];\n  return hashKeys.some(key => decoded.has(key));\n} //returns undefined if no valid compiler info detected\n//(if it detects solc but no version, it will not return\n//a partial result, just undefined)\n\n\nfunction detectCompilerInfo(decoded) {\n  if (typeof decoded !== \"object\" || decoded === null) {\n    return undefined;\n  } //cbor sometimes returns maps and sometimes objects,\n  //so let's make things consistent by converting to a map\n  //(although see note above?)\n\n\n  if (!(decoded instanceof Map)) {\n    decoded = new Map(Object.entries(decoded));\n  }\n\n  if (!decoded.has(\"solc\")) {\n    //return undefined if the solc version field is not present\n    //(this occurs if version <0.5.9)\n    //currently no other language attaches cbor info, so, yeah\n    return undefined;\n  }\n\n  const rawVersion = decoded.get(\"solc\");\n\n  if (typeof rawVersion === \"string\") {\n    //for prerelease versions, the version is stored as a string.\n    return {\n      name: \"solc\",\n      version: rawVersion\n    };\n  } else if (rawVersion instanceof Uint8Array && rawVersion.length === 3) {\n    //for release versions, it's stored as a bytestring of length 3, with the\n    //bytes being major, minor, patch. so we just join them with \".\" to form\n    //a version string (although it's missing precise commit & etc).\n    return {\n      name: \"solc\",\n      version: rawVersion.join(\".\")\n    };\n  } else {\n    //return undefined on anything else\n    return undefined;\n  }\n}\n\nfunction makeContext(contract, node, compilation) {\n  let isConstructor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const abi = Abi.normalize(contract.abi);\n  const bytecode = isConstructor ? contract.bytecode : contract.deployedBytecode;\n  const binary = compile_common_1.Shims.NewToLegacy.forBytecode(bytecode);\n  const hash = Conversion.toHexString(Evm.Utils.keccak256({\n    type: \"string\",\n    value: binary\n  }));\n  debug(\"hash: %s\", hash);\n  const fallback = abi.find(abiEntry => abiEntry.type === \"fallback\") || null; //TS is failing at inference here\n\n  const receive = abi.find(abiEntry => abiEntry.type === \"receive\") || null; //and here\n\n  return {\n    context: hash,\n    contractName: contract.contractName,\n    binary,\n    contractId: node ? node.id : undefined,\n    linearizedBaseContracts: node ? node.linearizedBaseContracts : undefined,\n    contractKind: contractKind(contract, node),\n    immutableReferences: isConstructor ? undefined : contract.immutableReferences,\n    isConstructor,\n    abi: AbiDataUtils.computeSelectors(abi),\n    payable: AbiDataUtils.abiHasPayableFallback(abi),\n    fallbackAbi: {\n      fallback,\n      receive\n    },\n    compiler: compilation.compiler || contract.compiler,\n    compilationId: compilation.id\n  };\n}\n\nexports.makeContext = makeContext; //attempts to determine if the given contract is a library or not\n\nfunction contractKind(contract, node) {\n  //first: if we have a node, use its listed contract kind\n  if (node) {\n    return node.contractKind;\n  } //next: check the contract kind field on the contract object itself, if it exists.\n  //however this isn't implemented yet so we'll skip it.\n  //next: if we have no direct info on the contract kind, but we do\n  //have the deployed bytecode, we'll use a HACK:\n  //we'll assume it's an ordinary contract, UNLESS its deployed bytecode begins with\n  //PUSH20 followed by 20 0s, in which case we'll assume it's a library\n  //(note: this will fail to detect libraries from before Solidity 0.4.20)\n\n\n  if (contract.deployedBytecode) {\n    const deployedBytecode = compile_common_1.Shims.NewToLegacy.forBytecode(contract.deployedBytecode);\n    const pushAddressInstruction = (0x60 + Evm.Utils.ADDRESS_SIZE - 1).toString(16); //\"73\"\n\n    const libraryString = \"0x\" + pushAddressInstruction + \"00\".repeat(Evm.Utils.ADDRESS_SIZE);\n    return deployedBytecode.startsWith(libraryString) ? \"library\" : \"contract\";\n  } //finally, in the absence of anything to go on, we'll assume it's an ordinary contract\n\n\n  return \"contract\";\n}","map":{"version":3,"sources":["../../../lib/contexts/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeContext = exports.normalizeContexts = exports.matchContext = exports.findContext = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:contexts:utils\");\nconst Evm = __importStar(require(\"../evm\"));\nconst Conversion = __importStar(require(\"../conversion\"));\nconst lodash_escaperegexp_1 = __importDefault(require(\"lodash.escaperegexp\"));\nconst cbor = __importStar(require(\"cbor\"));\nconst compile_common_1 = require(\"@truffle/compile-common\");\nconst Abi = __importStar(require(\"@truffle/abi-utils\"));\nconst AbiDataUtils = __importStar(require(\"../abi-data/utils\"));\nfunction findContext(contexts, binary) {\n    const matchingContexts = Object.values(contexts).filter(context => matchContext(context, binary));\n    //rather than just pick an arbitrary matching context, we're going\n    //to pick one that isn't a descendant of any of the others.\n    //(if there are multiple of *those*, then yeah it's arbitrary.)\n    const context = matchingContexts.find(descendant => !matchingContexts.some(ancestor => descendant.compilationId === ancestor.compilationId &&\n        descendant.linearizedBaseContracts &&\n        ancestor.contractId !== undefined &&\n        descendant.linearizedBaseContracts\n            .slice(1)\n            .includes(ancestor.contractId)\n    //we do slice one because everything is an an ancestor of itself; we only\n    //care about *proper* ancestors\n    ));\n    return context || null;\n}\nexports.findContext = findContext;\nfunction matchContext(context, givenBinary) {\n    const { binary, compiler, isConstructor } = context;\n    const lengthDifference = givenBinary.length - binary.length;\n    //first: if it's not a constructor, and it's not Vyper,\n    //they'd better be equal in length.\n    //if it is a constructor, or is Vyper,\n    //the given binary must be at least as long,\n    //and the difference must be a multiple of 32 bytes (64 hex digits)\n    const additionalAllowed = isConstructor ||\n        (compiler != undefined && compiler.name === \"vyper\");\n    if ((!additionalAllowed && lengthDifference !== 0) ||\n        lengthDifference < 0 ||\n        lengthDifference % (2 * Evm.Utils.WORD_SIZE) !== 0) {\n        return false;\n    }\n    for (let i = 0; i < binary.length; i++) {\n        //note: using strings like arrays is kind of dangerous in general in JS,\n        //but everything here is ASCII so it's fine\n        //note that we need to compare case-insensitive, since Solidity will\n        //put addresses in checksum case in the compiled source\n        //(we don't actually need that second toLowerCase(), but whatever)\n        if (binary[i] !== \".\" &&\n            binary[i].toLowerCase() !== givenBinary[i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.matchContext = matchContext;\nfunction normalizeContexts(contexts) {\n    //unfortunately, due to our current link references format, we can't\n    //really use the binary from the artifact directly -- neither for purposes\n    //of matching, nor for purposes of decoding internal functions.  So, we\n    //need to perform this normalization step on our contexts before using\n    //them.  Once we have truffle-db, this step should largely go away.\n    debug(\"normalizing contexts\");\n    //first, let's clone the input\n    //(let's do a 2-deep clone because we'll be altering binary & compiler)\n    let newContexts = Object.assign({}, ...Object.entries(contexts).map(([contextHash, context]) => ({\n        [contextHash]: Object.assign({}, context)\n    })));\n    debug(\"contexts cloned\");\n    //next, we get all the library names and sort them descending by length.\n    //We're going to want to go in descending order of length so that we\n    //don't run into problems when one name is a substring of another.\n    //For simplicity, we'll exclude names of length <38, because we can\n    //handle these with our more general check for link references at the end\n    const fillerLength = 2 * Evm.Utils.ADDRESS_SIZE;\n    let names = Object.values(newContexts)\n        .filter(context => context.contractKind === \"library\")\n        .map(context => context.contractName)\n        .filter(name => name.length >= fillerLength - 3)\n        //the -3 is for 2 leading underscores and 1 trailing\n        .sort((name1, name2) => name2.length - name1.length);\n    debug(\"names sorted\");\n    //now, we need to turn all these names into regular expressions, because,\n    //unfortunately, str.replace() will only replace all if you use a /g regexp;\n    //note that because names may contain '$', we need to escape them\n    //(also we prepend \"__\" because that's the placeholder format)\n    let regexps = names.map(name => new RegExp(lodash_escaperegexp_1.default(\"__\" + name), \"g\"));\n    debug(\"regexps prepared\");\n    //having done so, we can do the replace for these names!\n    const replacement = \".\".repeat(fillerLength);\n    for (let regexp of regexps) {\n        for (let context of Object.values(newContexts)) {\n            context.binary = context.binary.replace(regexp, replacement);\n        }\n    }\n    debug(\"long replacements complete\");\n    //now we can do a generic replace that will catch all names of length\n    //<40, while also catching the Solidity compiler's link reference format\n    //as well as Truffle's.  Hooray!\n    const genericRegexp = new RegExp(\"_.{\" + (fillerLength - 2) + \"}_\", \"g\");\n    //we're constructing the regexp /_.{38}_/g, but I didn't want to use a\n    //literal 38 :P\n    for (let context of Object.values(newContexts)) {\n        context.binary = context.binary.replace(genericRegexp, replacement);\n    }\n    debug(\"short replacements complete\");\n    //now we must handle the delegatecall guard -- libraries' deployedBytecode will include\n    //0s in place of their own address instead of a link reference at the\n    //beginning, so we need to account for that too\n    const pushAddressInstruction = (0x60 + Evm.Utils.ADDRESS_SIZE - 1).toString(16); //\"73\"\n    for (let context of Object.values(newContexts)) {\n        if (context.contractKind === \"library\" && !context.isConstructor) {\n            context.binary = context.binary.replace(\"0x\" + pushAddressInstruction + \"00\".repeat(Evm.Utils.ADDRESS_SIZE), \"0x\" + pushAddressInstruction + replacement);\n        }\n    }\n    debug(\"extra library replacements complete\");\n    //now let's handle immutable references\n    //(these are much nicer than link references due to not having to deal with the old format)\n    for (let context of Object.values(newContexts)) {\n        if (context.immutableReferences) {\n            for (let variable of Object.values(context.immutableReferences)) {\n                for (let { start, length } of (variable)) {\n                    //Goddammit TS\n                    let lowerStringIndex = 2 + 2 * start;\n                    let upperStringIndex = 2 + 2 * (start + length);\n                    context.binary =\n                        context.binary.slice(0, lowerStringIndex) +\n                            \"..\".repeat(length) +\n                            context.binary.slice(upperStringIndex);\n                }\n            }\n        }\n    }\n    debug(\"immutables complete\");\n    //now: extract & decode all the cbor's.  we're going to use these for\n    //two different purposes, so let's just get them all upfront.\n    let cborInfos = {};\n    let decodedCbors = {};\n    //note: invalid cbor will be indicated in decodedCbors by the lack of an entry,\n    //*not* by undefined or null, since there exists cbor for those :P\n    for (const [contextHash, context] of Object.entries(newContexts)) {\n        const cborInfo = extractCborInfo(context.binary);\n        cborInfos[contextHash] = cborInfo;\n        if (cborInfo) {\n            try {\n                //note this *will* throw if there's data left over,\n                //which is what we want it to do\n                const decoded = cbor.decodeFirstSync(cborInfo.cbor);\n                decodedCbors[contextHash] = decoded;\n            }\n            catch (_a) {\n                //just don't add it\n            }\n        }\n    }\n    debug(\"intial cbor processing complete\");\n    //now: if a context lacks a compiler, but a version can be found in the\n    //cbor, add it.\n    for (let [contextHash, context] of Object.entries(newContexts)) {\n        if (!context.compiler && contextHash in decodedCbors) {\n            context.compiler = detectCompilerInfo(decodedCbors[contextHash]);\n        }\n    }\n    debug(\"versions complete\");\n    //one last step: where there's CBOR with a metadata hash, we'll allow the\n    //CBOR to vary, aside from the length (note: ideally here we would *only*\n    //dot-out the metadata hash part of the CBOR, but, well, it's not worth the\n    //trouble to detect that; doing that could potentially get pretty involved)\n    //note that if the code isn't Solidity, that's fine -- we just won't get\n    //valid CBOR and will not end up adding to our list of regular expressions\n    const externalCborInfos = Object.entries(cborInfos)\n        .filter(([contextHash, _cborInfo]) => contextHash in decodedCbors &&\n        isObjectWithHash(decodedCbors[contextHash]))\n        .map(([_contextHash, cborInfo]) => cborInfo);\n    const cborRegexps = externalCborInfos.map(cborInfo => ({\n        input: new RegExp(cborInfo.cborSegment, \"g\"),\n        output: \"..\".repeat(cborInfo.cborLength) + cborInfo.cborLengthHex\n    }));\n    //HACK: we will replace *every* occurrence of *every* external CBOR occurring\n    //in *every* context, in order to cover created contracts (including if there\n    //are multiple or recursive ones)\n    for (let context of Object.values(newContexts)) {\n        for (let { input, output } of cborRegexps) {\n            context.binary = context.binary.replace(input, output);\n        }\n    }\n    debug(\"external wildcards complete\");\n    //finally, return this mess!\n    return newContexts;\n}\nexports.normalizeContexts = normalizeContexts;\nfunction extractCborInfo(binary) {\n    debug(\"extracting cbor segement of %s\", binary);\n    const lastTwoBytes = binary.slice(2).slice(-2 * 2); //2 bytes * 2 for hex\n    //the slice(2) there may seem unnecessary; it's to handle the possibility that the contract\n    //has less than two bytes in its bytecode (that won't happen with Solidity, but let's be\n    //certain)\n    if (lastTwoBytes.length < 2 * 2) {\n        return null; //don't try to handle this case!\n    }\n    const cborLength = parseInt(lastTwoBytes, 16);\n    const cborEnd = binary.length - 2 * 2;\n    const cborStart = cborEnd - cborLength * 2;\n    //sanity check\n    if (cborStart < 2) {\n        //\"0x\"\n        return null; //don't try to handle this case!\n    }\n    const cbor = binary.slice(cborStart, cborEnd);\n    return {\n        cborStart,\n        cborLength,\n        cborEnd,\n        cborLengthHex: lastTwoBytes,\n        cbor,\n        cborSegment: cbor + lastTwoBytes\n    };\n}\nfunction isObjectWithHash(decoded) {\n    if (typeof decoded !== \"object\" || decoded === null) {\n        return false;\n    }\n    //cbor sometimes returns maps and sometimes objects,\n    //so let's make things consistent by converting to a map\n    //(actually, is this true? borc did this, I think cbor\n    //does too, but I haven't checked recently)\n    if (!(decoded instanceof Map)) {\n        decoded = new Map(Object.entries(decoded));\n    }\n    const hashKeys = [\"bzzr0\", \"bzzr1\", \"ipfs\"];\n    return hashKeys.some(key => decoded.has(key));\n}\n//returns undefined if no valid compiler info detected\n//(if it detects solc but no version, it will not return\n//a partial result, just undefined)\nfunction detectCompilerInfo(decoded) {\n    if (typeof decoded !== \"object\" || decoded === null) {\n        return undefined;\n    }\n    //cbor sometimes returns maps and sometimes objects,\n    //so let's make things consistent by converting to a map\n    //(although see note above?)\n    if (!(decoded instanceof Map)) {\n        decoded = new Map(Object.entries(decoded));\n    }\n    if (!decoded.has(\"solc\")) {\n        //return undefined if the solc version field is not present\n        //(this occurs if version <0.5.9)\n        //currently no other language attaches cbor info, so, yeah\n        return undefined;\n    }\n    const rawVersion = decoded.get(\"solc\");\n    if (typeof rawVersion === \"string\") {\n        //for prerelease versions, the version is stored as a string.\n        return {\n            name: \"solc\",\n            version: rawVersion\n        };\n    }\n    else if (rawVersion instanceof Uint8Array && rawVersion.length === 3) {\n        //for release versions, it's stored as a bytestring of length 3, with the\n        //bytes being major, minor, patch. so we just join them with \".\" to form\n        //a version string (although it's missing precise commit & etc).\n        return {\n            name: \"solc\",\n            version: rawVersion.join(\".\")\n        };\n    }\n    else {\n        //return undefined on anything else\n        return undefined;\n    }\n}\nfunction makeContext(contract, node, compilation, isConstructor = false) {\n    const abi = Abi.normalize(contract.abi);\n    const bytecode = isConstructor\n        ? contract.bytecode\n        : contract.deployedBytecode;\n    const binary = compile_common_1.Shims.NewToLegacy.forBytecode(bytecode);\n    const hash = Conversion.toHexString(Evm.Utils.keccak256({\n        type: \"string\",\n        value: binary\n    }));\n    debug(\"hash: %s\", hash);\n    const fallback = abi.find(abiEntry => abiEntry.type === \"fallback\") ||\n        null; //TS is failing at inference here\n    const receive = abi.find(abiEntry => abiEntry.type === \"receive\") || null; //and here\n    return {\n        context: hash,\n        contractName: contract.contractName,\n        binary,\n        contractId: node ? node.id : undefined,\n        linearizedBaseContracts: node ? node.linearizedBaseContracts : undefined,\n        contractKind: contractKind(contract, node),\n        immutableReferences: isConstructor\n            ? undefined\n            : contract.immutableReferences,\n        isConstructor,\n        abi: AbiDataUtils.computeSelectors(abi),\n        payable: AbiDataUtils.abiHasPayableFallback(abi),\n        fallbackAbi: { fallback, receive },\n        compiler: compilation.compiler || contract.compiler,\n        compilationId: compilation.id\n    };\n}\nexports.makeContext = makeContext;\n//attempts to determine if the given contract is a library or not\nfunction contractKind(contract, node) {\n    //first: if we have a node, use its listed contract kind\n    if (node) {\n        return node.contractKind;\n    }\n    //next: check the contract kind field on the contract object itself, if it exists.\n    //however this isn't implemented yet so we'll skip it.\n    //next: if we have no direct info on the contract kind, but we do\n    //have the deployed bytecode, we'll use a HACK:\n    //we'll assume it's an ordinary contract, UNLESS its deployed bytecode begins with\n    //PUSH20 followed by 20 0s, in which case we'll assume it's a library\n    //(note: this will fail to detect libraries from before Solidity 0.4.20)\n    if (contract.deployedBytecode) {\n        const deployedBytecode = compile_common_1.Shims.NewToLegacy.forBytecode(contract.deployedBytecode);\n        const pushAddressInstruction = (0x60 + Evm.Utils.ADDRESS_SIZE - 1).toString(16); //\"73\"\n        const libraryString = \"0x\" + pushAddressInstruction + \"00\".repeat(Evm.Utils.ADDRESS_SIZE);\n        return deployedBytecode.startsWith(libraryString) ? \"library\" : \"contract\";\n    }\n    //finally, in the absence of anything to go on, we'll assume it's an ordinary contract\n    return \"contract\";\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}