{"ast":null,"code":"import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\n\nfunction buildCompleteIntegerConstraints(constraints) {\n  const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n  const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n  return {\n    min,\n    max\n  };\n}\n\nfunction extractIntegerConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const sargs = args;\n    if (typeof sargs[0] === 'number') return {\n      max: sargs[0]\n    };\n    return sargs[0];\n  }\n\n  const sargs = args;\n  return {\n    min: sargs[0],\n    max: sargs[1]\n  };\n}\n\nfunction integer() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = buildCompleteIntegerConstraints(extractIntegerConstraints(args));\n\n  if (constraints.min > constraints.max) {\n    throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n  }\n\n  if (!Number.isInteger(constraints.min)) {\n    throw new Error('fc.integer minimum value should be an integer');\n  }\n\n  if (!Number.isInteger(constraints.max)) {\n    throw new Error('fc.integer maximum value should be an integer');\n  }\n\n  const arb = new IntegerArbitrary(constraints.min, constraints.max);\n  return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n\nexport { integer };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/integer.js"],"names":["convertFromNextWithShrunkOnce","IntegerArbitrary","buildCompleteIntegerConstraints","constraints","min","undefined","max","extractIntegerConstraints","args","sargs","integer","Error","Number","isInteger","arb","defaultTarget"],"mappings":"AAAA,SAASA,6BAAT,QAA8C,6CAA9C;AACA,SAASC,gBAAT,QAAiC,kCAAjC;;AACA,SAASC,+BAAT,CAAyCC,WAAzC,EAAsD;AAClD,QAAMC,GAAG,GAAGD,WAAW,CAACC,GAAZ,KAAoBC,SAApB,GAAgCF,WAAW,CAACC,GAA5C,GAAkD,CAAC,UAA/D;AACA,QAAME,GAAG,GAAGH,WAAW,CAACG,GAAZ,KAAoBD,SAApB,GAAgCF,WAAW,CAACG,GAA5C,GAAkD,UAA9D;AACA,SAAO;AAAEF,IAAAA,GAAF;AAAOE,IAAAA;AAAP,GAAP;AACH;;AACD,SAASC,yBAAT,CAAmCC,IAAnC,EAAyC;AACrC,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYH,SAAhB,EAA2B;AACvB,WAAO,EAAP;AACH;;AACD,MAAIG,IAAI,CAAC,CAAD,CAAJ,KAAYH,SAAhB,EAA2B;AACvB,UAAMI,KAAK,GAAGD,IAAd;AACA,QAAI,OAAOC,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAAxB,EACI,OAAO;AAAEH,MAAAA,GAAG,EAAEG,KAAK,CAAC,CAAD;AAAZ,KAAP;AACJ,WAAOA,KAAK,CAAC,CAAD,CAAZ;AACH;;AACD,QAAMA,KAAK,GAAGD,IAAd;AACA,SAAO;AAAEJ,IAAAA,GAAG,EAAEK,KAAK,CAAC,CAAD,CAAZ;AAAiBH,IAAAA,GAAG,EAAEG,KAAK,CAAC,CAAD;AAA3B,GAAP;AACH;;AACD,SAASC,OAAT,GAA0B;AAAA,oCAANF,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACtB,QAAML,WAAW,GAAGD,+BAA+B,CAACK,yBAAyB,CAACC,IAAD,CAA1B,CAAnD;;AACA,MAAIL,WAAW,CAACC,GAAZ,GAAkBD,WAAW,CAACG,GAAlC,EAAuC;AACnC,UAAM,IAAIK,KAAJ,CAAU,0EAAV,CAAN;AACH;;AACD,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBV,WAAW,CAACC,GAA7B,CAAL,EAAwC;AACpC,UAAM,IAAIO,KAAJ,CAAU,+CAAV,CAAN;AACH;;AACD,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBV,WAAW,CAACG,GAA7B,CAAL,EAAwC;AACpC,UAAM,IAAIK,KAAJ,CAAU,+CAAV,CAAN;AACH;;AACD,QAAMG,GAAG,GAAG,IAAIb,gBAAJ,CAAqBE,WAAW,CAACC,GAAjC,EAAsCD,WAAW,CAACG,GAAlD,CAAZ;AACA,SAAON,6BAA6B,CAACc,GAAD,EAAMA,GAAG,CAACC,aAAJ,EAAN,CAApC;AACH;;AACD,SAASL,OAAT","sourcesContent":["import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nfunction extractIntegerConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const sargs = args;\n        if (typeof sargs[0] === 'number')\n            return { max: sargs[0] };\n        return sargs[0];\n    }\n    const sargs = args;\n    return { min: sargs[0], max: sargs[1] };\n}\nfunction integer(...args) {\n    const constraints = buildCompleteIntegerConstraints(extractIntegerConstraints(args));\n    if (constraints.min > constraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    if (!Number.isInteger(constraints.min)) {\n        throw new Error('fc.integer minimum value should be an integer');\n    }\n    if (!Number.isInteger(constraints.max)) {\n        throw new Error('fc.integer maximum value should be an integer');\n    }\n    const arb = new IntegerArbitrary(constraints.min, constraints.max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\nexport { integer };\n"]},"metadata":{},"sourceType":"module"}