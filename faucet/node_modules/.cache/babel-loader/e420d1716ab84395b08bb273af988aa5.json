{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nexport class CloneArbitrary extends NextArbitrary {\n  constructor(arb, numValues) {\n    super();\n    this.arb = arb;\n    this.numValues = numValues;\n  }\n\n  generate(mrng, biasFactor) {\n    const items = [];\n\n    if (this.numValues <= 0) {\n      return this.wrapper(items);\n    }\n\n    for (let idx = 0; idx !== this.numValues - 1; ++idx) {\n      items.push(this.arb.generate(mrng.clone(), biasFactor));\n    }\n\n    items.push(this.arb.generate(mrng, biasFactor));\n    return this.wrapper(items);\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || value.length !== this.numValues) {\n      return false;\n    }\n\n    if (value.length === 0) {\n      return true;\n    }\n\n    for (let index = 1; index < value.length; ++index) {\n      if (!Object.is(value[0], value[index])) {\n        return false;\n      }\n    }\n\n    return this.arb.canShrinkWithoutContext(value[0]);\n  }\n\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream.nil();\n    }\n\n    return new Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map(v => this.wrapper(v));\n  }\n\n  *shrinkImpl(value, contexts) {\n    const its = value.map((v, idx) => this.arb.shrink(v, contexts[idx])[Symbol.iterator]());\n    let cur = its.map(it => it.next());\n\n    while (!cur[0].done) {\n      yield cur.map(c => c.value);\n      cur = its.map(it => it.next());\n    }\n  }\n\n  static makeItCloneable(vs, shrinkables) {\n    vs[cloneMethod] = () => {\n      const cloned = [];\n\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n\n    return vs;\n  }\n\n  wrapper(items) {\n    let cloneable = false;\n    const vs = [];\n    const contexts = [];\n\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      contexts.push(s.context);\n    }\n\n    if (cloneable) {\n      CloneArbitrary.makeItCloneable(vs, items);\n    }\n\n    return new NextValue(vs, contexts);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/CloneArbitrary.js"],"names":["NextArbitrary","NextValue","cloneMethod","Stream","CloneArbitrary","constructor","arb","numValues","generate","mrng","biasFactor","items","wrapper","idx","push","clone","canShrinkWithoutContext","value","Array","isArray","length","index","Object","is","shrink","context","nil","shrinkImpl","undefined","map","v","contexts","its","Symbol","iterator","cur","it","next","done","c","makeItCloneable","vs","shrinkables","cloned","cloneable","s","hasToBeCloned"],"mappings":"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","sourcesContent":["import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nexport class CloneArbitrary extends NextArbitrary {\n    constructor(arb, numValues) {\n        super();\n        this.arb = arb;\n        this.numValues = numValues;\n    }\n    generate(mrng, biasFactor) {\n        const items = [];\n        if (this.numValues <= 0) {\n            return this.wrapper(items);\n        }\n        for (let idx = 0; idx !== this.numValues - 1; ++idx) {\n            items.push(this.arb.generate(mrng.clone(), biasFactor));\n        }\n        items.push(this.arb.generate(mrng, biasFactor));\n        return this.wrapper(items);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || value.length !== this.numValues) {\n            return false;\n        }\n        if (value.length === 0) {\n            return true;\n        }\n        for (let index = 1; index < value.length; ++index) {\n            if (!Object.is(value[0], value[index])) {\n                return false;\n            }\n        }\n        return this.arb.canShrinkWithoutContext(value[0]);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        return new Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map((v) => this.wrapper(v));\n    }\n    *shrinkImpl(value, contexts) {\n        const its = value.map((v, idx) => this.arb.shrink(v, contexts[idx])[Symbol.iterator]());\n        let cur = its.map((it) => it.next());\n        while (!cur[0].done) {\n            yield cur.map((c) => c.value);\n            cur = its.map((it) => it.next());\n        }\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    wrapper(items) {\n        let cloneable = false;\n        const vs = [];\n        const contexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            contexts.push(s.context);\n        }\n        if (cloneable) {\n            CloneArbitrary.makeItCloneable(vs, items);\n        }\n        return new NextValue(vs, contexts);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}