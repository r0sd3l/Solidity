{"ast":null,"code":"const debug = require(\"debug\")(\"contract:contract\");\n\nlet Web3 = require(\"web3\");\n\nconst webUtils = require(\"web3-utils\");\n\nconst execute = require(\"../execute\");\n\nconst bootstrap = require(\"./bootstrap\");\n\nconst constructorMethods = require(\"./constructorMethods\");\n\nconst properties = require(\"./properties\"); // For browserified version. If browserify gave us an empty version,\n// look for the one provided by the user.\n\n\nif (typeof Web3 === \"object\" && Object.keys(Web3).length === 0) {\n  Web3 = global.Web3;\n}\n\n(function (module) {\n  // Accepts a contract object created with web3.eth.Contract or an address.\n  function Contract(contract) {\n    var instance = this;\n    var constructor = instance.constructor; // Disambiguate between .at() and .new()\n\n    if (typeof contract === \"string\") {\n      var web3Instance = new constructor.web3.eth.Contract(constructor.abi);\n      web3Instance.options.address = contract;\n      contract = web3Instance;\n    } // Core:\n\n\n    instance.methods = {};\n    instance.abi = constructor.abi;\n    instance.address = contract.options.address;\n    instance.transactionHash = contract.transactionHash;\n    instance.contract = contract; //for stacktracing in tests\n\n    if (constructor.debugger) {\n      instance.debugger = constructor.debugger;\n    } // User defined methods, overloaded methods, events\n\n\n    instance.abi.forEach(function (item) {\n      switch (item.type) {\n        case \"function\":\n          var isConstant = [\"pure\", \"view\"].includes(item.stateMutability) || item.constant; // new form // deprecated case\n\n          var signature = webUtils._jsonInterfaceMethodToString(item);\n\n          var method = function (constant, web3Method) {\n            var fn;\n            constant ? fn = execute.call.call(constructor, web3Method, item, instance.address) : fn = execute.send.call(constructor, web3Method, item, instance.address);\n            fn.call = execute.call.call(constructor, web3Method, item, instance.address);\n            fn.sendTransaction = execute.send.call(constructor, web3Method, item, instance.address);\n            fn.estimateGas = execute.estimate.call(constructor, web3Method, item, instance.address);\n            fn.request = execute.request.call(constructor, web3Method, item, instance.address);\n            return fn;\n          }; // Only define methods once. Any overloaded methods will have all their\n          // accessors available by ABI signature available on the `methods` key below.\n\n\n          if (instance[item.name] === undefined) {\n            instance[item.name] = method(isConstant, contract.methods[item.name]);\n          } // Overloaded methods should be invoked via the .methods property\n\n\n          instance.methods[signature] = method(isConstant, contract.methods[signature]);\n          break;\n\n        case \"event\":\n          instance[item.name] = execute.event.call(constructor, contract.events[item.name]);\n          break;\n      }\n    }); // sendTransaction / send\n\n    instance.sendTransaction = execute.send.call(constructor, null, null, instance.address); // Prefer user defined `send`\n\n    if (!instance.send) {\n      instance.send = function (value) {\n        let txParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const packet = Object.assign({\n          value: value\n        }, txParams);\n        return instance.sendTransaction(packet);\n      };\n    } // Other events\n\n\n    instance.allEvents = execute.allEvents.call(constructor, contract);\n    instance.getPastEvents = execute.getPastEvents.call(constructor, contract);\n  }\n\n  Contract._constructorMethods = constructorMethods(Contract); // Getter functions are scoped to Contract object.\n\n  Contract._properties = properties;\n  bootstrap(Contract);\n  module.exports = Contract;\n  return Contract;\n})(module || {});","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/@truffle/contract/lib/contract/index.js"],"names":["debug","require","Web3","webUtils","execute","bootstrap","constructorMethods","properties","Object","keys","length","global","module","Contract","contract","instance","constructor","web3Instance","web3","eth","abi","options","address","methods","transactionHash","debugger","forEach","item","type","isConstant","includes","stateMutability","constant","signature","_jsonInterfaceMethodToString","method","web3Method","fn","call","send","sendTransaction","estimateGas","estimate","request","name","undefined","event","events","value","txParams","packet","assign","allEvents","getPastEvents","_constructorMethods","_properties","exports"],"mappings":"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","sourcesContent":["const debug = require(\"debug\")(\"contract:contract\");\nlet Web3 = require(\"web3\");\nconst webUtils = require(\"web3-utils\");\nconst execute = require(\"../execute\");\nconst bootstrap = require(\"./bootstrap\");\nconst constructorMethods = require(\"./constructorMethods\");\nconst properties = require(\"./properties\");\n\n// For browserified version. If browserify gave us an empty version,\n// look for the one provided by the user.\nif (typeof Web3 === \"object\" && Object.keys(Web3).length === 0) {\n  Web3 = global.Web3;\n}\n\n(function (module) {\n  // Accepts a contract object created with web3.eth.Contract or an address.\n  function Contract(contract) {\n    var instance = this;\n    var constructor = instance.constructor;\n\n    // Disambiguate between .at() and .new()\n    if (typeof contract === \"string\") {\n      var web3Instance = new constructor.web3.eth.Contract(constructor.abi);\n      web3Instance.options.address = contract;\n      contract = web3Instance;\n    }\n\n    // Core:\n    instance.methods = {};\n    instance.abi = constructor.abi;\n    instance.address = contract.options.address;\n    instance.transactionHash = contract.transactionHash;\n    instance.contract = contract;\n\n    //for stacktracing in tests\n    if (constructor.debugger) {\n      instance.debugger = constructor.debugger;\n    }\n\n    // User defined methods, overloaded methods, events\n    instance.abi.forEach(function (item) {\n      switch (item.type) {\n        case \"function\":\n          var isConstant =\n            [\"pure\", \"view\"].includes(item.stateMutability) || item.constant; // new form // deprecated case\n\n          var signature = webUtils._jsonInterfaceMethodToString(item);\n\n          var method = function (constant, web3Method) {\n            var fn;\n\n            constant\n              ? (fn = execute.call.call(\n                  constructor,\n                  web3Method,\n                  item,\n                  instance.address\n                ))\n              : (fn = execute.send.call(\n                  constructor,\n                  web3Method,\n                  item,\n                  instance.address\n                ));\n\n            fn.call = execute.call.call(\n              constructor,\n              web3Method,\n              item,\n              instance.address\n            );\n            fn.sendTransaction = execute.send.call(\n              constructor,\n              web3Method,\n              item,\n              instance.address\n            );\n            fn.estimateGas = execute.estimate.call(\n              constructor,\n              web3Method,\n              item,\n              instance.address\n            );\n            fn.request = execute.request.call(\n              constructor,\n              web3Method,\n              item,\n              instance.address\n            );\n\n            return fn;\n          };\n\n          // Only define methods once. Any overloaded methods will have all their\n          // accessors available by ABI signature available on the `methods` key below.\n          if (instance[item.name] === undefined) {\n            instance[item.name] = method(\n              isConstant,\n              contract.methods[item.name]\n            );\n          }\n\n          // Overloaded methods should be invoked via the .methods property\n          instance.methods[signature] = method(\n            isConstant,\n            contract.methods[signature]\n          );\n          break;\n\n        case \"event\":\n          instance[item.name] = execute.event.call(\n            constructor,\n            contract.events[item.name]\n          );\n          break;\n      }\n    });\n\n    // sendTransaction / send\n    instance.sendTransaction = execute.send.call(\n      constructor,\n      null,\n      null,\n      instance.address\n    );\n\n    // Prefer user defined `send`\n    if (!instance.send) {\n      instance.send = (value, txParams = {}) => {\n        const packet = Object.assign({value: value}, txParams);\n        return instance.sendTransaction(packet);\n      };\n    }\n\n    // Other events\n    instance.allEvents = execute.allEvents.call(constructor, contract);\n    instance.getPastEvents = execute.getPastEvents.call(constructor, contract);\n  }\n\n  Contract._constructorMethods = constructorMethods(Contract);\n\n  // Getter functions are scoped to Contract object.\n  Contract._properties = properties;\n\n  bootstrap(Contract);\n  module.exports = Contract;\n\n  return Contract;\n})(module || {});\n"]},"metadata":{},"sourceType":"script"}