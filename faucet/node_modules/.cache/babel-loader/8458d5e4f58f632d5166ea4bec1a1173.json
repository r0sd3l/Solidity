{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { nat } from './nat.js';\nimport { indexToMappedConstantMapperFor, indexToMappedConstantUnmapperFor } from './_internals/mappers/IndexToMappedConstant.js';\n\nfunction computeNumChoices(options) {\n  if (options.length === 0) throw new Error(`fc.mapToConstant expects at least one option`);\n  let numChoices = 0;\n\n  for (let idx = 0; idx !== options.length; ++idx) {\n    if (options[idx].num < 0) throw new Error(`fc.mapToConstant expects all options to have a number of entries greater or equal to zero`);\n    numChoices += options[idx].num;\n  }\n\n  if (numChoices === 0) throw new Error(`fc.mapToConstant expects at least one choice among options`);\n  return numChoices;\n}\n\nexport function mapToConstant() {\n  for (var _len = arguments.length, entries = new Array(_len), _key = 0; _key < _len; _key++) {\n    entries[_key] = arguments[_key];\n  }\n\n  const numChoices = computeNumChoices(entries);\n  return convertFromNext(convertToNext(nat({\n    max: numChoices - 1\n  })).map(indexToMappedConstantMapperFor(entries), indexToMappedConstantUnmapperFor(entries)));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/mapToConstant.js"],"names":["convertFromNext","convertToNext","nat","indexToMappedConstantMapperFor","indexToMappedConstantUnmapperFor","computeNumChoices","options","length","Error","numChoices","idx","num","mapToConstant","entries","max","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,8BAAT,EAAyCC,gCAAzC,QAAkF,+CAAlF;;AACA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAChC,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EACI,MAAM,IAAIC,KAAJ,CAAW,8CAAX,CAAN;AACJ,MAAIC,UAAU,GAAG,CAAjB;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKJ,OAAO,CAACC,MAAlC,EAA0C,EAAEG,GAA5C,EAAiD;AAC7C,QAAIJ,OAAO,CAACI,GAAD,CAAP,CAAaC,GAAb,GAAmB,CAAvB,EACI,MAAM,IAAIH,KAAJ,CAAW,2FAAX,CAAN;AACJC,IAAAA,UAAU,IAAIH,OAAO,CAACI,GAAD,CAAP,CAAaC,GAA3B;AACH;;AACD,MAAIF,UAAU,KAAK,CAAnB,EACI,MAAM,IAAID,KAAJ,CAAW,4DAAX,CAAN;AACJ,SAAOC,UAAP;AACH;;AACD,OAAO,SAASG,aAAT,GAAmC;AAAA,oCAATC,OAAS;AAATA,IAAAA,OAAS;AAAA;;AACtC,QAAMJ,UAAU,GAAGJ,iBAAiB,CAACQ,OAAD,CAApC;AACA,SAAOb,eAAe,CAACC,aAAa,CAACC,GAAG,CAAC;AAAEY,IAAAA,GAAG,EAAEL,UAAU,GAAG;AAApB,GAAD,CAAJ,CAAb,CAA4CM,GAA5C,CAAgDZ,8BAA8B,CAACU,OAAD,CAA9E,EAAyFT,gCAAgC,CAACS,OAAD,CAAzH,CAAD,CAAtB;AACH","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { nat } from './nat.js';\nimport { indexToMappedConstantMapperFor, indexToMappedConstantUnmapperFor, } from './_internals/mappers/IndexToMappedConstant.js';\nfunction computeNumChoices(options) {\n    if (options.length === 0)\n        throw new Error(`fc.mapToConstant expects at least one option`);\n    let numChoices = 0;\n    for (let idx = 0; idx !== options.length; ++idx) {\n        if (options[idx].num < 0)\n            throw new Error(`fc.mapToConstant expects all options to have a number of entries greater or equal to zero`);\n        numChoices += options[idx].num;\n    }\n    if (numChoices === 0)\n        throw new Error(`fc.mapToConstant expects at least one choice among options`);\n    return numChoices;\n}\nexport function mapToConstant(...entries) {\n    const numChoices = computeNumChoices(entries);\n    return convertFromNext(convertToNext(nat({ max: numChoices - 1 })).map(indexToMappedConstantMapperFor(entries), indexToMappedConstantUnmapperFor(entries)));\n}\n"]},"metadata":{},"sourceType":"module"}