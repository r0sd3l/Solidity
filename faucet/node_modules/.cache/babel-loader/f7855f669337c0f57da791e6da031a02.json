{"ast":null,"code":"import { hash } from '../utils/hash.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../check/symbols.js';\nimport { array } from './array.js';\nimport { integer } from './integer.js';\nimport { tuple } from './tuple.js';\nimport { escapeForMultilineComments } from './_internals/helpers/TextEscaper.js';\nexport function func(arb) {\n  return tuple(array(arb, {\n    minLength: 1\n  }), integer().noShrink()).map(_ref => {\n    let [outs, seed] = _ref;\n\n    const producer = () => {\n      const recorded = {};\n\n      const f = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        const repr = stringify(args);\n        const val = outs[hash(`${seed}${repr}`) % outs.length];\n        recorded[repr] = val;\n        return hasCloneMethod(val) ? val[cloneMethod]() : val;\n      };\n\n      function prettyPrint(stringifiedOuts) {\n        const seenValues = Object.keys(recorded).sort().map(k => `${k} => ${stringify(recorded[k])}`).map(line => `/* ${escapeForMultilineComments(line)} */`);\n        return `function(...args) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const outs = ${stringifiedOuts};\n  return outs[hash('${seed}' + stringify(args)) % outs.length];\n}`;\n      }\n\n      return Object.defineProperties(f, {\n        toString: {\n          value: () => prettyPrint(stringify(outs))\n        },\n        [toStringMethod]: {\n          value: () => prettyPrint(stringify(outs))\n        },\n        [asyncToStringMethod]: {\n          value: async () => prettyPrint(await asyncStringify(outs))\n        },\n        [cloneMethod]: {\n          value: producer,\n          configurable: true\n        }\n      });\n    };\n\n    return producer();\n  });\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/func.js"],"names":["hash","asyncStringify","asyncToStringMethod","stringify","toStringMethod","cloneMethod","hasCloneMethod","array","integer","tuple","escapeForMultilineComments","func","arb","minLength","noShrink","map","outs","seed","producer","recorded","f","args","repr","val","length","prettyPrint","stringifiedOuts","seenValues","Object","keys","sort","k","line","join","defineProperties","toString","value","configurable"],"mappings":"AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,SAASC,cAAT,EAAyBC,mBAAzB,EAA8CC,SAA9C,EAAyDC,cAAzD,QAA+E,uBAA/E;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,qBAA5C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,0BAAT,QAA2C,qCAA3C;AACA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmB;AACtB,SAAOH,KAAK,CAACF,KAAK,CAACK,GAAD,EAAM;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAN,CAAN,EAA+BL,OAAO,GAAGM,QAAV,EAA/B,CAAL,CAA0DC,GAA1D,CAA8D,QAAkB;AAAA,QAAjB,CAACC,IAAD,EAAOC,IAAP,CAAiB;;AACnF,UAAMC,QAAQ,GAAG,MAAM;AACnB,YAAMC,QAAQ,GAAG,EAAjB;;AACA,YAAMC,CAAC,GAAG,YAAa;AAAA,0CAATC,IAAS;AAATA,UAAAA,IAAS;AAAA;;AACnB,cAAMC,IAAI,GAAGnB,SAAS,CAACkB,IAAD,CAAtB;AACA,cAAME,GAAG,GAAGP,IAAI,CAAChB,IAAI,CAAE,GAAEiB,IAAK,GAAEK,IAAK,EAAhB,CAAJ,GAAyBN,IAAI,CAACQ,MAA/B,CAAhB;AACAL,QAAAA,QAAQ,CAACG,IAAD,CAAR,GAAiBC,GAAjB;AACA,eAAOjB,cAAc,CAACiB,GAAD,CAAd,GAAsBA,GAAG,CAAClB,WAAD,CAAH,EAAtB,GAA2CkB,GAAlD;AACH,OALD;;AAMA,eAASE,WAAT,CAAqBC,eAArB,EAAsC;AAClC,cAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYV,QAAZ,EACdW,IADc,GAEdf,GAFc,CAETgB,CAAD,IAAQ,GAAEA,CAAE,OAAM5B,SAAS,CAACgB,QAAQ,CAACY,CAAD,CAAT,CAAc,EAF/B,EAGdhB,GAHc,CAGTiB,IAAD,IAAW,MAAKtB,0BAA0B,CAACsB,IAAD,CAAO,KAHvC,CAAnB;AAIA,eAAQ;AACxB,qDAAqDL,UAAU,CAACH,MAAX,KAAsB,CAAtB,GAA2B,OAAMG,UAAU,CAACM,IAAX,CAAgB,MAAhB,CAAwB,EAAzD,GAA6D,EAAG;AACrH,iBAAiBP,eAAgB;AACjC,sBAAsBT,IAAK;AAC3B,EAJgB;AAKH;;AACD,aAAOW,MAAM,CAACM,gBAAP,CAAwBd,CAAxB,EAA2B;AAC9Be,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE,MAAMX,WAAW,CAACtB,SAAS,CAACa,IAAD,CAAV;AAA1B,SADoB;AAE9B,SAACZ,cAAD,GAAkB;AAAEgC,UAAAA,KAAK,EAAE,MAAMX,WAAW,CAACtB,SAAS,CAACa,IAAD,CAAV;AAA1B,SAFY;AAG9B,SAACd,mBAAD,GAAuB;AAAEkC,UAAAA,KAAK,EAAE,YAAYX,WAAW,CAAC,MAAMxB,cAAc,CAACe,IAAD,CAArB;AAAhC,SAHO;AAI9B,SAACX,WAAD,GAAe;AAAE+B,UAAAA,KAAK,EAAElB,QAAT;AAAmBmB,UAAAA,YAAY,EAAE;AAAjC;AAJe,OAA3B,CAAP;AAMH,KAzBD;;AA0BA,WAAOnB,QAAQ,EAAf;AACH,GA5BM,CAAP;AA6BH","sourcesContent":["import { hash } from '../utils/hash.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../check/symbols.js';\nimport { array } from './array.js';\nimport { integer } from './integer.js';\nimport { tuple } from './tuple.js';\nimport { escapeForMultilineComments } from './_internals/helpers/TextEscaper.js';\nexport function func(arb) {\n    return tuple(array(arb, { minLength: 1 }), integer().noShrink()).map(([outs, seed]) => {\n        const producer = () => {\n            const recorded = {};\n            const f = (...args) => {\n                const repr = stringify(args);\n                const val = outs[hash(`${seed}${repr}`) % outs.length];\n                recorded[repr] = val;\n                return hasCloneMethod(val) ? val[cloneMethod]() : val;\n            };\n            function prettyPrint(stringifiedOuts) {\n                const seenValues = Object.keys(recorded)\n                    .sort()\n                    .map((k) => `${k} => ${stringify(recorded[k])}`)\n                    .map((line) => `/* ${escapeForMultilineComments(line)} */`);\n                return `function(...args) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const outs = ${stringifiedOuts};\n  return outs[hash('${seed}' + stringify(args)) % outs.length];\n}`;\n            }\n            return Object.defineProperties(f, {\n                toString: { value: () => prettyPrint(stringify(outs)) },\n                [toStringMethod]: { value: () => prettyPrint(stringify(outs)) },\n                [asyncToStringMethod]: { value: async () => prettyPrint(await asyncStringify(outs)) },\n                [cloneMethod]: { value: producer, configurable: true },\n            });\n        };\n        return producer();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}