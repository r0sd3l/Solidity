{"ast":null,"code":"export function keyValuePairsToObjectMapper(items) {\n  const obj = {};\n\n  for (const keyValue of items) {\n    obj[keyValue[0]] = keyValue[1];\n  }\n\n  return obj;\n}\n\nfunction buildInvalidPropertyNameFilter(obj) {\n  return function invalidPropertyNameFilter(key) {\n    const descriptor = Object.getOwnPropertyDescriptor(obj, key);\n    return descriptor === undefined || !descriptor.configurable || !descriptor.enumerable || !descriptor.writable || descriptor.get !== undefined || descriptor.set !== undefined;\n  };\n}\n\nexport function keyValuePairsToObjectUnmapper(value) {\n  if (typeof value !== 'object' || value === null) {\n    throw new Error('Incompatible instance received: should be a non-null object');\n  }\n\n  if (!('constructor' in value) || value.constructor !== Object) {\n    throw new Error('Incompatible instance received: should be of exact type Object');\n  }\n\n  if (Object.getOwnPropertySymbols(value).length > 0) {\n    throw new Error('Incompatible instance received: should contain symbols');\n  }\n\n  if (Object.getOwnPropertyNames(value).find(buildInvalidPropertyNameFilter(value)) !== undefined) {\n    throw new Error('Incompatible instance received: should contain only c/e/w properties without get/set');\n  }\n\n  return Object.entries(value);\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/KeyValuePairsToObject.js"],"names":["keyValuePairsToObjectMapper","items","obj","keyValue","buildInvalidPropertyNameFilter","invalidPropertyNameFilter","key","descriptor","Object","getOwnPropertyDescriptor","undefined","configurable","enumerable","writable","get","set","keyValuePairsToObjectUnmapper","value","Error","constructor","getOwnPropertySymbols","length","getOwnPropertyNames","find","entries"],"mappings":"AAAA,OAAO,SAASA,2BAAT,CAAqCC,KAArC,EAA4C;AAC/C,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,MAAMC,QAAX,IAAuBF,KAAvB,EAA8B;AAC1BC,IAAAA,GAAG,CAACC,QAAQ,CAAC,CAAD,CAAT,CAAH,GAAmBA,QAAQ,CAAC,CAAD,CAA3B;AACH;;AACD,SAAOD,GAAP;AACH;;AACD,SAASE,8BAAT,CAAwCF,GAAxC,EAA6C;AACzC,SAAO,SAASG,yBAAT,CAAmCC,GAAnC,EAAwC;AAC3C,UAAMC,UAAU,GAAGC,MAAM,CAACC,wBAAP,CAAgCP,GAAhC,EAAqCI,GAArC,CAAnB;AACA,WAAQC,UAAU,KAAKG,SAAf,IACJ,CAACH,UAAU,CAACI,YADR,IAEJ,CAACJ,UAAU,CAACK,UAFR,IAGJ,CAACL,UAAU,CAACM,QAHR,IAIJN,UAAU,CAACO,GAAX,KAAmBJ,SAJf,IAKJH,UAAU,CAACQ,GAAX,KAAmBL,SALvB;AAMH,GARD;AASH;;AACD,OAAO,SAASM,6BAAT,CAAuCC,KAAvC,EAA8C;AACjD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC7C,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACH;;AACD,MAAI,EAAE,iBAAiBD,KAAnB,KAA6BA,KAAK,CAACE,WAAN,KAAsBX,MAAvD,EAA+D;AAC3D,UAAM,IAAIU,KAAJ,CAAU,gEAAV,CAAN;AACH;;AACD,MAAIV,MAAM,CAACY,qBAAP,CAA6BH,KAA7B,EAAoCI,MAApC,GAA6C,CAAjD,EAAoD;AAChD,UAAM,IAAIH,KAAJ,CAAU,wDAAV,CAAN;AACH;;AACD,MAAIV,MAAM,CAACc,mBAAP,CAA2BL,KAA3B,EAAkCM,IAAlC,CAAuCnB,8BAA8B,CAACa,KAAD,CAArE,MAAkFP,SAAtF,EAAiG;AAC7F,UAAM,IAAIQ,KAAJ,CAAU,sFAAV,CAAN;AACH;;AACD,SAAOV,MAAM,CAACgB,OAAP,CAAeP,KAAf,CAAP;AACH","sourcesContent":["export function keyValuePairsToObjectMapper(items) {\n    const obj = {};\n    for (const keyValue of items) {\n        obj[keyValue[0]] = keyValue[1];\n    }\n    return obj;\n}\nfunction buildInvalidPropertyNameFilter(obj) {\n    return function invalidPropertyNameFilter(key) {\n        const descriptor = Object.getOwnPropertyDescriptor(obj, key);\n        return (descriptor === undefined ||\n            !descriptor.configurable ||\n            !descriptor.enumerable ||\n            !descriptor.writable ||\n            descriptor.get !== undefined ||\n            descriptor.set !== undefined);\n    };\n}\nexport function keyValuePairsToObjectUnmapper(value) {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Incompatible instance received: should be a non-null object');\n    }\n    if (!('constructor' in value) || value.constructor !== Object) {\n        throw new Error('Incompatible instance received: should be of exact type Object');\n    }\n    if (Object.getOwnPropertySymbols(value).length > 0) {\n        throw new Error('Incompatible instance received: should contain symbols');\n    }\n    if (Object.getOwnPropertyNames(value).find(buildInvalidPropertyNameFilter(value)) !== undefined) {\n        throw new Error('Incompatible instance received: should contain only c/e/w properties without get/set');\n    }\n    return Object.entries(value);\n}\n"]},"metadata":{},"sourceType":"module"}