{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\n\nconst util = require('util');\n\nconst utils = require('./utils');\n\nconst Simple = require('./simple');\n\nconst Decoder = require('./decoder');\n\nconst constants = require('./constants');\n\nconst bignumber = require('bignumber.js').BigNumber;\n\nconst NoFilter = require('nofilter');\n\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SYMS = constants.SYMS;\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's';\n  } else {\n    return '';\n  }\n}\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\n\n\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   * @param {number} [options.depth=1] - initial indentation depth\n   * @param {boolean} [options.no_summary=false] - if true, omit the summary\n   *   of the full bytes read at the end\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      depth: 1,\n      max_depth: 10,\n      no_summary: false\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    });\n    const max_depth = opts.max_depth;\n    delete opts.max_depth;\n    const depth = opts.depth;\n    delete opts.depth;\n    super(opts);\n    this.depth = depth;\n    this.max_depth = max_depth;\n    this.all = new NoFilter();\n    opts.tags = {\n      24: this._tag_24.bind(this)\n    };\n    this.parser = new Decoder(opts);\n    this.parser.on('value', this._on_value.bind(this));\n    this.parser.on('start', this._on_start.bind(this));\n    this.parser.on('start-string', this._on_start_string.bind(this));\n    this.parser.on('stop', this._on_stop.bind(this));\n    this.parser.on('more-bytes', this._on_more.bind(this));\n    this.parser.on('error', this._on_error.bind(this));\n\n    if (!opts.no_summary) {\n      this.parser.on('data', this._on_data.bind(this));\n    }\n\n    this.parser.bs.on('read', this._on_read.bind(this));\n  }\n  /**\n   * @private\n   */\n\n\n  _tag_24(v) {\n    const c = new Commented({\n      depth: this.depth + 1,\n      no_summary: true\n    });\n    c.on('data', b => this.push(b));\n    c.on('error', er => this.emit('error', er));\n    c.end(v);\n  }\n\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb);\n  }\n  /**\n   * @private\n   */\n\n\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb);\n  }\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n\n\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required');\n    }\n\n    let encoding = typeof input === 'string' ? 'hex' : void 0;\n    let max_depth = 10;\n\n    switch (typeof options) {\n      case 'function':\n        cb = options;\n        break;\n\n      case 'string':\n        encoding = options;\n        break;\n\n      case 'number':\n        max_depth = options;\n        break;\n\n      case 'object':\n        const ref1 = options.encoding;\n        const ref2 = options.max_depth;\n        encoding = ref1 != null ? ref1 : encoding;\n        max_depth = ref2 != null ? ref2 : max_depth;\n        break;\n\n      case 'undefined':\n        break;\n\n      default:\n        throw new Error('Unknown option type');\n    }\n\n    const bs = new NoFilter();\n    const d = new Commented({\n      max_depth\n    });\n    let p = null;\n\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'));\n      });\n      d.on('error', cb);\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'));\n        });\n        return d.on('error', reject);\n      });\n    }\n\n    d.pipe(bs);\n    d.end(input, encoding);\n    return p;\n  }\n  /**\n   * @private\n   */\n\n\n  _on_error(er) {\n    this.push('ERROR: ');\n    this.push(er.toString());\n    this.push('\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_read(buf) {\n    this.all.write(buf);\n    const hex = buf.toString('hex');\n    this.push(new Array(this.depth + 1).join('  '));\n    this.push(hex);\n    let ind = (this.max_depth - this.depth) * 2;\n    ind -= hex.length;\n\n    if (ind < 1) {\n      ind = 1;\n    }\n\n    this.push(new Array(ind + 1).join(' '));\n    return this.push('-- ');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++;\n    let desc = '';\n\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,';\n        break;\n\n      case MT.NEG_INT:\n        desc = 'Negative number,';\n        break;\n\n      case MT.ARRAY:\n        desc = 'Array, length';\n        break;\n\n      case MT.MAP:\n        desc = 'Map, count';\n        break;\n\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length';\n        break;\n\n      case MT.UTF8_STRING:\n        desc = 'String, length';\n        break;\n\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,';\n        } else {\n          desc = 'Float,';\n        }\n\n        break;\n    }\n\n    return this.push(desc + ' next ' + len + ' byte' + plural(len) + '\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++;\n    let desc = '';\n\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag;\n        break;\n\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + tag.toString();\n        break;\n    }\n\n    return this.push(desc + '\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++;\n\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `);\n          break;\n\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `);\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `);\n          }\n\n          break;\n      }\n    }\n\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`);\n\n        if (tag == 24) {\n          this.push(' Encoded CBOR data item');\n        }\n\n        break;\n\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)');\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`);\n        }\n\n        break;\n\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)');\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`);\n        }\n\n        break;\n\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)');\n        break;\n\n      case MT.UTF8_STRING:\n        this.push('String (streaming)');\n        break;\n    }\n\n    return this.push('\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_stop(mt) {\n    return this.depth--;\n  }\n  /**\n   * @private\n   */\n\n\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `);\n          break;\n\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `);\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `);\n          }\n\n          break;\n      }\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n');\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n');\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n');\n    } else if (typeof val === 'string') {\n      this.depth--;\n\n      if (val.length > 0) {\n        this.push(JSON.stringify(val));\n        this.push('\\n');\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--;\n\n      if (val.length > 0) {\n        this.push(val.toString('hex'));\n        this.push('\\n');\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString());\n      this.push('\\n');\n    } else {\n      this.push(util.inspect(val));\n      this.push('\\n');\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  _on_data() {\n    this.push('0x');\n    this.push(this.all.read().toString('hex'));\n    return this.push('\\n');\n  }\n\n}\n\nmodule.exports = Commented;","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/cbor/lib/commented.js"],"names":["stream","require","util","utils","Simple","Decoder","constants","bignumber","BigNumber","NoFilter","MT","NUMBYTES","SYMS","plural","c","Commented","Transform","constructor","options","opts","Object","assign","depth","max_depth","no_summary","readableObjectMode","writableObjectMode","all","tags","_tag_24","bind","parser","on","_on_value","_on_start","_on_start_string","_on_stop","_on_more","_on_error","_on_data","bs","_on_read","v","b","push","er","emit","end","_transform","fresh","encoding","cb","write","_flush","comment","input","Error","ref1","ref2","d","p","toString","Promise","resolve","reject","pipe","buf","hex","Array","join","ind","length","mt","len","parent_mt","pos","desc","POS_INT","NEG_INT","ARRAY","MAP","BYTE_STRING","UTF8_STRING","SIMPLE_FLOAT","tag","BREAK","Math","floor","TAG","STREAM","val","ai","NULL","UNDEFINED","JSON","stringify","Buffer","isBuffer","inspect","ONE","TWO","FOUR","EIGHT","read","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst util = require('util')\nconst utils = require('./utils')\nconst Simple = require('./simple')\nconst Decoder = require('./decoder')\nconst constants = require('./constants')\nconst bignumber = require('bignumber.js').BigNumber\nconst NoFilter = require('nofilter')\n\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SYMS = constants.SYMS\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's'\n  } else {\n    return ''\n  }\n}\n\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   * @param {number} [options.depth=1] - initial indentation depth\n   * @param {boolean} [options.no_summary=false] - if true, omit the summary\n   *   of the full bytes read at the end\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      depth: 1,\n      max_depth: 10,\n      no_summary: false\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    })\n    const max_depth = opts.max_depth\n    delete opts.max_depth\n    const depth = opts.depth\n    delete opts.depth\n    super(opts)\n\n    this.depth = depth\n    this.max_depth = max_depth\n    this.all = new NoFilter()\n\n    opts.tags = {\n      24: this._tag_24.bind(this)\n    }\n    this.parser = new Decoder(opts)\n    this.parser.on('value', this._on_value.bind(this))\n    this.parser.on('start', this._on_start.bind(this))\n    this.parser.on('start-string', this._on_start_string.bind(this))\n    this.parser.on('stop', this._on_stop.bind(this))\n    this.parser.on('more-bytes', this._on_more.bind(this))\n    this.parser.on('error', this._on_error.bind(this))\n    if (!opts.no_summary) {\n      this.parser.on('data', this._on_data.bind(this))\n    }\n    this.parser.bs.on('read', this._on_read.bind(this))\n  }\n\n  /**\n   * @private\n   */\n  _tag_24(v) {\n    const c = new Commented({depth: this.depth+1, no_summary: true})\n    c.on('data', b => this.push(b))\n    c.on('error', er => this.emit('error', er))\n    c.end(v)\n  }\n\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb)\n  }\n\n  /**\n   * @private\n   */\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb)\n  }\n\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required')\n    }\n    let encoding = (typeof input === 'string') ? 'hex' : void 0\n    let max_depth = 10\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        break\n      case 'string':\n        encoding = options\n        break\n      case 'number':\n        max_depth = options\n        break\n      case 'object':\n        const ref1 = options.encoding\n        const ref2 = options.max_depth\n        encoding = (ref1 != null) ? ref1 : encoding\n        max_depth = (ref2 != null) ? ref2 : max_depth\n        break\n      case 'undefined':\n        break\n      default:\n        throw new Error('Unknown option type')\n    }\n    const bs = new NoFilter()\n    const d = new Commented({\n      max_depth\n    })\n    let p = null\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'))\n      })\n      d.on('error', cb)\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'))\n        })\n        return d.on('error', reject)\n      })\n    }\n    d.pipe(bs)\n    d.end(input, encoding)\n    return p\n  }\n\n  /**\n   * @private\n   */\n  _on_error(er) {\n    this.push('ERROR: ')\n    this.push(er.toString())\n    this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_read(buf) {\n    this.all.write(buf)\n    const hex = buf.toString('hex')\n    this.push(new Array(this.depth + 1).join('  '))\n    this.push(hex)\n    let ind = (this.max_depth - this.depth) * 2\n    ind -= hex.length\n    if (ind < 1) {\n      ind = 1\n    }\n    this.push(new Array(ind + 1).join(' '))\n    return this.push('-- ')\n  }\n\n  /**\n   * @private\n   */\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,'\n        break\n      case MT.NEG_INT:\n        desc = 'Negative number,'\n        break\n      case MT.ARRAY:\n        desc = 'Array, length'\n        break\n      case MT.MAP:\n        desc = 'Map, count'\n        break\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length'\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length'\n        break\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,'\n        } else {\n          desc = 'Float,'\n        }\n        break\n    }\n    return this.push(desc + ' next ' + len + ' byte' + (plural(len)) + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + (tag.toString())\n        break\n    }\n    return this.push(desc + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`)\n        if (tag == 24) {\n          this.push(' Encoded CBOR data item')\n        }\n        break\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)')\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`)\n        }\n        break\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)')\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`)\n        }\n        break\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)')\n        break\n      case MT.UTF8_STRING:\n        this.push('String (streaming)')\n        break\n    }\n    return this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_stop(mt) {\n    return this.depth--\n  }\n\n  /**\n   * @private\n   */\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n')\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n')\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n')\n    } else if (typeof val === 'string') {\n      this.depth--\n      if (val.length > 0 ) {\n        this.push(JSON.stringify(val))\n        this.push('\\n')\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--\n      if (val.length > 0) {\n        this.push(val.toString('hex'))\n        this.push('\\n')\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString())\n      this.push('\\n')\n    } else {\n      this.push(util.inspect(val))\n      this.push('\\n')\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--\n    }\n  }\n\n  /**\n   * @private\n   */\n  _on_data() {\n    this.push('0x')\n    this.push(this.all.read().toString('hex'))\n    return this.push('\\n')\n  }\n}\n\nmodule.exports = Commented\n"]},"metadata":{},"sourceType":"script"}