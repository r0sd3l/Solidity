{"ast":null,"code":"import { float } from './float.js';\nimport { array } from './array.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction toTypedMapper(data) {\n  return Float32Array.from(data);\n}\n\nfunction fromTypedUnmapper(value) {\n  if (!(value instanceof Float32Array)) throw new Error('Unexpected type');\n  return [...value];\n}\n\nexport function float32Array() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return convertFromNext(convertToNext(array(float(Object.assign(Object.assign({}, constraints), {\n    next: true\n  })), constraints)).map(toTypedMapper, fromTypedUnmapper));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/float32Array.js"],"names":["float","array","convertFromNext","convertToNext","toTypedMapper","data","Float32Array","from","fromTypedUnmapper","value","Error","float32Array","constraints","Object","assign","next","map"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAOC,YAAY,CAACC,IAAb,CAAkBF,IAAlB,CAAP;AACH;;AACD,SAASG,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,MAAI,EAAEA,KAAK,YAAYH,YAAnB,CAAJ,EACI,MAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACJ,SAAO,CAAC,GAAGD,KAAJ,CAAP;AACH;;AACD,OAAO,SAASE,YAAT,GAAwC;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AAC3C,SAAOV,eAAe,CAACC,aAAa,CAACF,KAAK,CAACD,KAAK,CAACa,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,WAAlB,CAAd,EAA8C;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAA9C,CAAD,CAAN,EAAuEH,WAAvE,CAAN,CAAb,CAAwGI,GAAxG,CAA4GZ,aAA5G,EAA2HI,iBAA3H,CAAD,CAAtB;AACH","sourcesContent":["import { float } from './float.js';\nimport { array } from './array.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nfunction toTypedMapper(data) {\n    return Float32Array.from(data);\n}\nfunction fromTypedUnmapper(value) {\n    if (!(value instanceof Float32Array))\n        throw new Error('Unexpected type');\n    return [...value];\n}\nexport function float32Array(constraints = {}) {\n    return convertFromNext(convertToNext(array(float(Object.assign(Object.assign({}, constraints), { next: true })), constraints)).map(toTypedMapper, fromTypedUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}