{"ast":null,"code":"export function wordsToJoinedStringMapper(words) {\n  return words.map(w => w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w).join(' ');\n}\nexport function wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n  return function wordsToJoinedStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    const words = [];\n\n    for (const candidate of value.split(' ')) {\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\nexport function wordsToSentenceMapper(words) {\n  let sentence = words.join(' ');\n\n  if (sentence[sentence.length - 1] === ',') {\n    sentence = sentence.substr(0, sentence.length - 1);\n  }\n\n  return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexport function wordsToSentenceUnmapperFor(wordsArbitrary) {\n  return function wordsToSentenceUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    if (value.length < 2 || value[value.length - 1] !== '.' || value[value.length - 2] === ',' || value[0].toLowerCase().toUpperCase() !== value[0]) {\n      throw new Error('Unsupported value');\n    }\n\n    const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n    const words = [];\n    const candidates = adaptedValue.split(' ');\n\n    for (let idx = 0; idx !== candidates.length; ++idx) {\n      const candidate = candidates[idx];\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\nexport function sentencesToParagraphMapper(sentences) {\n  return sentences.join(' ');\n}\nexport function sentencesToParagraphUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const sentences = value.split('. ');\n\n  for (let idx = 0; idx < sentences.length - 1; ++idx) {\n    sentences[idx] += '.';\n  }\n\n  return sentences;\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/WordsToLorem.js"],"names":["wordsToJoinedStringMapper","words","map","w","length","substr","join","wordsToJoinedStringUnmapperFor","wordsArbitrary","wordsToJoinedStringUnmapper","value","Error","candidate","split","canShrinkWithoutContext","push","wordsToSentenceMapper","sentence","toUpperCase","substring","wordsToSentenceUnmapperFor","wordsToSentenceUnmapper","toLowerCase","adaptedValue","candidates","idx","sentencesToParagraphMapper","sentences","sentencesToParagraphUnmapper"],"mappings":"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","sourcesContent":["export function wordsToJoinedStringMapper(words) {\n    return words.map((w) => (w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w)).join(' ');\n}\nexport function wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n    return function wordsToJoinedStringUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        const words = [];\n        for (const candidate of value.split(' ')) {\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexport function wordsToSentenceMapper(words) {\n    let sentence = words.join(' ');\n    if (sentence[sentence.length - 1] === ',') {\n        sentence = sentence.substr(0, sentence.length - 1);\n    }\n    return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexport function wordsToSentenceUnmapperFor(wordsArbitrary) {\n    return function wordsToSentenceUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        if (value.length < 2 ||\n            value[value.length - 1] !== '.' ||\n            value[value.length - 2] === ',' ||\n            value[0].toLowerCase().toUpperCase() !== value[0]) {\n            throw new Error('Unsupported value');\n        }\n        const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n        const words = [];\n        const candidates = adaptedValue.split(' ');\n        for (let idx = 0; idx !== candidates.length; ++idx) {\n            const candidate = candidates[idx];\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexport function sentencesToParagraphMapper(sentences) {\n    return sentences.join(' ');\n}\nexport function sentencesToParagraphUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported type');\n    }\n    const sentences = value.split('. ');\n    for (let idx = 0; idx < sentences.length - 1; ++idx) {\n        sentences[idx] += '.';\n    }\n    return sentences;\n}\n"]},"metadata":{},"sourceType":"module"}