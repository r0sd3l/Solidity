{"ast":null,"code":"import { bigUintN } from '../bigUintN.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions } from './helpers/ToggleFlags.js';\nexport class MixedCaseArbitrary extends NextArbitrary {\n  constructor(stringArb, toggleCase, untoggleAll) {\n    super();\n    this.stringArb = stringArb;\n    this.toggleCase = toggleCase;\n    this.untoggleAll = untoggleAll;\n  }\n\n  buildContextFor(rawStringNextValue, flagsNextValue) {\n    return {\n      rawString: rawStringNextValue.value,\n      rawStringContext: rawStringNextValue.context,\n      flags: flagsNextValue.value,\n      flagsContext: flagsNextValue.context\n    };\n  }\n\n  generate(mrng, biasFactor) {\n    const rawStringNextValue = this.stringArb.generate(mrng, biasFactor);\n    const chars = [...rawStringNextValue.value];\n    const togglePositions = computeTogglePositions(chars, this.toggleCase);\n    const flagsArb = convertToNext(bigUintN(togglePositions.length));\n    const flagsNextValue = flagsArb.generate(mrng, undefined);\n    applyFlagsOnChars(chars, flagsNextValue.value, togglePositions, this.toggleCase);\n    return new NextValue(chars.join(''), this.buildContextFor(rawStringNextValue, flagsNextValue));\n  }\n\n  canShrinkWithoutContext(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    let contextSafe;\n\n    if (context !== undefined) {\n      contextSafe = context;\n    } else {\n      if (this.untoggleAll !== undefined) {\n        const untoggledValue = this.untoggleAll(value);\n        const valueChars = [...value];\n        const untoggledValueChars = [...untoggledValue];\n        const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n        contextSafe = {\n          rawString: untoggledValue,\n          rawStringContext: undefined,\n          flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n          flagsContext: undefined\n        };\n      } else {\n        contextSafe = {\n          rawString: value,\n          rawStringContext: undefined,\n          flags: BigInt(0),\n          flagsContext: undefined\n        };\n      }\n    }\n\n    const rawString = contextSafe.rawString;\n    const flags = contextSafe.flags;\n    return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(nRawStringNextValue => {\n      const nChars = [...nRawStringNextValue.value];\n      const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);\n      const nFlags = computeNextFlags(flags, nTogglePositions.length);\n      applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);\n      return new NextValue(nChars.join(''), this.buildContextFor(nRawStringNextValue, new NextValue(nFlags, undefined)));\n    }).join(makeLazy(() => {\n      const chars = [...rawString];\n      const togglePositions = computeTogglePositions(chars, this.toggleCase);\n      return convertToNext(bigUintN(togglePositions.length)).shrink(flags, contextSafe.flagsContext).map(nFlagsNextValue => {\n        const nChars = chars.slice();\n        applyFlagsOnChars(nChars, nFlagsNextValue.value, togglePositions, this.toggleCase);\n        return new NextValue(nChars.join(''), this.buildContextFor(new NextValue(rawString, contextSafe.rawStringContext), nFlagsNextValue));\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/MixedCaseArbitrary.js"],"names":["bigUintN","NextArbitrary","convertToNext","NextValue","makeLazy","applyFlagsOnChars","computeFlagsFromChars","computeNextFlags","computeTogglePositions","MixedCaseArbitrary","constructor","stringArb","toggleCase","untoggleAll","buildContextFor","rawStringNextValue","flagsNextValue","rawString","value","rawStringContext","context","flags","flagsContext","generate","mrng","biasFactor","chars","togglePositions","flagsArb","length","undefined","join","canShrinkWithoutContext","shrink","contextSafe","untoggledValue","valueChars","untoggledValueChars","BigInt","map","nRawStringNextValue","nChars","nTogglePositions","nFlags","nFlagsNextValue","slice"],"mappings":"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","sourcesContent":["import { bigUintN } from '../bigUintN.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions, } from './helpers/ToggleFlags.js';\nexport class MixedCaseArbitrary extends NextArbitrary {\n    constructor(stringArb, toggleCase, untoggleAll) {\n        super();\n        this.stringArb = stringArb;\n        this.toggleCase = toggleCase;\n        this.untoggleAll = untoggleAll;\n    }\n    buildContextFor(rawStringNextValue, flagsNextValue) {\n        return {\n            rawString: rawStringNextValue.value,\n            rawStringContext: rawStringNextValue.context,\n            flags: flagsNextValue.value,\n            flagsContext: flagsNextValue.context,\n        };\n    }\n    generate(mrng, biasFactor) {\n        const rawStringNextValue = this.stringArb.generate(mrng, biasFactor);\n        const chars = [...rawStringNextValue.value];\n        const togglePositions = computeTogglePositions(chars, this.toggleCase);\n        const flagsArb = convertToNext(bigUintN(togglePositions.length));\n        const flagsNextValue = flagsArb.generate(mrng, undefined);\n        applyFlagsOnChars(chars, flagsNextValue.value, togglePositions, this.toggleCase);\n        return new NextValue(chars.join(''), this.buildContextFor(rawStringNextValue, flagsNextValue));\n    }\n    canShrinkWithoutContext(value) {\n        if (typeof value !== 'string') {\n            return false;\n        }\n        return this.untoggleAll !== undefined\n            ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value))\n            :\n                this.stringArb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        let contextSafe;\n        if (context !== undefined) {\n            contextSafe = context;\n        }\n        else {\n            if (this.untoggleAll !== undefined) {\n                const untoggledValue = this.untoggleAll(value);\n                const valueChars = [...value];\n                const untoggledValueChars = [...untoggledValue];\n                const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n                contextSafe = {\n                    rawString: untoggledValue,\n                    rawStringContext: undefined,\n                    flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n                    flagsContext: undefined,\n                };\n            }\n            else {\n                contextSafe = {\n                    rawString: value,\n                    rawStringContext: undefined,\n                    flags: BigInt(0),\n                    flagsContext: undefined,\n                };\n            }\n        }\n        const rawString = contextSafe.rawString;\n        const flags = contextSafe.flags;\n        return this.stringArb\n            .shrink(rawString, contextSafe.rawStringContext)\n            .map((nRawStringNextValue) => {\n            const nChars = [...nRawStringNextValue.value];\n            const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);\n            const nFlags = computeNextFlags(flags, nTogglePositions.length);\n            applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);\n            return new NextValue(nChars.join(''), this.buildContextFor(nRawStringNextValue, new NextValue(nFlags, undefined)));\n        })\n            .join(makeLazy(() => {\n            const chars = [...rawString];\n            const togglePositions = computeTogglePositions(chars, this.toggleCase);\n            return convertToNext(bigUintN(togglePositions.length))\n                .shrink(flags, contextSafe.flagsContext)\n                .map((nFlagsNextValue) => {\n                const nChars = chars.slice();\n                applyFlagsOnChars(nChars, nFlagsNextValue.value, togglePositions, this.toggleCase);\n                return new NextValue(nChars.join(''), this.buildContextFor(new NextValue(rawString, contextSafe.rawStringContext), nFlagsNextValue));\n            });\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}