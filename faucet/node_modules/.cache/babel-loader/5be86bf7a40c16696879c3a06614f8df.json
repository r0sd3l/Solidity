{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { array } from '../../array.js';\nexport function typedIntArrayArbitraryArbitraryBuilder(constraints, defaultMin, defaultMax, TypedArrayClass, arbitraryBuilder) {\n  const generatorName = TypedArrayClass.name;\n\n  const {\n    min = defaultMin,\n    max = defaultMax\n  } = constraints,\n        arrayConstraints = __rest(constraints, [\"min\", \"max\"]);\n\n  if (min > max) {\n    throw new Error(`Invalid range passed to ${generatorName}: min must be lower than or equal to max`);\n  }\n\n  if (min < defaultMin) {\n    throw new Error(`Invalid min value passed to ${generatorName}: min must be greater than or equal to ${defaultMin}`);\n  }\n\n  if (max > defaultMax) {\n    throw new Error(`Invalid max value passed to ${generatorName}: max must be lower than or equal to ${defaultMax}`);\n  }\n\n  return convertFromNext(convertToNext(array(arbitraryBuilder({\n    min,\n    max\n  }), arrayConstraints)).map(data => TypedArrayClass.from(data), value => {\n    if (!(value instanceof TypedArrayClass)) throw new Error('Invalid type');\n    return [...value];\n  }));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/TypedIntArrayArbitraryBuilder.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","convertFromNext","convertToNext","array","typedIntArrayArbitraryArbitraryBuilder","constraints","defaultMin","defaultMax","TypedArrayClass","arbitraryBuilder","generatorName","name","min","max","arrayConstraints","Error","map","data","from","value"],"mappings":"AAAA,IAAIA,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClD,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAT,IAAcH,CAAd,EAAiB,IAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,CAArC,EAAwCG,CAAxC,KAA8CF,CAAC,CAACO,OAAF,CAAUL,CAAV,IAAe,CAAjE,EACbD,CAAC,CAACC,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAR;;AACJ,MAAIH,CAAC,IAAI,IAAL,IAAa,OAAOI,MAAM,CAACK,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWP,CAAC,GAAGC,MAAM,CAACK,qBAAP,CAA6BT,CAA7B,CAApB,EAAqDU,CAAC,GAAGP,CAAC,CAACQ,MAA3D,EAAmED,CAAC,EAApE,EAAwE;AACpE,QAAIT,CAAC,CAACO,OAAF,CAAUL,CAAC,CAACO,CAAD,CAAX,IAAkB,CAAlB,IAAuBN,MAAM,CAACC,SAAP,CAAiBO,oBAAjB,CAAsCL,IAAtC,CAA2CP,CAA3C,EAA8CG,CAAC,CAACO,CAAD,CAA/C,CAA3B,EACIR,CAAC,CAACC,CAAC,CAACO,CAAD,CAAF,CAAD,GAAUV,CAAC,CAACG,CAAC,CAACO,CAAD,CAAF,CAAX;AACP;AACL,SAAOR,CAAP;AACH,CAVD;;AAWA,SAASW,eAAT,EAA0BC,aAA1B,QAA+C,mDAA/C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,SAASC,sCAAT,CAAgDC,WAAhD,EAA6DC,UAA7D,EAAyEC,UAAzE,EAAqFC,eAArF,EAAsGC,gBAAtG,EAAwH;AAC3H,QAAMC,aAAa,GAAGF,eAAe,CAACG,IAAtC;;AACA,QAAM;AAAEC,IAAAA,GAAG,GAAGN,UAAR;AAAoBO,IAAAA,GAAG,GAAGN;AAA1B,MAAyCF,WAA/C;AAAA,QAA4DS,gBAAgB,GAAG3B,MAAM,CAACkB,WAAD,EAAc,CAAC,KAAD,EAAQ,KAAR,CAAd,CAArF;;AACA,MAAIO,GAAG,GAAGC,GAAV,EAAe;AACX,UAAM,IAAIE,KAAJ,CAAW,2BAA0BL,aAAc,0CAAnD,CAAN;AACH;;AACD,MAAIE,GAAG,GAAGN,UAAV,EAAsB;AAClB,UAAM,IAAIS,KAAJ,CAAW,+BAA8BL,aAAc,0CAAyCJ,UAAW,EAA3G,CAAN;AACH;;AACD,MAAIO,GAAG,GAAGN,UAAV,EAAsB;AAClB,UAAM,IAAIQ,KAAJ,CAAW,+BAA8BL,aAAc,wCAAuCH,UAAW,EAAzG,CAAN;AACH;;AACD,SAAON,eAAe,CAACC,aAAa,CAACC,KAAK,CAACM,gBAAgB,CAAC;AAAEG,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAD,CAAjB,EAAiCC,gBAAjC,CAAN,CAAb,CAAuEE,GAAvE,CAA4EC,IAAD,IAAUT,eAAe,CAACU,IAAhB,CAAqBD,IAArB,CAArF,EAAkHE,KAAD,IAAW;AAC/I,QAAI,EAAEA,KAAK,YAAYX,eAAnB,CAAJ,EACI,MAAM,IAAIO,KAAJ,CAAU,cAAV,CAAN;AACJ,WAAO,CAAC,GAAGI,KAAJ,CAAP;AACH,GAJsB,CAAD,CAAtB;AAKH","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { array } from '../../array.js';\nexport function typedIntArrayArbitraryArbitraryBuilder(constraints, defaultMin, defaultMax, TypedArrayClass, arbitraryBuilder) {\n    const generatorName = TypedArrayClass.name;\n    const { min = defaultMin, max = defaultMax } = constraints, arrayConstraints = __rest(constraints, [\"min\", \"max\"]);\n    if (min > max) {\n        throw new Error(`Invalid range passed to ${generatorName}: min must be lower than or equal to max`);\n    }\n    if (min < defaultMin) {\n        throw new Error(`Invalid min value passed to ${generatorName}: min must be greater than or equal to ${defaultMin}`);\n    }\n    if (max > defaultMax) {\n        throw new Error(`Invalid max value passed to ${generatorName}: max must be lower than or equal to ${defaultMax}`);\n    }\n    return convertFromNext(convertToNext(array(arbitraryBuilder({ min, max }), arrayConstraints)).map((data) => TypedArrayClass.from(data), (value) => {\n        if (!(value instanceof TypedArrayClass))\n            throw new Error('Invalid type');\n        return [...value];\n    }));\n}\n"]},"metadata":{},"sourceType":"module"}