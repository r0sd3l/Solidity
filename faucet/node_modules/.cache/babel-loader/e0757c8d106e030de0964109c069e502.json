{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { Stream } from '../../stream/Stream.js';\nconst AdaptedValue = Symbol('adapted-value');\n\nfunction toAdapterNextValue(rawValue, adapter) {\n  const adapted = adapter(rawValue.value_);\n\n  if (!adapted.adapted) {\n    return rawValue;\n  }\n\n  return new NextValue(adapted.value, AdaptedValue);\n}\n\nclass AdapterArbitrary extends NextArbitrary {\n  constructor(sourceArb, adapter) {\n    super();\n    this.sourceArb = sourceArb;\n    this.adapter = adapter;\n\n    this.adaptNextValue = rawValue => toAdapterNextValue(rawValue, adapter);\n  }\n\n  generate(mrng, biasFactor) {\n    const rawValue = this.sourceArb.generate(mrng, biasFactor);\n    return this.adaptNextValue(rawValue);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.sourceArb.canShrinkWithoutContext(value) && !this.adapter(value).adapted;\n  }\n\n  shrink(value, context) {\n    if (context === AdaptedValue) {\n      if (!this.sourceArb.canShrinkWithoutContext(value)) {\n        return Stream.nil();\n      }\n\n      return this.sourceArb.shrink(value, undefined).map(this.adaptNextValue);\n    }\n\n    return this.sourceArb.shrink(value, context).map(this.adaptNextValue);\n  }\n\n}\n\nexport function adapter(sourceArb, adapter) {\n  return new AdapterArbitrary(sourceArb, adapter);\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/AdapterArbitrary.js"],"names":["NextArbitrary","NextValue","Stream","AdaptedValue","Symbol","toAdapterNextValue","rawValue","adapter","adapted","value_","value","AdapterArbitrary","constructor","sourceArb","adaptNextValue","generate","mrng","biasFactor","canShrinkWithoutContext","shrink","context","nil","undefined","map"],"mappings":"AAAA,SAASA,aAAT,QAA8B,mDAA9B;AACA,SAASC,SAAT,QAA0B,+CAA1B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,MAAMC,YAAY,GAAGC,MAAM,CAAC,eAAD,CAA3B;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,OAAtC,EAA+C;AAC3C,QAAMC,OAAO,GAAGD,OAAO,CAACD,QAAQ,CAACG,MAAV,CAAvB;;AACA,MAAI,CAACD,OAAO,CAACA,OAAb,EAAsB;AAClB,WAAOF,QAAP;AACH;;AACD,SAAO,IAAIL,SAAJ,CAAcO,OAAO,CAACE,KAAtB,EAA6BP,YAA7B,CAAP;AACH;;AACD,MAAMQ,gBAAN,SAA+BX,aAA/B,CAA6C;AACzCY,EAAAA,WAAW,CAACC,SAAD,EAAYN,OAAZ,EAAqB;AAC5B;AACA,SAAKM,SAAL,GAAiBA,SAAjB;AACA,SAAKN,OAAL,GAAeA,OAAf;;AACA,SAAKO,cAAL,GAAuBR,QAAD,IAAcD,kBAAkB,CAACC,QAAD,EAAWC,OAAX,CAAtD;AACH;;AACDQ,EAAAA,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;AACvB,UAAMX,QAAQ,GAAG,KAAKO,SAAL,CAAeE,QAAf,CAAwBC,IAAxB,EAA8BC,UAA9B,CAAjB;AACA,WAAO,KAAKH,cAAL,CAAoBR,QAApB,CAAP;AACH;;AACDY,EAAAA,uBAAuB,CAACR,KAAD,EAAQ;AAC3B,WAAO,KAAKG,SAAL,CAAeK,uBAAf,CAAuCR,KAAvC,KAAiD,CAAC,KAAKH,OAAL,CAAaG,KAAb,EAAoBF,OAA7E;AACH;;AACDW,EAAAA,MAAM,CAACT,KAAD,EAAQU,OAAR,EAAiB;AACnB,QAAIA,OAAO,KAAKjB,YAAhB,EAA8B;AAC1B,UAAI,CAAC,KAAKU,SAAL,CAAeK,uBAAf,CAAuCR,KAAvC,CAAL,EAAoD;AAChD,eAAOR,MAAM,CAACmB,GAAP,EAAP;AACH;;AACD,aAAO,KAAKR,SAAL,CAAeM,MAAf,CAAsBT,KAAtB,EAA6BY,SAA7B,EAAwCC,GAAxC,CAA4C,KAAKT,cAAjD,CAAP;AACH;;AACD,WAAO,KAAKD,SAAL,CAAeM,MAAf,CAAsBT,KAAtB,EAA6BU,OAA7B,EAAsCG,GAAtC,CAA0C,KAAKT,cAA/C,CAAP;AACH;;AAtBwC;;AAwB7C,OAAO,SAASP,OAAT,CAAiBM,SAAjB,EAA4BN,OAA5B,EAAqC;AACxC,SAAO,IAAII,gBAAJ,CAAqBE,SAArB,EAAgCN,OAAhC,CAAP;AACH","sourcesContent":["import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { Stream } from '../../stream/Stream.js';\nconst AdaptedValue = Symbol('adapted-value');\nfunction toAdapterNextValue(rawValue, adapter) {\n    const adapted = adapter(rawValue.value_);\n    if (!adapted.adapted) {\n        return rawValue;\n    }\n    return new NextValue(adapted.value, AdaptedValue);\n}\nclass AdapterArbitrary extends NextArbitrary {\n    constructor(sourceArb, adapter) {\n        super();\n        this.sourceArb = sourceArb;\n        this.adapter = adapter;\n        this.adaptNextValue = (rawValue) => toAdapterNextValue(rawValue, adapter);\n    }\n    generate(mrng, biasFactor) {\n        const rawValue = this.sourceArb.generate(mrng, biasFactor);\n        return this.adaptNextValue(rawValue);\n    }\n    canShrinkWithoutContext(value) {\n        return this.sourceArb.canShrinkWithoutContext(value) && !this.adapter(value).adapted;\n    }\n    shrink(value, context) {\n        if (context === AdaptedValue) {\n            if (!this.sourceArb.canShrinkWithoutContext(value)) {\n                return Stream.nil();\n            }\n            return this.sourceArb.shrink(value, undefined).map(this.adaptNextValue);\n        }\n        return this.sourceArb.shrink(value, context).map(this.adaptNextValue);\n    }\n}\nexport function adapter(sourceArb, adapter) {\n    return new AdapterArbitrary(sourceArb, adapter);\n}\n"]},"metadata":{},"sourceType":"module"}