{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMagic = exports.decodeSpecial = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:special:decode\");\n\nconst Basic = __importStar(require(\"../../basic\"));\n\nconst Bytes = __importStar(require(\"../../bytes\"));\n\nconst Compiler = __importStar(require(\"../../compiler\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nfunction* decodeSpecial(dataType, pointer, info) {\n  if (dataType.typeClass === \"magic\") {\n    return yield* decodeMagic(dataType, pointer, info);\n  } else {\n    return yield* Basic.Decode.decodeBasic(dataType, pointer, info);\n  }\n}\n\nexports.decodeSpecial = decodeSpecial;\n\nfunction* decodeMagic(dataType, pointer, info) {\n  let {\n    state\n  } = info;\n\n  switch (pointer.special) {\n    case \"msg\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          data: yield* Bytes.Decode.decodeBytes({\n            typeClass: \"bytes\",\n            kind: \"dynamic\",\n            location: \"calldata\"\n          }, {\n            location: \"calldata\",\n            start: 0,\n            length: state.calldata.length\n          }, info),\n          sig: yield* Basic.Decode.decodeBasic({\n            typeClass: \"bytes\",\n            kind: \"static\",\n            length: Evm.Utils.SELECTOR_SIZE\n          }, {\n            location: \"calldata\",\n            start: 0,\n            length: Evm.Utils.SELECTOR_SIZE\n          }, info),\n          sender: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {\n            location: \"special\",\n            special: \"sender\"\n          }, info),\n          value: yield* Basic.Decode.decodeBasic({\n            typeClass: \"uint\",\n            bits: 256\n          }, {\n            location: \"special\",\n            special: \"value\"\n          }, info)\n        }\n      };\n\n    case \"tx\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          origin: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {\n            location: \"special\",\n            special: \"origin\"\n          }, info),\n          gasprice: yield* Basic.Decode.decodeBasic({\n            typeClass: \"uint\",\n            bits: 256\n          }, {\n            location: \"special\",\n            special: \"gasprice\"\n          }, info)\n        }\n      };\n\n    case \"block\":\n      let block = {\n        coinbase: yield* Basic.Decode.decodeBasic(coinbaseType(info.currentContext.compiler), {\n          location: \"special\",\n          special: \"coinbase\"\n        }, info)\n      }; //the other ones are all uint's, so let's handle them all at once; due to\n      //the lack of generator arrow functions, we do it by mutating block\n\n      const variables = [\"difficulty\", \"gaslimit\", \"number\", \"timestamp\"];\n\n      if (solidityVersionHasChainId(info.currentContext.compiler)) {\n        variables.push(\"chainid\");\n      }\n\n      if (solidityVersionHasBaseFee(info.currentContext.compiler)) {\n        variables.push(\"basefee\");\n      }\n\n      for (let variable of variables) {\n        block[variable] = yield* Basic.Decode.decodeBasic({\n          typeClass: \"uint\",\n          bits: 256\n        }, {\n          location: \"special\",\n          special: variable\n        }, info);\n      }\n\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: block\n      };\n  }\n}\n\nexports.decodeMagic = decodeMagic;\n\nfunction senderType(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n      return {\n        typeClass: \"address\",\n        kind: \"general\"\n      };\n\n    case \"0.5.x\":\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: true\n      };\n\n    default:\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: false\n      };\n  }\n}\n\nfunction coinbaseType(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n      return {\n        typeClass: \"address\",\n        kind: \"general\"\n      };\n\n    case \"0.5.x\":\n    case \"0.8.x\":\n    case \"0.8.7+\":\n    case \"0.8.9+\":\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: true\n      };\n  }\n}\n\nfunction solidityVersionHasChainId(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n    case \"0.5.x\":\n      return false;\n\n    default:\n      return true;\n  }\n}\n\nfunction solidityVersionHasBaseFee(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n    case \"0.5.x\":\n    case \"0.8.x\":\n      return false;\n\n    default:\n      return true;\n  }\n}","map":{"version":3,"sources":["../../../../lib/special/decode/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeMagic = exports.decodeSpecial = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(\"codec:special:decode\");\nconst Basic = __importStar(require(\"../../basic\"));\nconst Bytes = __importStar(require(\"../../bytes\"));\nconst Compiler = __importStar(require(\"../../compiler\"));\nconst Evm = __importStar(require(\"../../evm\"));\nfunction* decodeSpecial(dataType, pointer, info) {\n    if (dataType.typeClass === \"magic\") {\n        return yield* decodeMagic(dataType, pointer, info);\n    }\n    else {\n        return yield* Basic.Decode.decodeBasic(dataType, pointer, info);\n    }\n}\nexports.decodeSpecial = decodeSpecial;\nfunction* decodeMagic(dataType, pointer, info) {\n    let { state } = info;\n    switch (pointer.special) {\n        case \"msg\":\n            return {\n                type: dataType,\n                kind: \"value\",\n                value: {\n                    data: yield* Bytes.Decode.decodeBytes({\n                        typeClass: \"bytes\",\n                        kind: \"dynamic\",\n                        location: \"calldata\"\n                    }, {\n                        location: \"calldata\",\n                        start: 0,\n                        length: state.calldata.length\n                    }, info),\n                    sig: yield* Basic.Decode.decodeBasic({\n                        typeClass: \"bytes\",\n                        kind: \"static\",\n                        length: Evm.Utils.SELECTOR_SIZE\n                    }, {\n                        location: \"calldata\",\n                        start: 0,\n                        length: Evm.Utils.SELECTOR_SIZE\n                    }, info),\n                    sender: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), { location: \"special\", special: \"sender\" }, info),\n                    value: yield* Basic.Decode.decodeBasic({\n                        typeClass: \"uint\",\n                        bits: 256\n                    }, { location: \"special\", special: \"value\" }, info)\n                }\n            };\n        case \"tx\":\n            return {\n                type: dataType,\n                kind: \"value\",\n                value: {\n                    origin: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), { location: \"special\", special: \"origin\" }, info),\n                    gasprice: yield* Basic.Decode.decodeBasic({\n                        typeClass: \"uint\",\n                        bits: 256\n                    }, { location: \"special\", special: \"gasprice\" }, info)\n                }\n            };\n        case \"block\":\n            let block = {\n                coinbase: yield* Basic.Decode.decodeBasic(coinbaseType(info.currentContext.compiler), { location: \"special\", special: \"coinbase\" }, info)\n            };\n            //the other ones are all uint's, so let's handle them all at once; due to\n            //the lack of generator arrow functions, we do it by mutating block\n            const variables = [\"difficulty\", \"gaslimit\", \"number\", \"timestamp\"];\n            if (solidityVersionHasChainId(info.currentContext.compiler)) {\n                variables.push(\"chainid\");\n            }\n            if (solidityVersionHasBaseFee(info.currentContext.compiler)) {\n                variables.push(\"basefee\");\n            }\n            for (let variable of variables) {\n                block[variable] = yield* Basic.Decode.decodeBasic({\n                    typeClass: \"uint\",\n                    bits: 256\n                }, { location: \"special\", special: variable }, info);\n            }\n            return {\n                type: dataType,\n                kind: \"value\",\n                value: block\n            };\n    }\n}\nexports.decodeMagic = decodeMagic;\nfunction senderType(compiler) {\n    switch (Compiler.Utils.solidityFamily(compiler)) {\n        case \"unknown\":\n        case \"pre-0.5.0\":\n            return {\n                typeClass: \"address\",\n                kind: \"general\"\n            };\n        case \"0.5.x\":\n            return {\n                typeClass: \"address\",\n                kind: \"specific\",\n                payable: true\n            };\n        default:\n            return {\n                typeClass: \"address\",\n                kind: \"specific\",\n                payable: false\n            };\n    }\n}\nfunction coinbaseType(compiler) {\n    switch (Compiler.Utils.solidityFamily(compiler)) {\n        case \"unknown\":\n        case \"pre-0.5.0\":\n            return {\n                typeClass: \"address\",\n                kind: \"general\"\n            };\n        case \"0.5.x\":\n        case \"0.8.x\":\n        case \"0.8.7+\":\n        case \"0.8.9+\":\n            return {\n                typeClass: \"address\",\n                kind: \"specific\",\n                payable: true\n            };\n    }\n}\nfunction solidityVersionHasChainId(compiler) {\n    switch (Compiler.Utils.solidityFamily(compiler)) {\n        case \"unknown\":\n        case \"pre-0.5.0\":\n        case \"0.5.x\":\n            return false;\n        default:\n            return true;\n    }\n}\nfunction solidityVersionHasBaseFee(compiler) {\n    switch (Compiler.Utils.solidityFamily(compiler)) {\n        case \"unknown\":\n        case \"pre-0.5.0\":\n        case \"0.5.x\":\n        case \"0.8.x\":\n            return false;\n        default:\n            return true;\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}