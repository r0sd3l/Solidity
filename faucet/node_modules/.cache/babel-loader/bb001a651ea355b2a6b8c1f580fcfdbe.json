{"ast":null,"code":"const splitString = (str, delimiter) => {\n  const result = [];\n  str.split(delimiter).forEach(str => {\n    result.push(str);\n    result.push(delimiter);\n  });\n  result.pop();\n  return result;\n};\n\nconst splitArray = (ary, delimiter) => {\n  let result = [];\n  ary.forEach(part => {\n    let subRes = [];\n    part.split(delimiter).forEach(str => {\n      subRes.push(str);\n      subRes.push(delimiter);\n    });\n    subRes.pop();\n    subRes = subRes.filter(str => {\n      if (str) {\n        return str;\n      }\n\n      return undefined;\n    });\n    result = result.concat(subRes);\n  });\n  return result;\n};\n\nconst superSplit = (splittable, delimiters) => {\n  if (delimiters.length === 0) {\n    return splittable;\n  }\n\n  if (typeof splittable === 'string') {\n    const delimiter = delimiters[delimiters.length - 1];\n    const split = splitString(splittable, delimiter);\n    return superSplit(split, delimiters.slice(0, -1));\n  }\n\n  if (Array.isArray(splittable)) {\n    const delimiter = delimiters[delimiters.length - 1];\n    const split = splitArray(splittable, delimiter);\n    return superSplit(split, delimiters.slice(0, -1));\n  }\n\n  return false;\n};\n\nmodule.exports = superSplit;","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/super-split/index.js"],"names":["splitString","str","delimiter","result","split","forEach","push","pop","splitArray","ary","part","subRes","filter","undefined","concat","superSplit","splittable","delimiters","length","slice","Array","isArray","module","exports"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,GAAD,EAAMC,SAAN,KAAoB;AACvC,QAAMC,MAAM,GAAG,EAAf;AAEAF,EAAAA,GAAG,CAACG,KAAJ,CAAUF,SAAV,EAAqBG,OAArB,CAA6BJ,GAAG,IAAI;AACnCE,IAAAA,MAAM,CAACG,IAAP,CAAYL,GAAZ;AACAE,IAAAA,MAAM,CAACG,IAAP,CAAYJ,SAAZ;AACA,GAHD;AAKAC,EAAAA,MAAM,CAACI,GAAP;AAEA,SAAOJ,MAAP;AACA,CAXD;;AAaA,MAAMK,UAAU,GAAG,CAACC,GAAD,EAAMP,SAAN,KAAoB;AACtC,MAAIC,MAAM,GAAG,EAAb;AAEAM,EAAAA,GAAG,CAACJ,OAAJ,CAAYK,IAAI,IAAI;AACnB,QAAIC,MAAM,GAAG,EAAb;AAEAD,IAAAA,IAAI,CAACN,KAAL,CAAWF,SAAX,EAAsBG,OAAtB,CAA8BJ,GAAG,IAAI;AACpCU,MAAAA,MAAM,CAACL,IAAP,CAAYL,GAAZ;AACAU,MAAAA,MAAM,CAACL,IAAP,CAAYJ,SAAZ;AACA,KAHD;AAKAS,IAAAA,MAAM,CAACJ,GAAP;AACAI,IAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcX,GAAG,IAAI;AAC7B,UAAIA,GAAJ,EAAS;AACR,eAAOA,GAAP;AACA;;AACD,aAAOY,SAAP;AACA,KALQ,CAAT;AAOAV,IAAAA,MAAM,GAAGA,MAAM,CAACW,MAAP,CAAcH,MAAd,CAAT;AACA,GAjBD;AAmBA,SAAOR,MAAP;AACA,CAvBD;;AAyBA,MAAMY,UAAU,GAAG,CAACC,UAAD,EAAaC,UAAb,KAA4B;AAC9C,MAAIA,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AAC5B,WAAOF,UAAP;AACA;;AAED,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AACnC,UAAMd,SAAS,GAAGe,UAAU,CAACA,UAAU,CAACC,MAAX,GAAoB,CAArB,CAA5B;AACA,UAAMd,KAAK,GAAGJ,WAAW,CAACgB,UAAD,EAAad,SAAb,CAAzB;AACA,WAAOa,UAAU,CAACX,KAAD,EAAQa,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAR,CAAjB;AACA;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcL,UAAd,CAAJ,EAA+B;AAC9B,UAAMd,SAAS,GAAGe,UAAU,CAACA,UAAU,CAACC,MAAX,GAAoB,CAArB,CAA5B;AACA,UAAMd,KAAK,GAAGI,UAAU,CAACQ,UAAD,EAAad,SAAb,CAAxB;AACA,WAAOa,UAAU,CAACX,KAAD,EAAQa,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAR,CAAjB;AACA;;AAED,SAAO,KAAP;AACA,CAlBD;;AAoBAG,MAAM,CAACC,OAAP,GAAiBR,UAAjB","sourcesContent":["const splitString = (str, delimiter) => {\n\tconst result = []\n\n\tstr.split(delimiter).forEach(str => {\n\t\tresult.push(str)\n\t\tresult.push(delimiter)\n\t})\n\n\tresult.pop()\n\n\treturn result\n}\n\nconst splitArray = (ary, delimiter) => {\n\tlet result = []\n\n\tary.forEach(part => {\n\t\tlet subRes = []\n\n\t\tpart.split(delimiter).forEach(str => {\n\t\t\tsubRes.push(str)\n\t\t\tsubRes.push(delimiter)\n\t\t})\n\n\t\tsubRes.pop()\n\t\tsubRes = subRes.filter(str => {\n\t\t\tif (str) {\n\t\t\t\treturn str\n\t\t\t}\n\t\t\treturn undefined\n\t\t})\n\n\t\tresult = result.concat(subRes)\n\t})\n\n\treturn result\n}\n\nconst superSplit = (splittable, delimiters) => {\n\tif (delimiters.length === 0) {\n\t\treturn splittable\n\t}\n\n\tif (typeof splittable === 'string') {\n\t\tconst delimiter = delimiters[delimiters.length - 1]\n\t\tconst split = splitString(splittable, delimiter)\n\t\treturn superSplit(split, delimiters.slice(0, -1))\n\t}\n\n\tif (Array.isArray(splittable)) {\n\t\tconst delimiter = delimiters[delimiters.length - 1]\n\t\tconst split = splitArray(splittable, delimiter)\n\t\treturn superSplit(split, delimiters.slice(0, -1))\n\t}\n\n\treturn false\n}\n\nmodule.exports = superSplit\n"]},"metadata":{},"sourceType":"script"}