{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\n\nfunction dotAdapter(a) {\n  let currentLength = a[0].length;\n\n  for (let index = 1; index !== a.length; ++index) {\n    currentLength += 1 + a[index].length;\n\n    if (currentLength > 64) {\n      return {\n        adapted: true,\n        value: a.slice(0, index)\n      };\n    }\n  }\n\n  return {\n    adapted: false,\n    value: a\n  };\n}\n\nfunction dotMapper(a) {\n  return a.join('.');\n}\n\nfunction dotUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('.');\n}\n\nfunction atMapper(data) {\n  return `${data[0]}@${data[1]}`;\n}\n\nfunction atUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('@', 2);\n}\n\nexport function emailAddress() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n  const atextArb = buildLowerAlphaNumericArbitrary(others);\n  const localPartArb = convertFromNext(adapter(convertToNext(array(stringOf(atextArb, {\n    minLength: 1,\n    maxLength: 64,\n    size: constraints.size\n  }), {\n    minLength: 1,\n    maxLength: 32,\n    size: constraints.size\n  })), dotAdapter).map(dotMapper, dotUnmapper));\n  return convertFromNext(convertToNext(tuple(localPartArb, domain({\n    size: constraints.size\n  }))).map(atMapper, atUnmapper));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/emailAddress.js"],"names":["array","buildLowerAlphaNumericArbitrary","domain","stringOf","tuple","convertFromNext","convertToNext","adapter","dotAdapter","a","currentLength","length","index","adapted","value","slice","dotMapper","join","dotUnmapper","Error","split","atMapper","data","atUnmapper","emailAddress","constraints","others","atextArb","localPartArb","minLength","maxLength","size","map"],"mappings":"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","sourcesContent":["import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\nfunction dotAdapter(a) {\n    let currentLength = a[0].length;\n    for (let index = 1; index !== a.length; ++index) {\n        currentLength += 1 + a[index].length;\n        if (currentLength > 64) {\n            return { adapted: true, value: a.slice(0, index) };\n        }\n    }\n    return { adapted: false, value: a };\n}\nfunction dotMapper(a) {\n    return a.join('.');\n}\nfunction dotUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('.');\n}\nfunction atMapper(data) {\n    return `${data[0]}@${data[1]}`;\n}\nfunction atUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('@', 2);\n}\nexport function emailAddress(constraints = {}) {\n    const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n    const atextArb = buildLowerAlphaNumericArbitrary(others);\n    const localPartArb = convertFromNext(adapter(convertToNext(array(stringOf(atextArb, {\n        minLength: 1,\n        maxLength: 64,\n        size: constraints.size,\n    }), { minLength: 1, maxLength: 32, size: constraints.size })), dotAdapter).map(dotMapper, dotUnmapper));\n    return convertFromNext(convertToNext(tuple(localPartArb, domain({ size: constraints.size }))).map(atMapper, atUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}