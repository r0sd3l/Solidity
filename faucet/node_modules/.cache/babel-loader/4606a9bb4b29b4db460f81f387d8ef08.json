{"ast":null,"code":"export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n  var MinRng = rng.min();\n  var NumValues = rng.max() - rng.min() + 1;\n\n  if (rangeSize <= NumValues) {\n    var nrng_1 = rng;\n    var MaxAllowed = NumValues - NumValues % rangeSize;\n\n    while (true) {\n      var out = nrng_1.unsafeNext();\n      var deltaV = out - MinRng;\n\n      if (deltaV < MaxAllowed) {\n        return deltaV % rangeSize;\n      }\n    }\n  }\n\n  var FinalNumValues = NumValues * NumValues;\n  var NumIterations = 2;\n\n  while (FinalNumValues < rangeSize) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n\n  var MaxAcceptedRandom = rangeSize * Math.floor(1 * FinalNumValues / rangeSize);\n  var nrng = rng;\n\n  while (true) {\n    var value = 0;\n\n    for (var num = 0; num !== NumIterations; ++num) {\n      var out = nrng.unsafeNext();\n      value = NumValues * value + (out - MinRng);\n    }\n\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value - rangeSize * Math.floor(1 * value / rangeSize);\n      return inDiff;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js"],"names":["unsafeUniformIntDistributionInternal","rangeSize","rng","MinRng","min","NumValues","max","nrng_1","MaxAllowed","out","unsafeNext","deltaV","FinalNumValues","NumIterations","MaxAcceptedRandom","Math","floor","nrng","value","num","inDiff"],"mappings":"AAAA,OAAO,SAASA,oCAAT,CAA8CC,SAA9C,EAAyDC,GAAzD,EAA8D;AACjE,MAAIC,MAAM,GAAGD,GAAG,CAACE,GAAJ,EAAb;AACA,MAAIC,SAAS,GAAGH,GAAG,CAACI,GAAJ,KAAYJ,GAAG,CAACE,GAAJ,EAAZ,GAAwB,CAAxC;;AACA,MAAIH,SAAS,IAAII,SAAjB,EAA4B;AACxB,QAAIE,MAAM,GAAGL,GAAb;AACA,QAAIM,UAAU,GAAGH,SAAS,GAAIA,SAAS,GAAGJ,SAA1C;;AACA,WAAO,IAAP,EAAa;AACT,UAAIQ,GAAG,GAAGF,MAAM,CAACG,UAAP,EAAV;AACA,UAAIC,MAAM,GAAGF,GAAG,GAAGN,MAAnB;;AACA,UAAIQ,MAAM,GAAGH,UAAb,EAAyB;AACrB,eAAOG,MAAM,GAAGV,SAAhB;AACH;AACJ;AACJ;;AACD,MAAIW,cAAc,GAAGP,SAAS,GAAGA,SAAjC;AACA,MAAIQ,aAAa,GAAG,CAApB;;AACA,SAAOD,cAAc,GAAGX,SAAxB,EAAmC;AAC/BW,IAAAA,cAAc,IAAIP,SAAlB;AACA,MAAEQ,aAAF;AACH;;AACD,MAAIC,iBAAiB,GAAGb,SAAS,GAAGc,IAAI,CAACC,KAAL,CAAY,IAAIJ,cAAL,GAAuBX,SAAlC,CAApC;AACA,MAAIgB,IAAI,GAAGf,GAAX;;AACA,SAAO,IAAP,EAAa;AACT,QAAIgB,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKN,aAA1B,EAAyC,EAAEM,GAA3C,EAAgD;AAC5C,UAAIV,GAAG,GAAGQ,IAAI,CAACP,UAAL,EAAV;AACAQ,MAAAA,KAAK,GAAGb,SAAS,GAAGa,KAAZ,IAAqBT,GAAG,GAAGN,MAA3B,CAAR;AACH;;AACD,QAAIe,KAAK,GAAGJ,iBAAZ,EAA+B;AAC3B,UAAIM,MAAM,GAAGF,KAAK,GAAGjB,SAAS,GAAGc,IAAI,CAACC,KAAL,CAAY,IAAIE,KAAL,GAAcjB,SAAzB,CAAjC;AACA,aAAOmB,MAAP;AACH;AACJ;AACJ","sourcesContent":["export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n    var MinRng = rng.min();\n    var NumValues = rng.max() - rng.min() + 1;\n    if (rangeSize <= NumValues) {\n        var nrng_1 = rng;\n        var MaxAllowed = NumValues - (NumValues % rangeSize);\n        while (true) {\n            var out = nrng_1.unsafeNext();\n            var deltaV = out - MinRng;\n            if (deltaV < MaxAllowed) {\n                return deltaV % rangeSize;\n            }\n        }\n    }\n    var FinalNumValues = NumValues * NumValues;\n    var NumIterations = 2;\n    while (FinalNumValues < rangeSize) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = rangeSize * Math.floor((1 * FinalNumValues) / rangeSize);\n    var nrng = rng;\n    while (true) {\n        var value = 0;\n        for (var num = 0; num !== NumIterations; ++num) {\n            var out = nrng.unsafeNext();\n            value = NumValues * value + (out - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value - rangeSize * Math.floor((1 * value) / rangeSize);\n            return inDiff;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}