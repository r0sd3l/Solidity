{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { unicode } from './unicode.js';\nimport { extractStringConstraints } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\n\nfunction unicodeString() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const constraints = extractStringConstraints(args);\n  return convertFromNext(convertToNext(array(unicode(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\n\nexport { unicodeString };","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/unicodeString.js"],"names":["convertFromNext","convertToNext","array","unicode","extractStringConstraints","codePointsToStringMapper","codePointsToStringUnmapper","unicodeString","args","constraints","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAA0C,oDAA1C;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;;AACA,SAASC,aAAT,GAAgC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC5B,QAAMC,WAAW,GAAGL,wBAAwB,CAACI,IAAD,CAA5C;AACA,SAAOR,eAAe,CAACC,aAAa,CAACC,KAAK,CAACC,OAAO,EAAR,EAAYM,WAAZ,CAAN,CAAb,CAA6CC,GAA7C,CAAiDL,wBAAjD,EAA2EC,0BAA3E,CAAD,CAAtB;AACH;;AACD,SAASC,aAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { unicode } from './unicode.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nfunction unicodeString(...args) {\n    const constraints = extractStringConstraints(args);\n    return convertFromNext(convertToNext(array(unicode(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\nexport { unicodeString };\n"]},"metadata":{},"sourceType":"module"}