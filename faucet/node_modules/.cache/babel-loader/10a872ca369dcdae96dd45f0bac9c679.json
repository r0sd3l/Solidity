{"ast":null,"code":"import { unsafeUniformIntDistributionInternal } from './UnsafeUniformIntDistributionInternal.js';\nexport function unsafeUniformArrayIntDistributionInternal(out, rangeSize, rng) {\n  var rangeLength = rangeSize.length;\n\n  while (true) {\n    for (var index = 0; index !== rangeLength; ++index) {\n      var indexRangeSize = index === 0 ? rangeSize[0] + 1 : 0x100000000;\n      var g = unsafeUniformIntDistributionInternal(indexRangeSize, rng);\n      out[index] = g;\n    }\n\n    for (var index = 0; index !== rangeLength; ++index) {\n      var current = out[index];\n      var currentInRange = rangeSize[index];\n\n      if (current < currentInRange) {\n        return out;\n      } else if (current > currentInRange) {\n        break;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformArrayIntDistributionInternal.js"],"names":["unsafeUniformIntDistributionInternal","unsafeUniformArrayIntDistributionInternal","out","rangeSize","rng","rangeLength","length","index","indexRangeSize","g","current","currentInRange"],"mappings":"AAAA,SAASA,oCAAT,QAAqD,2CAArD;AACA,OAAO,SAASC,yCAAT,CAAmDC,GAAnD,EAAwDC,SAAxD,EAAmEC,GAAnE,EAAwE;AAC3E,MAAIC,WAAW,GAAGF,SAAS,CAACG,MAA5B;;AACA,SAAO,IAAP,EAAa;AACT,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,KAAKF,WAA9B,EAA2C,EAAEE,KAA7C,EAAoD;AAChD,UAAIC,cAAc,GAAGD,KAAK,KAAK,CAAV,GAAcJ,SAAS,CAAC,CAAD,CAAT,GAAe,CAA7B,GAAiC,WAAtD;AACA,UAAIM,CAAC,GAAGT,oCAAoC,CAACQ,cAAD,EAAiBJ,GAAjB,CAA5C;AACAF,MAAAA,GAAG,CAACK,KAAD,CAAH,GAAaE,CAAb;AACH;;AACD,SAAK,IAAIF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,KAAKF,WAA9B,EAA2C,EAAEE,KAA7C,EAAoD;AAChD,UAAIG,OAAO,GAAGR,GAAG,CAACK,KAAD,CAAjB;AACA,UAAII,cAAc,GAAGR,SAAS,CAACI,KAAD,CAA9B;;AACA,UAAIG,OAAO,GAAGC,cAAd,EAA8B;AAC1B,eAAOT,GAAP;AACH,OAFD,MAGK,IAAIQ,OAAO,GAAGC,cAAd,EAA8B;AAC/B;AACH;AACJ;AACJ;AACJ","sourcesContent":["import { unsafeUniformIntDistributionInternal } from './UnsafeUniformIntDistributionInternal.js';\nexport function unsafeUniformArrayIntDistributionInternal(out, rangeSize, rng) {\n    var rangeLength = rangeSize.length;\n    while (true) {\n        for (var index = 0; index !== rangeLength; ++index) {\n            var indexRangeSize = index === 0 ? rangeSize[0] + 1 : 0x100000000;\n            var g = unsafeUniformIntDistributionInternal(indexRangeSize, rng);\n            out[index] = g;\n        }\n        for (var index = 0; index !== rangeLength; ++index) {\n            var current = out[index];\n            var currentInRange = rangeSize[index];\n            if (current < currentInRange) {\n                return out;\n            }\n            else if (current > currentInRange) {\n                break;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}