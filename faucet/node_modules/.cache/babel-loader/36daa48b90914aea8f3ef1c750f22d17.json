{"ast":null,"code":"import { assertIsArbitrary } from './Arbitrary.js';\nimport { ConverterFromNext } from './ConverterFromNext.js';\nimport { ConverterToNext } from './ConverterToNext.js';\nimport { assertIsNextArbitrary } from './NextArbitrary.js';\nexport function convertFromNext(arb) {\n  if (ConverterToNext.isConverterToNext(arb)) {\n    return arb.arb;\n  }\n\n  assertIsNextArbitrary(arb);\n  return new ConverterFromNext(arb);\n}\nexport function convertFromNextWithShrunkOnce(arb, legacyShrunkOnceContext) {\n  if (ConverterToNext.isConverterToNext(arb)) {\n    if (!('contextualShrink' in arb.arb) || !('contextualShrinkableFor' in arb.arb) || !('shrunkOnceContext' in arb.arb) || !('shrink' in arb.arb) || !('shrinkableFor' in arb.arb)) {\n      throw new Error('Conversion rejected: Underlying arbitrary is not compatible with ArbitraryWithContextualShrink');\n    }\n\n    return arb.arb;\n  }\n\n  assertIsNextArbitrary(arb);\n  return new ConverterFromNext(arb, legacyShrunkOnceContext);\n}\nexport function convertToNext(arb) {\n  if (ConverterFromNext.isConverterFromNext(arb)) {\n    return arb.arb;\n  }\n\n  assertIsArbitrary(arb);\n  return new ConverterToNext(arb);\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/arbitrary/definition/Converters.js"],"names":["assertIsArbitrary","ConverterFromNext","ConverterToNext","assertIsNextArbitrary","convertFromNext","arb","isConverterToNext","convertFromNextWithShrunkOnce","legacyShrunkOnceContext","Error","convertToNext","isConverterFromNext"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AACA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AACjC,MAAIH,eAAe,CAACI,iBAAhB,CAAkCD,GAAlC,CAAJ,EAA4C;AACxC,WAAOA,GAAG,CAACA,GAAX;AACH;;AACDF,EAAAA,qBAAqB,CAACE,GAAD,CAArB;AACA,SAAO,IAAIJ,iBAAJ,CAAsBI,GAAtB,CAAP;AACH;AACD,OAAO,SAASE,6BAAT,CAAuCF,GAAvC,EAA4CG,uBAA5C,EAAqE;AACxE,MAAIN,eAAe,CAACI,iBAAhB,CAAkCD,GAAlC,CAAJ,EAA4C;AACxC,QAAI,EAAE,sBAAsBA,GAAG,CAACA,GAA5B,KACA,EAAE,6BAA6BA,GAAG,CAACA,GAAnC,CADA,IAEA,EAAE,uBAAuBA,GAAG,CAACA,GAA7B,CAFA,IAGA,EAAE,YAAYA,GAAG,CAACA,GAAlB,CAHA,IAIA,EAAE,mBAAmBA,GAAG,CAACA,GAAzB,CAJJ,EAImC;AAC/B,YAAM,IAAII,KAAJ,CAAU,gGAAV,CAAN;AACH;;AACD,WAAOJ,GAAG,CAACA,GAAX;AACH;;AACDF,EAAAA,qBAAqB,CAACE,GAAD,CAArB;AACA,SAAO,IAAIJ,iBAAJ,CAAsBI,GAAtB,EAA2BG,uBAA3B,CAAP;AACH;AACD,OAAO,SAASE,aAAT,CAAuBL,GAAvB,EAA4B;AAC/B,MAAIJ,iBAAiB,CAACU,mBAAlB,CAAsCN,GAAtC,CAAJ,EAAgD;AAC5C,WAAOA,GAAG,CAACA,GAAX;AACH;;AACDL,EAAAA,iBAAiB,CAACK,GAAD,CAAjB;AACA,SAAO,IAAIH,eAAJ,CAAoBG,GAApB,CAAP;AACH","sourcesContent":["import { assertIsArbitrary } from './Arbitrary.js';\nimport { ConverterFromNext } from './ConverterFromNext.js';\nimport { ConverterToNext } from './ConverterToNext.js';\nimport { assertIsNextArbitrary } from './NextArbitrary.js';\nexport function convertFromNext(arb) {\n    if (ConverterToNext.isConverterToNext(arb)) {\n        return arb.arb;\n    }\n    assertIsNextArbitrary(arb);\n    return new ConverterFromNext(arb);\n}\nexport function convertFromNextWithShrunkOnce(arb, legacyShrunkOnceContext) {\n    if (ConverterToNext.isConverterToNext(arb)) {\n        if (!('contextualShrink' in arb.arb) ||\n            !('contextualShrinkableFor' in arb.arb) ||\n            !('shrunkOnceContext' in arb.arb) ||\n            !('shrink' in arb.arb) ||\n            !('shrinkableFor' in arb.arb)) {\n            throw new Error('Conversion rejected: Underlying arbitrary is not compatible with ArbitraryWithContextualShrink');\n        }\n        return arb.arb;\n    }\n    assertIsNextArbitrary(arb);\n    return new ConverterFromNext(arb, legacyShrunkOnceContext);\n}\nexport function convertToNext(arb) {\n    if (ConverterFromNext.isConverterFromNext(arb)) {\n        return arb.arb;\n    }\n    assertIsArbitrary(arb);\n    return new ConverterToNext(arb);\n}\n"]},"metadata":{},"sourceType":"module"}