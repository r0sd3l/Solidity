{"ast":null,"code":"import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.hasRan = false;\n\n    if (hasToStringMethod(cmd)) {\n      const method = cmd[toStringMethod];\n\n      this[toStringMethod] = function toStringMethod() {\n        return method.call(cmd);\n      };\n    }\n\n    if (hasAsyncToStringMethod(cmd)) {\n      const method = cmd[asyncToStringMethod];\n\n      this[asyncToStringMethod] = function asyncToStringMethod() {\n        return method.call(cmd);\n      };\n    }\n  }\n\n  check(m) {\n    return this.cmd.check(m);\n  }\n\n  run(m, r) {\n    this.hasRan = true;\n    return this.cmd.run(m, r);\n  }\n\n  clone() {\n    if (hasCloneMethod(this.cmd)) return new CommandWrapper(this.cmd[cloneMethod]());\n    return new CommandWrapper(this.cmd);\n  }\n\n  toString() {\n    return this.cmd.toString();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/model/commands/CommandWrapper.js"],"names":["asyncToStringMethod","hasAsyncToStringMethod","hasToStringMethod","toStringMethod","cloneMethod","hasCloneMethod","CommandWrapper","constructor","cmd","hasRan","method","call","check","m","run","r","clone","toString"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,sBAA9B,EAAsDC,iBAAtD,EAAyEC,cAAzE,QAAgG,6BAAhG;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAc,KAAd;;AACA,QAAIP,iBAAiB,CAACM,GAAD,CAArB,EAA4B;AACxB,YAAME,MAAM,GAAGF,GAAG,CAACL,cAAD,CAAlB;;AACA,WAAKA,cAAL,IAAuB,SAASA,cAAT,GAA0B;AAC7C,eAAOO,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAP;AACH,OAFD;AAGH;;AACD,QAAIP,sBAAsB,CAACO,GAAD,CAA1B,EAAiC;AAC7B,YAAME,MAAM,GAAGF,GAAG,CAACR,mBAAD,CAAlB;;AACA,WAAKA,mBAAL,IAA4B,SAASA,mBAAT,GAA+B;AACvD,eAAOU,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAP;AACH,OAFD;AAGH;AACJ;;AACDI,EAAAA,KAAK,CAACC,CAAD,EAAI;AACL,WAAO,KAAKL,GAAL,CAASI,KAAT,CAAeC,CAAf,CAAP;AACH;;AACDC,EAAAA,GAAG,CAACD,CAAD,EAAIE,CAAJ,EAAO;AACN,SAAKN,MAAL,GAAc,IAAd;AACA,WAAO,KAAKD,GAAL,CAASM,GAAT,CAAaD,CAAb,EAAgBE,CAAhB,CAAP;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,QAAIX,cAAc,CAAC,KAAKG,GAAN,CAAlB,EACI,OAAO,IAAIF,cAAJ,CAAmB,KAAKE,GAAL,CAASJ,WAAT,GAAnB,CAAP;AACJ,WAAO,IAAIE,cAAJ,CAAmB,KAAKE,GAAxB,CAAP;AACH;;AACDS,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKT,GAAL,CAASS,QAAT,EAAP;AACH;;AA/BuB","sourcesContent":["import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod, } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n    constructor(cmd) {\n        this.cmd = cmd;\n        this.hasRan = false;\n        if (hasToStringMethod(cmd)) {\n            const method = cmd[toStringMethod];\n            this[toStringMethod] = function toStringMethod() {\n                return method.call(cmd);\n            };\n        }\n        if (hasAsyncToStringMethod(cmd)) {\n            const method = cmd[asyncToStringMethod];\n            this[asyncToStringMethod] = function asyncToStringMethod() {\n                return method.call(cmd);\n            };\n        }\n    }\n    check(m) {\n        return this.cmd.check(m);\n    }\n    run(m, r) {\n        this.hasRan = true;\n        return this.cmd.run(m, r);\n    }\n    clone() {\n        if (hasCloneMethod(this.cmd))\n            return new CommandWrapper(this.cmd[cloneMethod]());\n        return new CommandWrapper(this.cmd);\n    }\n    toString() {\n        return this.cmd.toString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}