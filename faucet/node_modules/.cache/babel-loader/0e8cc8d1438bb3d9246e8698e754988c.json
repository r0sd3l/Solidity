{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../../utils/stringify.js';\n\nfunction prettyPrint(seenValuesStrings) {\n  return `Stream(${seenValuesStrings.join(',')}…)`;\n}\n\nexport class StreamArbitrary extends NextArbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, biasFactor) {\n    const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n\n    const enrichedProducer = () => {\n      const seenValues = [];\n\n      const g = function* (arb, clonedMrng) {\n        while (true) {\n          const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n          seenValues.push(value);\n          yield value;\n        }\n      };\n\n      const s = new Stream(g(this.arb, mrng.clone()));\n      return Object.defineProperties(s, {\n        toString: {\n          value: () => prettyPrint(seenValues.map(stringify))\n        },\n        [toStringMethod]: {\n          value: () => prettyPrint(seenValues.map(stringify))\n        },\n        [asyncToStringMethod]: {\n          value: async () => prettyPrint(await Promise.all(seenValues.map(asyncStringify)))\n        },\n        [cloneMethod]: {\n          value: enrichedProducer,\n          enumerable: true\n        }\n      });\n    };\n\n    return new NextValue(enrichedProducer(), undefined);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  shrink(_value, _context) {\n    return Stream.nil();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/StreamArbitrary.js"],"names":["NextArbitrary","NextValue","cloneMethod","Stream","asyncStringify","asyncToStringMethod","stringify","toStringMethod","prettyPrint","seenValuesStrings","join","StreamArbitrary","constructor","arb","generate","mrng","biasFactor","appliedBiasFactor","undefined","nextInt","enrichedProducer","seenValues","g","clonedMrng","value","push","s","clone","Object","defineProperties","toString","map","Promise","all","enumerable","canShrinkWithoutContext","shrink","_value","_context","nil"],"mappings":"AAAA,SAASA,aAAT,QAA8B,mDAA9B;AACA,SAASC,SAAT,QAA0B,+CAA1B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,cAAT,EAAyBC,mBAAzB,EAA8CC,SAA9C,EAAyDC,cAAzD,QAA+E,0BAA/E;;AACA,SAASC,WAAT,CAAqBC,iBAArB,EAAwC;AACpC,SAAQ,UAASA,iBAAiB,CAACC,IAAlB,CAAuB,GAAvB,CAA4B,IAA7C;AACH;;AACD,OAAO,MAAMC,eAAN,SAA8BX,aAA9B,CAA4C;AAC/CY,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb;AACA,SAAKA,GAAL,GAAWA,GAAX;AACH;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;AACvB,UAAMC,iBAAiB,GAAGD,UAAU,KAAKE,SAAf,IAA4BH,IAAI,CAACI,OAAL,CAAa,CAAb,EAAgBH,UAAhB,MAAgC,CAA5D,GAAgEA,UAAhE,GAA6EE,SAAvG;;AACA,UAAME,gBAAgB,GAAG,MAAM;AAC3B,YAAMC,UAAU,GAAG,EAAnB;;AACA,YAAMC,CAAC,GAAG,WAAWT,GAAX,EAAgBU,UAAhB,EAA4B;AAClC,eAAO,IAAP,EAAa;AACT,gBAAMC,KAAK,GAAGX,GAAG,CAACC,QAAJ,CAAaS,UAAb,EAAyBN,iBAAzB,EAA4CO,KAA1D;AACAH,UAAAA,UAAU,CAACI,IAAX,CAAgBD,KAAhB;AACA,gBAAMA,KAAN;AACH;AACJ,OAND;;AAOA,YAAME,CAAC,GAAG,IAAIvB,MAAJ,CAAWmB,CAAC,CAAC,KAAKT,GAAN,EAAWE,IAAI,CAACY,KAAL,EAAX,CAAZ,CAAV;AACA,aAAOC,MAAM,CAACC,gBAAP,CAAwBH,CAAxB,EAA2B;AAC9BI,QAAAA,QAAQ,EAAE;AAAEN,UAAAA,KAAK,EAAE,MAAMhB,WAAW,CAACa,UAAU,CAACU,GAAX,CAAezB,SAAf,CAAD;AAA1B,SADoB;AAE9B,SAACC,cAAD,GAAkB;AAAEiB,UAAAA,KAAK,EAAE,MAAMhB,WAAW,CAACa,UAAU,CAACU,GAAX,CAAezB,SAAf,CAAD;AAA1B,SAFY;AAG9B,SAACD,mBAAD,GAAuB;AAAEmB,UAAAA,KAAK,EAAE,YAAYhB,WAAW,CAAC,MAAMwB,OAAO,CAACC,GAAR,CAAYZ,UAAU,CAACU,GAAX,CAAe3B,cAAf,CAAZ,CAAP;AAAhC,SAHO;AAI9B,SAACF,WAAD,GAAe;AAAEsB,UAAAA,KAAK,EAAEJ,gBAAT;AAA2Bc,UAAAA,UAAU,EAAE;AAAvC;AAJe,OAA3B,CAAP;AAMH,KAhBD;;AAiBA,WAAO,IAAIjC,SAAJ,CAAcmB,gBAAgB,EAA9B,EAAkCF,SAAlC,CAAP;AACH;;AACDiB,EAAAA,uBAAuB,CAACX,KAAD,EAAQ;AAC3B,WAAO,KAAP;AACH;;AACDY,EAAAA,MAAM,CAACC,MAAD,EAASC,QAAT,EAAmB;AACrB,WAAOnC,MAAM,CAACoC,GAAP,EAAP;AACH;;AA/B8C","sourcesContent":["import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../../utils/stringify.js';\nfunction prettyPrint(seenValuesStrings) {\n    return `Stream(${seenValuesStrings.join(',')}…)`;\n}\nexport class StreamArbitrary extends NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n        const enrichedProducer = () => {\n            const seenValues = [];\n            const g = function* (arb, clonedMrng) {\n                while (true) {\n                    const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n                    seenValues.push(value);\n                    yield value;\n                }\n            };\n            const s = new Stream(g(this.arb, mrng.clone()));\n            return Object.defineProperties(s, {\n                toString: { value: () => prettyPrint(seenValues.map(stringify)) },\n                [toStringMethod]: { value: () => prettyPrint(seenValues.map(stringify)) },\n                [asyncToStringMethod]: { value: async () => prettyPrint(await Promise.all(seenValues.map(asyncStringify))) },\n                [cloneMethod]: { value: enrichedProducer, enumerable: true },\n            });\n        };\n        return new NextValue(enrichedProducer(), undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(_value, _context) {\n        return Stream.nil();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}