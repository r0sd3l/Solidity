{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeContenthash = decodeContenthash;\nexports.encodeContenthash = encodeContenthash;\nexports.isValidContenthash = isValidContenthash;\nexports.validateContent = validateContent;\n\nvar _contentHash = _interopRequireDefault(require(\"content-hash\"));\n\nvar _ethers = require(\"ethers\");\n\nvar _bs = _interopRequireDefault(require(\"bs58\"));\n\nvar supportedCodecs = ['ipns-ns', 'ipfs-ns', 'swarm-ns', 'onion', 'onion3'];\nvar utils = _ethers.ethers.utils;\n\nfunction decodeContenthash(encoded) {\n  var decoded, protocolType, error;\n\n  if (encoded.error) {\n    return {\n      protocolType: null,\n      decoded: encoded.error\n    };\n  }\n\n  if (encoded) {\n    try {\n      decoded = _contentHash[\"default\"].decode(encoded);\n\n      var codec = _contentHash[\"default\"].getCodec(encoded);\n\n      if (codec === 'ipfs-ns') {\n        protocolType = 'ipfs';\n      } else if (codec === 'ipns-ns') {\n        decoded = _bs[\"default\"].decode(decoded).slice(2).toString();\n        protocolType = 'ipns';\n      } else if (codec === 'swarm-ns') {\n        protocolType = 'bzz';\n      } else if (codec === 'onion') {\n        protocolType = 'onion';\n      } else if (codec === 'onion3') {\n        protocolType = 'onion3';\n      } else {\n        decoded = encoded;\n      }\n    } catch (e) {\n      error = e.message;\n    }\n  }\n\n  return {\n    protocolType: protocolType,\n    decoded: decoded,\n    error: error\n  };\n}\n\nfunction validateContent(encoded) {\n  return _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.ipfs) || _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.swarm);\n}\n\nfunction isValidContenthash(encoded) {\n  try {\n    var codec = _contentHash[\"default\"].getCodec(encoded);\n\n    return utils.isHexString(encoded) && supportedCodecs.includes(codec);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction encodeContenthash(text) {\n  var content, contentType;\n  var encoded = false;\n\n  if (!!text) {\n    var matched = text.match(/^(ipfs|ipns|bzz|onion|onion3):\\/\\/(.*)/) || text.match(/\\/(ipfs)\\/(.*)/) || text.match(/\\/(ipns)\\/(.*)/);\n\n    if (matched) {\n      contentType = matched[1];\n      content = matched[2];\n    }\n\n    try {\n      if (contentType === 'ipfs') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].encode('ipfs-ns', content);\n        }\n      } else if (contentType === 'ipns') {\n        var bs58content = _bs[\"default\"].encode(Buffer.concat([Buffer.from([0, content.length]), Buffer.from(content)]));\n\n        encoded = '0x' + _contentHash[\"default\"].encode('ipns-ns', bs58content);\n      } else if (contentType === 'bzz') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].fromSwarm(content);\n        }\n      } else if (contentType === 'onion') {\n        if (content.length == 16) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion', content);\n        }\n      } else if (contentType === 'onion3') {\n        if (content.length == 56) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion3', content);\n        }\n      } else {\n        console.warn('Unsupported protocol or invalid value', {\n          contentType: contentType,\n          text: text\n        });\n      }\n    } catch (err) {\n      console.warn('Error encoding content hash', {\n        text: text,\n        encoded: encoded\n      }); //throw 'Error encoding content hash'\n    }\n  }\n\n  return encoded;\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/@ensdomains/ensjs/dist/utils/contents.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","decodeContenthash","encodeContenthash","isValidContenthash","validateContent","_contentHash","_ethers","_bs","supportedCodecs","utils","ethers","encoded","decoded","protocolType","error","decode","codec","getCodec","slice","toString","e","message","isHashOfType","Types","ipfs","swarm","isHexString","includes","console","log","text","content","contentType","matched","match","length","encode","bs58content","Buffer","concat","from","fromSwarm","warn","err"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeContenthash = decodeContenthash;\nexports.encodeContenthash = encodeContenthash;\nexports.isValidContenthash = isValidContenthash;\nexports.validateContent = validateContent;\n\nvar _contentHash = _interopRequireDefault(require(\"content-hash\"));\n\nvar _ethers = require(\"ethers\");\n\nvar _bs = _interopRequireDefault(require(\"bs58\"));\n\nvar supportedCodecs = ['ipns-ns', 'ipfs-ns', 'swarm-ns', 'onion', 'onion3'];\nvar utils = _ethers.ethers.utils;\n\nfunction decodeContenthash(encoded) {\n  var decoded, protocolType, error;\n\n  if (encoded.error) {\n    return {\n      protocolType: null,\n      decoded: encoded.error\n    };\n  }\n\n  if (encoded) {\n    try {\n      decoded = _contentHash[\"default\"].decode(encoded);\n\n      var codec = _contentHash[\"default\"].getCodec(encoded);\n\n      if (codec === 'ipfs-ns') {\n        protocolType = 'ipfs';\n      } else if (codec === 'ipns-ns') {\n        decoded = _bs[\"default\"].decode(decoded).slice(2).toString();\n        protocolType = 'ipns';\n      } else if (codec === 'swarm-ns') {\n        protocolType = 'bzz';\n      } else if (codec === 'onion') {\n        protocolType = 'onion';\n      } else if (codec === 'onion3') {\n        protocolType = 'onion3';\n      } else {\n        decoded = encoded;\n      }\n    } catch (e) {\n      error = e.message;\n    }\n  }\n\n  return {\n    protocolType: protocolType,\n    decoded: decoded,\n    error: error\n  };\n}\n\nfunction validateContent(encoded) {\n  return _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.ipfs) || _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.swarm);\n}\n\nfunction isValidContenthash(encoded) {\n  try {\n    var codec = _contentHash[\"default\"].getCodec(encoded);\n\n    return utils.isHexString(encoded) && supportedCodecs.includes(codec);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction encodeContenthash(text) {\n  var content, contentType;\n  var encoded = false;\n\n  if (!!text) {\n    var matched = text.match(/^(ipfs|ipns|bzz|onion|onion3):\\/\\/(.*)/) || text.match(/\\/(ipfs)\\/(.*)/) || text.match(/\\/(ipns)\\/(.*)/);\n\n    if (matched) {\n      contentType = matched[1];\n      content = matched[2];\n    }\n\n    try {\n      if (contentType === 'ipfs') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].encode('ipfs-ns', content);\n        }\n      } else if (contentType === 'ipns') {\n        var bs58content = _bs[\"default\"].encode(Buffer.concat([Buffer.from([0, content.length]), Buffer.from(content)]));\n\n        encoded = '0x' + _contentHash[\"default\"].encode('ipns-ns', bs58content);\n      } else if (contentType === 'bzz') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].fromSwarm(content);\n        }\n      } else if (contentType === 'onion') {\n        if (content.length == 16) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion', content);\n        }\n      } else if (contentType === 'onion3') {\n        if (content.length == 56) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion3', content);\n        }\n      } else {\n        console.warn('Unsupported protocol or invalid value', {\n          contentType: contentType,\n          text: text\n        });\n      }\n    } catch (err) {\n      console.warn('Error encoding content hash', {\n        text: text,\n        encoded: encoded\n      }); //throw 'Error encoding content hash'\n    }\n  }\n\n  return encoded;\n}"]},"metadata":{},"sourceType":"script"}