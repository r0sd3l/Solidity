{"ast":null,"code":"import { scheduleCommands } from './commands/ScheduledCommand.js';\n\nconst genericModelRun = (s, cmds, initialValue, runCmd, then) => {\n  return s.then(o => {\n    const {\n      model,\n      real\n    } = o;\n    let state = initialValue;\n\n    for (const c of cmds) {\n      state = then(state, () => {\n        return runCmd(c, model, real);\n      });\n    }\n\n    return state;\n  });\n};\n\nconst internalModelRun = (s, cmds) => {\n  const then = (_p, c) => c();\n\n  const setupProducer = {\n    then: fun => {\n      fun(s());\n      return undefined;\n    }\n  };\n\n  const runSync = (cmd, m, r) => {\n    if (cmd.check(m)) cmd.run(m, r);\n    return undefined;\n  };\n\n  return genericModelRun(setupProducer, cmds, undefined, runSync, then);\n};\n\nconst isAsyncSetup = s => {\n  return typeof s.then === 'function';\n};\n\nconst internalAsyncModelRun = async function (s, cmds) {\n  let defaultPromise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Promise.resolve();\n\n  const then = (p, c) => p.then(c);\n\n  const setupProducer = {\n    then: fun => {\n      const out = s();\n      if (isAsyncSetup(out)) return out.then(fun);else return fun(out);\n    }\n  };\n\n  const runAsync = async (cmd, m, r) => {\n    if (await cmd.check(m)) await cmd.run(m, r);\n  };\n\n  return await genericModelRun(setupProducer, cmds, defaultPromise, runAsync, then);\n};\n\nexport function modelRun(s, cmds) {\n  internalModelRun(s, cmds);\n}\nexport async function asyncModelRun(s, cmds) {\n  await internalAsyncModelRun(s, cmds);\n}\nexport async function scheduledModelRun(scheduler, s, cmds) {\n  const scheduledCommands = scheduleCommands(scheduler, cmds);\n  const out = internalAsyncModelRun(s, scheduledCommands, scheduler.schedule(Promise.resolve(), 'startModel'));\n  await scheduler.waitAll();\n  await out;\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/model/ModelRunner.js"],"names":["scheduleCommands","genericModelRun","s","cmds","initialValue","runCmd","then","o","model","real","state","c","internalModelRun","_p","setupProducer","fun","undefined","runSync","cmd","m","r","check","run","isAsyncSetup","internalAsyncModelRun","defaultPromise","Promise","resolve","p","out","runAsync","modelRun","asyncModelRun","scheduledModelRun","scheduler","scheduledCommands","schedule","waitAll"],"mappings":"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","sourcesContent":["import { scheduleCommands } from './commands/ScheduledCommand.js';\nconst genericModelRun = (s, cmds, initialValue, runCmd, then) => {\n    return s.then((o) => {\n        const { model, real } = o;\n        let state = initialValue;\n        for (const c of cmds) {\n            state = then(state, () => {\n                return runCmd(c, model, real);\n            });\n        }\n        return state;\n    });\n};\nconst internalModelRun = (s, cmds) => {\n    const then = (_p, c) => c();\n    const setupProducer = {\n        then: (fun) => {\n            fun(s());\n            return undefined;\n        },\n    };\n    const runSync = (cmd, m, r) => {\n        if (cmd.check(m))\n            cmd.run(m, r);\n        return undefined;\n    };\n    return genericModelRun(setupProducer, cmds, undefined, runSync, then);\n};\nconst isAsyncSetup = (s) => {\n    return typeof s.then === 'function';\n};\nconst internalAsyncModelRun = async (s, cmds, defaultPromise = Promise.resolve()) => {\n    const then = (p, c) => p.then(c);\n    const setupProducer = {\n        then: (fun) => {\n            const out = s();\n            if (isAsyncSetup(out))\n                return out.then(fun);\n            else\n                return fun(out);\n        },\n    };\n    const runAsync = async (cmd, m, r) => {\n        if (await cmd.check(m))\n            await cmd.run(m, r);\n    };\n    return await genericModelRun(setupProducer, cmds, defaultPromise, runAsync, then);\n};\nexport function modelRun(s, cmds) {\n    internalModelRun(s, cmds);\n}\nexport async function asyncModelRun(s, cmds) {\n    await internalAsyncModelRun(s, cmds);\n}\nexport async function scheduledModelRun(scheduler, s, cmds) {\n    const scheduledCommands = scheduleCommands(scheduler, cmds);\n    const out = internalAsyncModelRun(s, scheduledCommands, scheduler.schedule(Promise.resolve(), 'startModel'));\n    await scheduler.waitAll();\n    await out;\n}\n"]},"metadata":{},"sourceType":"module"}