{"ast":null,"code":"import { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { integer } from '../../integer.js';\nimport { WithShrinkFromOtherArbitrary } from '../WithShrinkFromOtherArbitrary.js';\nexport function restrictedIntegerArbitraryBuilder(min, maxGenerated, max) {\n  const generatorArbitrary = convertToNext(integer({\n    min,\n    max: maxGenerated\n  }));\n\n  if (maxGenerated === max) {\n    return convertFromNext(generatorArbitrary);\n  }\n\n  const shrinkerArbitrary = convertToNext(integer({\n    min,\n    max\n  }));\n  return convertFromNext(new WithShrinkFromOtherArbitrary(generatorArbitrary, shrinkerArbitrary));\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/RestrictedIntegerArbitraryBuilder.js"],"names":["convertFromNext","convertToNext","integer","WithShrinkFromOtherArbitrary","restrictedIntegerArbitraryBuilder","min","maxGenerated","max","generatorArbitrary","shrinkerArbitrary"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,mDAA/C;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,4BAAT,QAA6C,oCAA7C;AACA,OAAO,SAASC,iCAAT,CAA2CC,GAA3C,EAAgDC,YAAhD,EAA8DC,GAA9D,EAAmE;AACtE,QAAMC,kBAAkB,GAAGP,aAAa,CAACC,OAAO,CAAC;AAAEG,IAAAA,GAAF;AAAOE,IAAAA,GAAG,EAAED;AAAZ,GAAD,CAAR,CAAxC;;AACA,MAAIA,YAAY,KAAKC,GAArB,EAA0B;AACtB,WAAOP,eAAe,CAACQ,kBAAD,CAAtB;AACH;;AACD,QAAMC,iBAAiB,GAAGR,aAAa,CAACC,OAAO,CAAC;AAAEG,IAAAA,GAAF;AAAOE,IAAAA;AAAP,GAAD,CAAR,CAAvC;AACA,SAAOP,eAAe,CAAC,IAAIG,4BAAJ,CAAiCK,kBAAjC,EAAqDC,iBAArD,CAAD,CAAtB;AACH","sourcesContent":["import { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { integer } from '../../integer.js';\nimport { WithShrinkFromOtherArbitrary } from '../WithShrinkFromOtherArbitrary.js';\nexport function restrictedIntegerArbitraryBuilder(min, maxGenerated, max) {\n    const generatorArbitrary = convertToNext(integer({ min, max: maxGenerated }));\n    if (maxGenerated === max) {\n        return convertFromNext(generatorArbitrary);\n    }\n    const shrinkerArbitrary = convertToNext(integer({ min, max }));\n    return convertFromNext(new WithShrinkFromOtherArbitrary(generatorArbitrary, shrinkerArbitrary));\n}\n"]},"metadata":{},"sourceType":"module"}