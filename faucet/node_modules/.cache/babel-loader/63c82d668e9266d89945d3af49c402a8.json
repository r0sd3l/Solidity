{"ast":null,"code":"import { cloneMethod } from '../../symbols.js';\nexport class CommandsIterable {\n  constructor(commands, metadataForReplay) {\n    this.commands = commands;\n    this.metadataForReplay = metadataForReplay;\n  }\n\n  [Symbol.iterator]() {\n    return this.commands[Symbol.iterator]();\n  }\n\n  [cloneMethod]() {\n    return new CommandsIterable(this.commands.map(c => c.clone()), this.metadataForReplay);\n  }\n\n  toString() {\n    const serializedCommands = this.commands.filter(c => c.hasRan).map(c => c.toString()).join(',');\n    const metadata = this.metadataForReplay();\n    return metadata.length !== 0 ? `${serializedCommands} /*${metadata}*/` : serializedCommands;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rodri/Solidity/solidity/faucet/node_modules/fast-check/lib/esm/check/model/commands/CommandsIterable.js"],"names":["cloneMethod","CommandsIterable","constructor","commands","metadataForReplay","Symbol","iterator","map","c","clone","toString","serializedCommands","filter","hasRan","join","metadata","length"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,QAAD,EAAWC,iBAAX,EAA8B;AACrC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACH;;AACe,GAAfC,MAAM,CAACC,QAAQ,IAAI;AAChB,WAAO,KAAKH,QAAL,CAAcE,MAAM,CAACC,QAArB,GAAP;AACH;;AACW,GAAXN,WAAW,IAAI;AACZ,WAAO,IAAIC,gBAAJ,CAAqB,KAAKE,QAAL,CAAcI,GAAd,CAAmBC,CAAD,IAAOA,CAAC,CAACC,KAAF,EAAzB,CAArB,EAA0D,KAAKL,iBAA/D,CAAP;AACH;;AACDM,EAAAA,QAAQ,GAAG;AACP,UAAMC,kBAAkB,GAAG,KAAKR,QAAL,CACtBS,MADsB,CACdJ,CAAD,IAAOA,CAAC,CAACK,MADM,EAEtBN,GAFsB,CAEjBC,CAAD,IAAOA,CAAC,CAACE,QAAF,EAFW,EAGtBI,IAHsB,CAGjB,GAHiB,CAA3B;AAIA,UAAMC,QAAQ,GAAG,KAAKX,iBAAL,EAAjB;AACA,WAAOW,QAAQ,CAACC,MAAT,KAAoB,CAApB,GAAyB,GAAEL,kBAAmB,MAAKI,QAAS,IAA5D,GAAkEJ,kBAAzE;AACH;;AAlByB","sourcesContent":["import { cloneMethod } from '../../symbols.js';\nexport class CommandsIterable {\n    constructor(commands, metadataForReplay) {\n        this.commands = commands;\n        this.metadataForReplay = metadataForReplay;\n    }\n    [Symbol.iterator]() {\n        return this.commands[Symbol.iterator]();\n    }\n    [cloneMethod]() {\n        return new CommandsIterable(this.commands.map((c) => c.clone()), this.metadataForReplay);\n    }\n    toString() {\n        const serializedCommands = this.commands\n            .filter((c) => c.hasRan)\n            .map((c) => c.toString())\n            .join(',');\n        const metadata = this.metadataForReplay();\n        return metadata.length !== 0 ? `${serializedCommands} /*${metadata}*/` : serializedCommands;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}